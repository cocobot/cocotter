
VL53L1X_ULD_API_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08006370  08006370  00016370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800686c  0800686c  0001686c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006874  08006874  00016874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006878  08006878  00016878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  20000000  0800687c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000228  200001e0  08006a5c  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000408  08006a5c  00020408  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_line   00010674  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   0000fd6a  00000000  00000000  00030884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000203c  00000000  00000000  000405ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000a50  00000000  00000000  00042630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00085283  00000000  00000000  00043080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  000c8308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00008fcb  00000000  00000000  000c8ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001726a  00000000  00000000  000d1cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000e8f1d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003040  00000000  00000000  000e8f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000b4  00000000  00000000  000ebfb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000183  00000000  00000000  000ec064  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006358 	.word	0x08006358

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08006358 	.word	0x08006358

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f02:	e003      	b.n	8000f0c <LoopCopyDataInit>

08000f04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f0a:	3104      	adds	r1, #4

08000f0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f0c:	480b      	ldr	r0, [pc, #44]	; (8000f3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f14:	d3f6      	bcc.n	8000f04 <CopyDataInit>
  ldr  r2, =_sbss
 8000f16:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f18:	e002      	b.n	8000f20 <LoopFillZerobss>

08000f1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f1c:	f842 3b04 	str.w	r3, [r2], #4

08000f20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f24:	d3f9      	bcc.n	8000f1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f26:	f000 ffc3 	bl	8001eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f002 fbff 	bl	800372c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2e:	f000 f91f 	bl	8001170 <main>
  bx  lr    
 8000f32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f34:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000f38:	0800687c 	.word	0x0800687c
  ldr  r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f40:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8000f44:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8000f48:	20000408 	.word	0x20000408

08000f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC_IRQHandler>
	...

08000f50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8000f50:	b570      	push	{r4, r5, r6, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f54:	2400      	movs	r4, #0
 8000f56:	9401      	str	r4, [sp, #4]
 8000f58:	4b29      	ldr	r3, [pc, #164]	; (8001000 <MX_GPIO_Init+0xb0>)
 8000f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f5c:	f042 0204 	orr.w	r2, r2, #4
 8000f60:	631a      	str	r2, [r3, #48]	; 0x30
 8000f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f64:	f002 0204 	and.w	r2, r2, #4
 8000f68:	9201      	str	r2, [sp, #4]
 8000f6a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f6c:	9402      	str	r4, [sp, #8]
 8000f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f74:	631a      	str	r2, [r3, #48]	; 0x30
 8000f76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f78:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000f7c:	9202      	str	r2, [sp, #8]
 8000f7e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f80:	9403      	str	r4, [sp, #12]
 8000f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f84:	f042 0201 	orr.w	r2, r2, #1
 8000f88:	631a      	str	r2, [r3, #48]	; 0x30
 8000f8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f8c:	f002 0201 	and.w	r2, r2, #1
 8000f90:	9203      	str	r2, [sp, #12]
 8000f92:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f94:	9404      	str	r4, [sp, #16]
 8000f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f98:	f042 0202 	orr.w	r2, r2, #2
 8000f9c:	631a      	str	r2, [r3, #48]	; 0x30
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	9304      	str	r3, [sp, #16]
 8000fa6:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fa8:	4d16      	ldr	r5, [pc, #88]	; (8001004 <MX_GPIO_Init+0xb4>)
 8000faa:	4622      	mov	r2, r4
 8000fac:	2120      	movs	r1, #32
 8000fae:	4628      	mov	r0, r5
 8000fb0:	f001 f963 	bl	800227a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fba:	4e13      	ldr	r6, [pc, #76]	; (8001008 <MX_GPIO_Init+0xb8>)
 8000fbc:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	a905      	add	r1, sp, #20
 8000fc2:	4812      	ldr	r0, [pc, #72]	; (800100c <MX_GPIO_Init+0xbc>)
 8000fc4:	f001 f87e 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VL53L1X_INT_Pin */
  GPIO_InitStruct.Pin = VL53L1X_INT_Pin;
 8000fc8:	2310      	movs	r3, #16
 8000fca:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fcc:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fce:	2601      	movs	r6, #1
 8000fd0:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(VL53L1X_INT_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	a905      	add	r1, sp, #20
 8000fd4:	4628      	mov	r0, r5
 8000fd6:	f001 f875 	bl	80020c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fda:	2320      	movs	r3, #32
 8000fdc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	a905      	add	r1, sp, #20
 8000fe6:	4628      	mov	r0, r5
 8000fe8:	f001 f86c 	bl	80020c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000fec:	4622      	mov	r2, r4
 8000fee:	4621      	mov	r1, r4
 8000ff0:	200a      	movs	r0, #10
 8000ff2:	f000 fff9 	bl	8001fe8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ff6:	200a      	movs	r0, #10
 8000ff8:	f001 f82e 	bl	8002058 <HAL_NVIC_EnableIRQ>

}
 8000ffc:	b00a      	add	sp, #40	; 0x28
 8000ffe:	bd70      	pop	{r4, r5, r6, pc}
 8001000:	40023800 	.word	0x40023800
 8001004:	40020000 	.word	0x40020000
 8001008:	10210000 	.word	0x10210000
 800100c:	40020800 	.word	0x40020800

08001010 <fputc>:
{
 8001010:	b500      	push	{lr}
 8001012:	b083      	sub	sp, #12
 8001014:	9001      	str	r0, [sp, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 8001016:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800101a:	2201      	movs	r2, #1
 800101c:	a901      	add	r1, sp, #4
 800101e:	4803      	ldr	r0, [pc, #12]	; (800102c <fputc+0x1c>)
 8001020:	f002 fb15 	bl	800364e <HAL_UART_Transmit>
}
 8001024:	9801      	ldr	r0, [sp, #4]
 8001026:	b003      	add	sp, #12
 8001028:	f85d fb04 	ldr.w	pc, [sp], #4
 800102c:	200001fc 	.word	0x200001fc

08001030 <HAL_GPIO_EXTI_Callback>:
		if (GPIO_Pin==VL53L1X_INT_Pin)
 8001030:	2810      	cmp	r0, #16
 8001032:	d000      	beq.n	8001036 <HAL_GPIO_EXTI_Callback+0x6>
}
 8001034:	4770      	bx	lr
			IntCount++;
 8001036:	4a02      	ldr	r2, [pc, #8]	; (8001040 <HAL_GPIO_EXTI_Callback+0x10>)
 8001038:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800103a:	3301      	adds	r3, #1
 800103c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800103e:	e7f9      	b.n	8001034 <HAL_GPIO_EXTI_Callback+0x4>
 8001040:	200001fc 	.word	0x200001fc

08001044 <Error_Handler>:
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8001044:	e7fe      	b.n	8001044 <Error_Handler>
	...

08001048 <MX_USART2_UART_Init>:
{
 8001048:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 800104a:	480a      	ldr	r0, [pc, #40]	; (8001074 <MX_USART2_UART_Init+0x2c>)
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <MX_USART2_UART_Init+0x30>)
 800104e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001050:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001054:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	2300      	movs	r3, #0
 8001058:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800105a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800105c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800105e:	220c      	movs	r2, #12
 8001060:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001062:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001064:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001066:	f002 fac3 	bl	80035f0 <HAL_UART_Init>
 800106a:	b900      	cbnz	r0, 800106e <MX_USART2_UART_Init+0x26>
}
 800106c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800106e:	f7ff ffe9 	bl	8001044 <Error_Handler>
 8001072:	bf00      	nop
 8001074:	200001fc 	.word	0x200001fc
 8001078:	40004400 	.word	0x40004400

0800107c <MX_I2C1_Init>:
{
 800107c:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800107e:	480b      	ldr	r0, [pc, #44]	; (80010ac <MX_I2C1_Init+0x30>)
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <MX_I2C1_Init+0x34>)
 8001082:	6443      	str	r3, [r0, #68]	; 0x44
  hi2c1.Init.ClockSpeed = 100000;
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <MX_I2C1_Init+0x38>)
 8001086:	6483      	str	r3, [r0, #72]	; 0x48
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001088:	2300      	movs	r3, #0
 800108a:	64c3      	str	r3, [r0, #76]	; 0x4c
  hi2c1.Init.OwnAddress1 = 0;
 800108c:	6503      	str	r3, [r0, #80]	; 0x50
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800108e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001092:	6542      	str	r2, [r0, #84]	; 0x54
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001094:	6583      	str	r3, [r0, #88]	; 0x58
  hi2c1.Init.OwnAddress2 = 0;
 8001096:	65c3      	str	r3, [r0, #92]	; 0x5c
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001098:	6603      	str	r3, [r0, #96]	; 0x60
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800109a:	6643      	str	r3, [r0, #100]	; 0x64
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800109c:	3044      	adds	r0, #68	; 0x44
 800109e:	f001 fb01 	bl	80026a4 <HAL_I2C_Init>
 80010a2:	b900      	cbnz	r0, 80010a6 <MX_I2C1_Init+0x2a>
}
 80010a4:	bd08      	pop	{r3, pc}
    Error_Handler();
 80010a6:	f7ff ffcd 	bl	8001044 <Error_Handler>
 80010aa:	bf00      	nop
 80010ac:	200001fc 	.word	0x200001fc
 80010b0:	40005400 	.word	0x40005400
 80010b4:	000186a0 	.word	0x000186a0

080010b8 <SystemClock_Config>:
{
 80010b8:	b500      	push	{lr}
 80010ba:	b095      	sub	sp, #84	; 0x54
  __HAL_RCC_PWR_CLK_ENABLE();
 80010bc:	2200      	movs	r2, #0
 80010be:	9201      	str	r2, [sp, #4]
 80010c0:	4b28      	ldr	r3, [pc, #160]	; (8001164 <SystemClock_Config+0xac>)
 80010c2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80010c4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80010c8:	6419      	str	r1, [r3, #64]	; 0x40
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010d4:	9202      	str	r2, [sp, #8]
 80010d6:	4924      	ldr	r1, [pc, #144]	; (8001168 <SystemClock_Config+0xb0>)
 80010d8:	680b      	ldr	r3, [r1, #0]
 80010da:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010e2:	600b      	str	r3, [r1, #0]
 80010e4:	680b      	ldr	r3, [r1, #0]
 80010e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010ea:	9302      	str	r3, [sp, #8]
 80010ec:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ee:	2102      	movs	r1, #2
 80010f0:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f2:	2301      	movs	r3, #1
 80010f4:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80010f6:	2310      	movs	r3, #16
 80010f8:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fa:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010fc:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010fe:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001100:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001104:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001106:	2304      	movs	r3, #4
 8001108:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800110a:	2307      	movs	r3, #7
 800110c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110e:	a808      	add	r0, sp, #32
 8001110:	f001 fd9a 	bl	8002c48 <HAL_RCC_OscConfig>
 8001114:	bb08      	cbnz	r0, 800115a <SystemClock_Config+0xa2>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001116:	230f      	movs	r3, #15
 8001118:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800111a:	2102      	movs	r1, #2
 800111c:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001122:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001126:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001128:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800112a:	a803      	add	r0, sp, #12
 800112c:	f001 ffc2 	bl	80030b4 <HAL_RCC_ClockConfig>
 8001130:	b9a8      	cbnz	r0, 800115e <SystemClock_Config+0xa6>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001132:	f002 f86d 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <SystemClock_Config+0xb4>)
 8001138:	fba3 3000 	umull	r3, r0, r3, r0
 800113c:	0980      	lsrs	r0, r0, #6
 800113e:	f000 ff97 	bl	8002070 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001142:	2004      	movs	r0, #4
 8001144:	f000 ffa8 	bl	8002098 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	4611      	mov	r1, r2
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f000 ff4a 	bl	8001fe8 <HAL_NVIC_SetPriority>
}
 8001154:	b015      	add	sp, #84	; 0x54
 8001156:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800115a:	f7ff ff73 	bl	8001044 <Error_Handler>
    Error_Handler();
 800115e:	f7ff ff71 	bl	8001044 <Error_Handler>
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40007000 	.word	0x40007000
 800116c:	10624dd3 	.word	0x10624dd3

08001170 <main>:
{
 8001170:	b530      	push	{r4, r5, lr}
 8001172:	b087      	sub	sp, #28
  uint8_t byteData, sensorState=0;
 8001174:	2400      	movs	r4, #0
 8001176:	f88d 4016 	strb.w	r4, [sp, #22]
  HAL_Init();
 800117a:	f000 fee3 	bl	8001f44 <HAL_Init>
  SystemClock_Config();
 800117e:	f7ff ff9b 	bl	80010b8 <SystemClock_Config>
  MX_GPIO_Init();
 8001182:	f7ff fee5 	bl	8000f50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001186:	f7ff ff5f 	bl	8001048 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800118a:	f7ff ff77 	bl	800107c <MX_I2C1_Init>
  XNUCLEO53L1A1_Init();
 800118e:	f000 fb33 	bl	80017f8 <XNUCLEO53L1A1_Init>
  status = XNUCLEO53L1A1_ResetId(ToFSensor, 0); // Reset ToF sensor
 8001192:	4621      	mov	r1, r4
 8001194:	2001      	movs	r0, #1
 8001196:	f000 fb7b 	bl	8001890 <XNUCLEO53L1A1_ResetId>
 800119a:	4c5d      	ldr	r4, [pc, #372]	; (8001310 <main+0x1a0>)
 800119c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
  HAL_Delay(2);
 80011a0:	2002      	movs	r0, #2
 80011a2:	f000 fefb 	bl	8001f9c <HAL_Delay>
  status = XNUCLEO53L1A1_ResetId(ToFSensor, 1); // Reset ToF sensor
 80011a6:	2101      	movs	r1, #1
 80011a8:	4608      	mov	r0, r1
 80011aa:	f000 fb71 	bl	8001890 <XNUCLEO53L1A1_ResetId>
 80011ae:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
  HAL_Delay(2);
 80011b2:	2002      	movs	r0, #2
 80011b4:	f000 fef2 	bl	8001f9c <HAL_Delay>
  status = VL53L1_RdByte(dev, 0x010F, &byteData);
 80011b8:	4d56      	ldr	r5, [pc, #344]	; (8001314 <main+0x1a4>)
 80011ba:	f10d 0217 	add.w	r2, sp, #23
 80011be:	f240 110f 	movw	r1, #271	; 0x10f
 80011c2:	8828      	ldrh	r0, [r5, #0]
 80011c4:	f000 f9b8 	bl	8001538 <VL53L1_RdByte>
 80011c8:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
  printf("VL53L1X Model_ID: %X\n", byteData);
 80011cc:	f89d 1017 	ldrb.w	r1, [sp, #23]
 80011d0:	4851      	ldr	r0, [pc, #324]	; (8001318 <main+0x1a8>)
 80011d2:	f002 ff4f 	bl	8004074 <iprintf>
  status = VL53L1_RdByte(dev, 0x0110, &byteData);
 80011d6:	f10d 0217 	add.w	r2, sp, #23
 80011da:	f44f 7188 	mov.w	r1, #272	; 0x110
 80011de:	8828      	ldrh	r0, [r5, #0]
 80011e0:	f000 f9aa 	bl	8001538 <VL53L1_RdByte>
 80011e4:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
  printf("VL53L1X Module_Type: %X\n", byteData);
 80011e8:	f89d 1017 	ldrb.w	r1, [sp, #23]
 80011ec:	484b      	ldr	r0, [pc, #300]	; (800131c <main+0x1ac>)
 80011ee:	f002 ff41 	bl	8004074 <iprintf>
  status = VL53L1_RdWord(dev, 0x010F, &wordData);
 80011f2:	aa05      	add	r2, sp, #20
 80011f4:	f240 110f 	movw	r1, #271	; 0x10f
 80011f8:	8828      	ldrh	r0, [r5, #0]
 80011fa:	f000 f9b9 	bl	8001570 <VL53L1_RdWord>
 80011fe:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
  printf("VL53L1X: %X\n", wordData);
 8001202:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8001206:	4846      	ldr	r0, [pc, #280]	; (8001320 <main+0x1b0>)
 8001208:	f002 ff34 	bl	8004074 <iprintf>
  while(sensorState==0){
 800120c:	e00b      	b.n	8001226 <main+0xb6>
		status = VL53L1X_BootState(dev, &sensorState);
 800120e:	f10d 0116 	add.w	r1, sp, #22
 8001212:	4b40      	ldr	r3, [pc, #256]	; (8001314 <main+0x1a4>)
 8001214:	8818      	ldrh	r0, [r3, #0]
 8001216:	f000 fde7 	bl	8001de8 <VL53L1X_BootState>
 800121a:	4b3d      	ldr	r3, [pc, #244]	; (8001310 <main+0x1a0>)
 800121c:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	HAL_Delay(2);
 8001220:	2002      	movs	r0, #2
 8001222:	f000 febb 	bl	8001f9c <HAL_Delay>
  while(sensorState==0){
 8001226:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0ef      	beq.n	800120e <main+0x9e>
  printf("Chip booted\n");
 800122e:	483d      	ldr	r0, [pc, #244]	; (8001324 <main+0x1b4>)
 8001230:	f002 ffa6 	bl	8004180 <puts>
  status = VL53L1X_SensorInit(dev);
 8001234:	4d37      	ldr	r5, [pc, #220]	; (8001314 <main+0x1a4>)
 8001236:	8828      	ldrh	r0, [r5, #0]
 8001238:	f000 fbc4 	bl	80019c4 <VL53L1X_SensorInit>
 800123c:	4c34      	ldr	r4, [pc, #208]	; (8001310 <main+0x1a0>)
 800123e:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
  status = VL53L1X_SetDistanceMode(dev, 2); /* 1=short, 2=long */
 8001242:	2102      	movs	r1, #2
 8001244:	8828      	ldrh	r0, [r5, #0]
 8001246:	f000 fd44 	bl	8001cd2 <VL53L1X_SetDistanceMode>
 800124a:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
  status = VL53L1X_SetTimingBudgetInMs(dev, 100); /* in ms possible values [20, 50, 100, 200, 500] */
 800124e:	2164      	movs	r1, #100	; 0x64
 8001250:	8828      	ldrh	r0, [r5, #0]
 8001252:	f000 fc64 	bl	8001b1e <VL53L1X_SetTimingBudgetInMs>
 8001256:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
  status = VL53L1X_SetInterMeasurementInMs(dev, 100); /* in ms, IM must be > = TB */
 800125a:	2164      	movs	r1, #100	; 0x64
 800125c:	8828      	ldrh	r0, [r5, #0]
 800125e:	f000 fd9b 	bl	8001d98 <VL53L1X_SetInterMeasurementInMs>
 8001262:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
  printf("VL53L1X Ultra Lite Driver Example running ...\n");
 8001266:	4830      	ldr	r0, [pc, #192]	; (8001328 <main+0x1b8>)
 8001268:	f002 ff8a 	bl	8004180 <puts>
  status = VL53L1X_StartRanging(dev);   /* This function has to be called to enable the ranging */
 800126c:	8828      	ldrh	r0, [r5, #0]
 800126e:	f000 fb7b 	bl	8001968 <VL53L1X_StartRanging>
 8001272:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
 8001276:	e00b      	b.n	8001290 <main+0x120>
		  status = VL53L1X_CheckForDataReady(dev, &dataReady);
 8001278:	f10d 010a 	add.w	r1, sp, #10
 800127c:	4b25      	ldr	r3, [pc, #148]	; (8001314 <main+0x1a4>)
 800127e:	8818      	ldrh	r0, [r3, #0]
 8001280:	f000 fb7e 	bl	8001980 <VL53L1X_CheckForDataReady>
 8001284:	4b22      	ldr	r3, [pc, #136]	; (8001310 <main+0x1a0>)
 8001286:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
		  HAL_Delay(2);
 800128a:	2002      	movs	r0, #2
 800128c:	f000 fe86 	bl	8001f9c <HAL_Delay>
	  while (dataReady == 0){
 8001290:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0ef      	beq.n	8001278 <main+0x108>
	  dataReady = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	f88d 300a 	strb.w	r3, [sp, #10]
	  status = VL53L1X_GetRangeStatus(dev, &RangeStatus);
 800129e:	4d1d      	ldr	r5, [pc, #116]	; (8001314 <main+0x1a4>)
 80012a0:	f10d 010b 	add.w	r1, sp, #11
 80012a4:	8828      	ldrh	r0, [r5, #0]
 80012a6:	f000 fde7 	bl	8001e78 <VL53L1X_GetRangeStatus>
 80012aa:	4c19      	ldr	r4, [pc, #100]	; (8001310 <main+0x1a0>)
 80012ac:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	  status = VL53L1X_GetDistance(dev, &Distance);
 80012b0:	f10d 0112 	add.w	r1, sp, #18
 80012b4:	8828      	ldrh	r0, [r5, #0]
 80012b6:	f000 fda7 	bl	8001e08 <VL53L1X_GetDistance>
 80012ba:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	  status = VL53L1X_GetSignalRate(dev, &SignalRate);
 80012be:	a904      	add	r1, sp, #16
 80012c0:	8828      	ldrh	r0, [r5, #0]
 80012c2:	f000 fdae 	bl	8001e22 <VL53L1X_GetSignalRate>
 80012c6:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	  status = VL53L1X_GetAmbientRate(dev, &AmbientRate);
 80012ca:	f10d 010e 	add.w	r1, sp, #14
 80012ce:	8828      	ldrh	r0, [r5, #0]
 80012d0:	f000 fdc3 	bl	8001e5a <VL53L1X_GetAmbientRate>
 80012d4:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	  status = VL53L1X_GetSpadNb(dev, &SpadNum);
 80012d8:	a903      	add	r1, sp, #12
 80012da:	8828      	ldrh	r0, [r5, #0]
 80012dc:	f000 fdaf 	bl	8001e3e <VL53L1X_GetSpadNb>
 80012e0:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	  status = VL53L1X_ClearInterrupt(dev); /* clear interrupt has to be called to enable next interrupt*/
 80012e4:	8828      	ldrh	r0, [r5, #0]
 80012e6:	f000 fb25 	bl	8001934 <VL53L1X_ClearInterrupt>
 80012ea:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	  printf("%u, %u, %u, %u, %u\n", RangeStatus, Distance, SignalRate, AmbientRate,SpadNum);
 80012ee:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80012f2:	9301      	str	r3, [sp, #4]
 80012f4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80012fe:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8001302:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8001306:	4809      	ldr	r0, [pc, #36]	; (800132c <main+0x1bc>)
 8001308:	f002 feb4 	bl	8004074 <iprintf>
	  while (dataReady == 0){
 800130c:	e7c0      	b.n	8001290 <main+0x120>
 800130e:	bf00      	nop
 8001310:	200001fc 	.word	0x200001fc
 8001314:	20000000 	.word	0x20000000
 8001318:	080063fc 	.word	0x080063fc
 800131c:	08006414 	.word	0x08006414
 8001320:	08006430 	.word	0x08006430
 8001324:	08006440 	.word	0x08006440
 8001328:	0800644c 	.word	0x0800644c
 800132c:	0800647c 	.word	0x0800647c

08001330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001332:	2007      	movs	r0, #7
 8001334:	f000 fe46 	bl	8001fc4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	4611      	mov	r1, r2
 800133c:	f06f 000b 	mvn.w	r0, #11
 8001340:	f000 fe52 	bl	8001fe8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	4611      	mov	r1, r2
 8001348:	f06f 000a 	mvn.w	r0, #10
 800134c:	f000 fe4c 	bl	8001fe8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	4611      	mov	r1, r2
 8001354:	f06f 0009 	mvn.w	r0, #9
 8001358:	f000 fe46 	bl	8001fe8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800135c:	2200      	movs	r2, #0
 800135e:	4611      	mov	r1, r2
 8001360:	f06f 0004 	mvn.w	r0, #4
 8001364:	f000 fe40 	bl	8001fe8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	4611      	mov	r1, r2
 800136c:	f06f 0003 	mvn.w	r0, #3
 8001370:	f000 fe3a 	bl	8001fe8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	4611      	mov	r1, r2
 8001378:	f06f 0001 	mvn.w	r0, #1
 800137c:	f000 fe34 	bl	8001fe8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	4611      	mov	r1, r2
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f000 fe2e 	bl	8001fe8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138c:	bd08      	pop	{r3, pc}
	...

08001390 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8001390:	6802      	ldr	r2, [r0, #0]
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_I2C_MspInit+0x4c>)
 8001394:	429a      	cmp	r2, r3
 8001396:	d000      	beq.n	800139a <HAL_I2C_MspInit+0xa>
 8001398:	4770      	bx	lr
{
 800139a:	b500      	push	{lr}
 800139c:	b087      	sub	sp, #28
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800139e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013a2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a4:	2312      	movs	r3, #18
 80013a6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013b0:	2304      	movs	r3, #4
 80013b2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b4:	eb0d 0103 	add.w	r1, sp, r3
 80013b8:	4809      	ldr	r0, [pc, #36]	; (80013e0 <HAL_I2C_MspInit+0x50>)
 80013ba:	f000 fe83 	bl	80020c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_I2C_MspInit+0x54>)
 80013c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013c6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80013ca:	641a      	str	r2, [r3, #64]	; 0x40
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013d6:	b007      	add	sp, #28
 80013d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80013dc:	40005400 	.word	0x40005400
 80013e0:	40020400 	.word	0x40020400
 80013e4:	40023800 	.word	0x40023800

080013e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80013e8:	6802      	ldr	r2, [r0, #0]
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <HAL_UART_MspInit+0x44>)
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d000      	beq.n	80013f2 <HAL_UART_MspInit+0xa>
 80013f0:	4770      	bx	lr
{
 80013f2:	b500      	push	{lr}
 80013f4:	b087      	sub	sp, #28
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <HAL_UART_MspInit+0x48>)
 80013fc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80013fe:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001402:	6411      	str	r1, [r2, #64]	; 0x40
 8001404:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001406:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800140a:	9200      	str	r2, [sp, #0]
 800140c:	9a00      	ldr	r2, [sp, #0]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800140e:	220c      	movs	r2, #12
 8001410:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2202      	movs	r2, #2
 8001414:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800141a:	2307      	movs	r3, #7
 800141c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141e:	a901      	add	r1, sp, #4
 8001420:	4804      	ldr	r0, [pc, #16]	; (8001434 <HAL_UART_MspInit+0x4c>)
 8001422:	f000 fe4f 	bl	80020c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001426:	b007      	add	sp, #28
 8001428:	f85d fb04 	ldr.w	pc, [sp], #4
 800142c:	40004400 	.word	0x40004400
 8001430:	40023800 	.word	0x40023800
 8001434:	40020000 	.word	0x40020000

08001438 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001438:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143a:	f000 fd9d 	bl	8001f78 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800143e:	f000 fe3c 	bl	80020ba <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001442:	bd08      	pop	{r3, pc}

08001444 <EXTI4_IRQHandler>:

/**
* @brief This function handles EXTI line4 interrupt.
*/
void EXTI4_IRQHandler(void)
{
 8001444:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001446:	2010      	movs	r0, #16
 8001448:	f000 ff1e 	bl	8002288 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800144c:	bd08      	pop	{r3, pc}

0800144e <_write>:

extern int fputc(int ch) __attribute__((weak));


int _write(int file, char *ptr, int len)
{
 800144e:	b570      	push	{r4, r5, r6, lr}
 8001450:	460c      	mov	r4, r1
 8001452:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001454:	2500      	movs	r5, #0
 8001456:	e004      	b.n	8001462 <_write+0x14>
	{
		fputc(*ptr++);
 8001458:	f814 0b01 	ldrb.w	r0, [r4], #1
 800145c:	f7ff fdd8 	bl	8001010 <fputc>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001460:	3501      	adds	r5, #1
 8001462:	42b5      	cmp	r5, r6
 8001464:	dbf8      	blt.n	8001458 <_write+0xa>
	}
	return len;
}
 8001466:	4630      	mov	r0, r6
 8001468:	bd70      	pop	{r4, r5, r6, pc}
	...

0800146c <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 800146c:	b500      	push	{lr}
 800146e:	b083      	sub	sp, #12
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8001470:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Transmit(&XNUCLEO53L1A1_hi2c, Dev, pdata, count, i2c_time_out);
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	b293      	uxth	r3, r2
 8001478:	460a      	mov	r2, r1
 800147a:	4601      	mov	r1, r0
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <_I2CWrite+0x1c>)
 800147e:	f001 f99f 	bl	80027c0 <HAL_I2C_Master_Transmit>
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
}
 8001482:	b003      	add	sp, #12
 8001484:	f85d fb04 	ldr.w	pc, [sp], #4
 8001488:	20000398 	.word	0x20000398

0800148c <_I2CRead>:

int _I2CRead(uint16_t Dev, uint8_t *pdata, uint32_t count) {
 800148c:	b500      	push	{lr}
 800148e:	b083      	sub	sp, #12
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8001490:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Receive(&XNUCLEO53L1A1_hi2c, Dev|1, pdata, count, i2c_time_out);
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	b293      	uxth	r3, r2
 8001498:	460a      	mov	r2, r1
 800149a:	f040 0101 	orr.w	r1, r0, #1
 800149e:	4803      	ldr	r0, [pc, #12]	; (80014ac <_I2CRead+0x20>)
 80014a0:	f001 fa54 	bl	800294c <HAL_I2C_Master_Receive>
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
}
 80014a4:	b003      	add	sp, #12
 80014a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80014aa:	bf00      	nop
 80014ac:	20000398 	.word	0x20000398

080014b0 <VL53L1_WrByte>:
done:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_WrByte(uint16_t Dev, uint16_t index, uint8_t data) {
 80014b0:	b508      	push	{r3, lr}
 80014b2:	460b      	mov	r3, r1
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80014b4:	4907      	ldr	r1, [pc, #28]	; (80014d4 <VL53L1_WrByte+0x24>)
 80014b6:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 80014ba:	f881 c000 	strb.w	ip, [r1]
    _I2CBuffer[1] = index&0xFF;
 80014be:	704b      	strb	r3, [r1, #1]
    _I2CBuffer[2] = data;
 80014c0:	708a      	strb	r2, [r1, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80014c2:	2203      	movs	r2, #3
 80014c4:	f7ff ffd2 	bl	800146c <_I2CWrite>
    if (status_int != 0) {
 80014c8:	b900      	cbnz	r0, 80014cc <VL53L1_WrByte+0x1c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
    VL53L1_PutI2cBus();
    return Status;
}
 80014ca:	bd08      	pop	{r3, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80014cc:	f06f 000c 	mvn.w	r0, #12
 80014d0:	e7fb      	b.n	80014ca <VL53L1_WrByte+0x1a>
 80014d2:	bf00      	nop
 80014d4:	20000298 	.word	0x20000298

080014d8 <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(uint16_t Dev, uint16_t index, uint16_t data) {
 80014d8:	b508      	push	{r3, lr}
 80014da:	460b      	mov	r3, r1
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80014dc:	4908      	ldr	r1, [pc, #32]	; (8001500 <VL53L1_WrWord+0x28>)
 80014de:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 80014e2:	f881 c000 	strb.w	ip, [r1]
    _I2CBuffer[1] = index&0xFF;
 80014e6:	704b      	strb	r3, [r1, #1]
    _I2CBuffer[2] = data >> 8;
 80014e8:	0a13      	lsrs	r3, r2, #8
 80014ea:	708b      	strb	r3, [r1, #2]
    _I2CBuffer[3] = data & 0x00FF;
 80014ec:	70ca      	strb	r2, [r1, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 80014ee:	2204      	movs	r2, #4
 80014f0:	f7ff ffbc 	bl	800146c <_I2CWrite>
    if (status_int != 0) {
 80014f4:	b900      	cbnz	r0, 80014f8 <VL53L1_WrWord+0x20>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
    VL53L1_PutI2cBus();
    return Status;
}
 80014f6:	bd08      	pop	{r3, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80014f8:	f06f 000c 	mvn.w	r0, #12
 80014fc:	e7fb      	b.n	80014f6 <VL53L1_WrWord+0x1e>
 80014fe:	bf00      	nop
 8001500:	20000298 	.word	0x20000298

08001504 <VL53L1_WrDWord>:

VL53L1_Error VL53L1_WrDWord(uint16_t Dev, uint16_t index, uint32_t data) {
 8001504:	b508      	push	{r3, lr}
 8001506:	460b      	mov	r3, r1
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;
    _I2CBuffer[0] = index>>8;
 8001508:	490a      	ldr	r1, [pc, #40]	; (8001534 <VL53L1_WrDWord+0x30>)
 800150a:	ea4f 2c13 	mov.w	ip, r3, lsr #8
 800150e:	f881 c000 	strb.w	ip, [r1]
    _I2CBuffer[1] = index&0xFF;
 8001512:	704b      	strb	r3, [r1, #1]
    _I2CBuffer[2] = (data >> 24) & 0xFF;
 8001514:	0e13      	lsrs	r3, r2, #24
 8001516:	708b      	strb	r3, [r1, #2]
    _I2CBuffer[3] = (data >> 16) & 0xFF;
 8001518:	0c13      	lsrs	r3, r2, #16
 800151a:	70cb      	strb	r3, [r1, #3]
    _I2CBuffer[4] = (data >> 8)  & 0xFF;
 800151c:	0a13      	lsrs	r3, r2, #8
 800151e:	710b      	strb	r3, [r1, #4]
    _I2CBuffer[5] = (data >> 0 ) & 0xFF;
 8001520:	714a      	strb	r2, [r1, #5]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 6);
 8001522:	2206      	movs	r2, #6
 8001524:	f7ff ffa2 	bl	800146c <_I2CWrite>
    if (status_int != 0) {
 8001528:	b900      	cbnz	r0, 800152c <VL53L1_WrDWord+0x28>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
    VL53L1_PutI2cBus();
    return Status;
}
 800152a:	bd08      	pop	{r3, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800152c:	f06f 000c 	mvn.w	r0, #12
 8001530:	e7fb      	b.n	800152a <VL53L1_WrDWord+0x26>
 8001532:	bf00      	nop
 8001534:	20000298 	.word	0x20000298

08001538 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(uint16_t Dev, uint16_t index, uint8_t *data) {
 8001538:	b538      	push	{r3, r4, r5, lr}
 800153a:	4604      	mov	r4, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4615      	mov	r5, r2
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8001540:	490a      	ldr	r1, [pc, #40]	; (800156c <VL53L1_RdByte+0x34>)
 8001542:	0a1a      	lsrs	r2, r3, #8
 8001544:	700a      	strb	r2, [r1, #0]
	_I2CBuffer[1] = index&0xFF;
 8001546:	704b      	strb	r3, [r1, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8001548:	2202      	movs	r2, #2
 800154a:	f7ff ff8f 	bl	800146c <_I2CWrite>
    if( status_int ){
 800154e:	b930      	cbnz	r0, 800155e <VL53L1_RdByte+0x26>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, data, 1);
 8001550:	2201      	movs	r2, #1
 8001552:	4629      	mov	r1, r5
 8001554:	4620      	mov	r0, r4
 8001556:	f7ff ff99 	bl	800148c <_I2CRead>
    if (status_int != 0) {
 800155a:	b918      	cbnz	r0, 8001564 <VL53L1_RdByte+0x2c>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
    }
done:
    VL53L1_PutI2cBus();
    return Status;
}
 800155c:	bd38      	pop	{r3, r4, r5, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800155e:	f06f 000c 	mvn.w	r0, #12
 8001562:	e7fb      	b.n	800155c <VL53L1_RdByte+0x24>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8001564:	f06f 000c 	mvn.w	r0, #12
 8001568:	e7f8      	b.n	800155c <VL53L1_RdByte+0x24>
 800156a:	bf00      	nop
 800156c:	20000298 	.word	0x20000298

08001570 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(uint16_t Dev, uint16_t index, uint16_t *data) {
 8001570:	b538      	push	{r3, r4, r5, lr}
 8001572:	4604      	mov	r4, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4615      	mov	r5, r2
    VL53L1_Error Status = VL53L1_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8001578:	490d      	ldr	r1, [pc, #52]	; (80015b0 <VL53L1_RdWord+0x40>)
 800157a:	0a1a      	lsrs	r2, r3, #8
 800157c:	700a      	strb	r2, [r1, #0]
	_I2CBuffer[1] = index&0xFF;
 800157e:	704b      	strb	r3, [r1, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8001580:	2202      	movs	r2, #2
 8001582:	f7ff ff73 	bl	800146c <_I2CWrite>

    if( status_int ){
 8001586:	b960      	cbnz	r0, 80015a2 <VL53L1_RdWord+0x32>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8001588:	2202      	movs	r2, #2
 800158a:	4909      	ldr	r1, [pc, #36]	; (80015b0 <VL53L1_RdWord+0x40>)
 800158c:	4620      	mov	r0, r4
 800158e:	f7ff ff7d 	bl	800148c <_I2CRead>
    if (status_int != 0) {
 8001592:	b948      	cbnz	r0, 80015a8 <VL53L1_RdWord+0x38>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
        goto done;
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8001594:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <VL53L1_RdWord+0x40>)
 8001596:	7811      	ldrb	r1, [r2, #0]
 8001598:	7853      	ldrb	r3, [r2, #1]
 800159a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800159e:	802b      	strh	r3, [r5, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
}
 80015a0:	bd38      	pop	{r3, r4, r5, pc}
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80015a2:	f06f 000c 	mvn.w	r0, #12
 80015a6:	e7fb      	b.n	80015a0 <VL53L1_RdWord+0x30>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80015a8:	f06f 000c 	mvn.w	r0, #12
 80015ac:	e7f8      	b.n	80015a0 <VL53L1_RdWord+0x30>
 80015ae:	bf00      	nop
 80015b0:	20000298 	.word	0x20000298

080015b4 <_I2cFailRecover>:
 *
 * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
 * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
 * this routine does use gpio to manipulate and recover i2c bus line in all cases.
 */
static void _I2cFailRecover(){
 80015b4:	b570      	push	{r4, r5, r6, lr}
 80015b6:	b088      	sub	sp, #32
    // We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
    // by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
    // all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state

    // Enable I/O
    __GPIOB_CLK_ENABLE();
 80015b8:	2600      	movs	r6, #0
 80015ba:	9601      	str	r6, [sp, #4]
 80015bc:	4b42      	ldr	r3, [pc, #264]	; (80016c8 <_I2cFailRecover+0x114>)
 80015be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c0:	f042 0202 	orr.w	r2, r2, #2
 80015c4:	631a      	str	r2, [r3, #48]	; 0x30
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80015d0:	4c3e      	ldr	r4, [pc, #248]	; (80016cc <_I2cFailRecover+0x118>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d8:	4620      	mov	r0, r4
 80015da:	f000 fe4e 	bl	800227a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80015de:	2201      	movs	r2, #1
 80015e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015e4:	4620      	mov	r0, r4
 80015e6:	f000 fe48 	bl	800227a <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9 ;
 80015ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015f0:	2311      	movs	r3, #17
 80015f2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f4:	2301      	movs	r3, #1
 80015f6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f8:	a903      	add	r1, sp, #12
 80015fa:	4620      	mov	r0, r4
 80015fc:	f000 fd62 	bl	80020c4 <HAL_GPIO_Init>
 8001600:	e01f      	b.n	8001642 <_I2cFailRecover+0x8e>
    //TODO we could do this faster by not using HAL delay 1ms for clk timing
    do{
        for( i=0; i<10; i++){
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001602:	4d32      	ldr	r5, [pc, #200]	; (80016cc <_I2cFailRecover+0x118>)
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 7180 	mov.w	r1, #256	; 0x100
 800160a:	4628      	mov	r0, r5
 800160c:	f000 fe35 	bl	800227a <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001610:	2001      	movs	r0, #1
 8001612:	f000 fcc3 	bl	8001f9c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8001616:	2201      	movs	r2, #1
 8001618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800161c:	4628      	mov	r0, r5
 800161e:	f000 fe2c 	bl	800227a <HAL_GPIO_WritePin>
            HAL_Delay(1);
 8001622:	2001      	movs	r0, #1
 8001624:	f000 fcba 	bl	8001f9c <HAL_Delay>
        for( i=0; i<10; i++){
 8001628:	3401      	adds	r4, #1
 800162a:	2c09      	cmp	r4, #9
 800162c:	dde9      	ble.n	8001602 <_I2cFailRecover+0x4e>
        }
//        if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
//            static int RetryRecover;
//            RetryRecover++;
//        }
    }while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 && nRetry++<7);
 800162e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001632:	4826      	ldr	r0, [pc, #152]	; (80016cc <_I2cFailRecover+0x118>)
 8001634:	f000 fe1a 	bl	800226c <HAL_GPIO_ReadPin>
 8001638:	b928      	cbnz	r0, 8001646 <_I2cFailRecover+0x92>
 800163a:	1c73      	adds	r3, r6, #1
 800163c:	2e06      	cmp	r6, #6
 800163e:	dc02      	bgt.n	8001646 <_I2cFailRecover+0x92>
 8001640:	461e      	mov	r6, r3
        for( i=0; i<10; i++){
 8001642:	2400      	movs	r4, #0
 8001644:	e7f1      	b.n	800162a <_I2cFailRecover+0x76>

    if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9) == 0 ){
 8001646:	f44f 7100 	mov.w	r1, #512	; 0x200
 800164a:	4820      	ldr	r0, [pc, #128]	; (80016cc <_I2cFailRecover+0x118>)
 800164c:	f000 fe0e 	bl	800226c <HAL_GPIO_ReadPin>
 8001650:	b108      	cbz	r0, 8001656 <_I2cFailRecover+0xa2>
            HAL_Delay(33);
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
            HAL_Delay(33*20);
        }while(1);
    }
}
 8001652:	b008      	add	sp, #32
 8001654:	bd70      	pop	{r4, r5, r6, pc}
        __GPIOA_CLK_ENABLE();
 8001656:	2100      	movs	r1, #0
 8001658:	9102      	str	r1, [sp, #8]
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <_I2cFailRecover+0x114>)
 800165c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800165e:	f042 0201 	orr.w	r2, r2, #1
 8001662:	631a      	str	r2, [r3, #48]	; 0x30
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	9b02      	ldr	r3, [sp, #8]
        GPIO_InitStruct.Pin = GPIO_PIN_5 ;
 800166e:	2320      	movs	r3, #32
 8001670:	9303      	str	r3, [sp, #12]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	9304      	str	r3, [sp, #16]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	9105      	str	r1, [sp, #20]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	a903      	add	r1, sp, #12
 800167a:	4815      	ldr	r0, [pc, #84]	; (80016d0 <_I2cFailRecover+0x11c>)
 800167c:	f000 fd22 	bl	80020c4 <HAL_GPIO_Init>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001680:	4c13      	ldr	r4, [pc, #76]	; (80016d0 <_I2cFailRecover+0x11c>)
 8001682:	2201      	movs	r2, #1
 8001684:	2120      	movs	r1, #32
 8001686:	4620      	mov	r0, r4
 8001688:	f000 fdf7 	bl	800227a <HAL_GPIO_WritePin>
            HAL_Delay(33);
 800168c:	2021      	movs	r0, #33	; 0x21
 800168e:	f000 fc85 	bl	8001f9c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	2120      	movs	r1, #32
 8001696:	4620      	mov	r0, r4
 8001698:	f000 fdef 	bl	800227a <HAL_GPIO_WritePin>
            HAL_Delay(33);
 800169c:	2021      	movs	r0, #33	; 0x21
 800169e:	f000 fc7d 	bl	8001f9c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80016a2:	2201      	movs	r2, #1
 80016a4:	2120      	movs	r1, #32
 80016a6:	4620      	mov	r0, r4
 80016a8:	f000 fde7 	bl	800227a <HAL_GPIO_WritePin>
            HAL_Delay(33);
 80016ac:	2021      	movs	r0, #33	; 0x21
 80016ae:	f000 fc75 	bl	8001f9c <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2120      	movs	r1, #32
 80016b6:	4620      	mov	r0, r4
 80016b8:	f000 fddf 	bl	800227a <HAL_GPIO_WritePin>
            HAL_Delay(33*20);
 80016bc:	f44f 7025 	mov.w	r0, #660	; 0x294
 80016c0:	f000 fc6c 	bl	8001f9c <HAL_Delay>
        }while(1);
 80016c4:	e7dc      	b.n	8001680 <_I2cFailRecover+0xcc>
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020400 	.word	0x40020400
 80016d0:	40020000 	.word	0x40020000

080016d4 <_ExpanderRd>:
 * @param index      register index
 * @param data       read data buffer
 * @param n_data     number of byte to read
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderRd(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 80016d4:	b570      	push	{r4, r5, r6, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	4616      	mov	r6, r2
 80016da:	461d      	mov	r5, r3

    int status;
    uint8_t RegAddr;
    RegAddr = index;
 80016dc:	f88d 100f 	strb.w	r1, [sp, #15]
    XNUCLEO53L1A1_GetI2cBus();
    do {
        status = HAL_I2C_Master_Transmit(&XNUCLEO53L1A1_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 80016e0:	b284      	uxth	r4, r0
 80016e2:	2164      	movs	r1, #100	; 0x64
 80016e4:	9100      	str	r1, [sp, #0]
 80016e6:	2301      	movs	r3, #1
 80016e8:	f10d 020f 	add.w	r2, sp, #15
 80016ec:	4621      	mov	r1, r4
 80016ee:	4808      	ldr	r0, [pc, #32]	; (8001710 <_ExpanderRd+0x3c>)
 80016f0:	f001 f866 	bl	80027c0 <HAL_I2C_Master_Transmit>
        if (status)
 80016f4:	b108      	cbz	r0, 80016fa <_ExpanderRd+0x26>
            break;
        status = HAL_I2C_Master_Receive(&XNUCLEO53L1A1_hi2c, I2cExpAddr, data, n_data, n_data * 100);
    } while (0);
    XNUCLEO53L1A1_PutI2cBus();
    return status;
}
 80016f6:	b004      	add	sp, #16
 80016f8:	bd70      	pop	{r4, r5, r6, pc}
        status = HAL_I2C_Master_Receive(&XNUCLEO53L1A1_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 80016fa:	2364      	movs	r3, #100	; 0x64
 80016fc:	fb05 f303 	mul.w	r3, r5, r3
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	b2ab      	uxth	r3, r5
 8001704:	4632      	mov	r2, r6
 8001706:	4621      	mov	r1, r4
 8001708:	4801      	ldr	r0, [pc, #4]	; (8001710 <_ExpanderRd+0x3c>)
 800170a:	f001 f91f 	bl	800294c <HAL_I2C_Master_Receive>
    return status;
 800170e:	e7f2      	b.n	80016f6 <_ExpanderRd+0x22>
 8001710:	20000398 	.word	0x20000398

08001714 <_ExpanderWR>:
 * @param index      register index
 * @param data       data buffer
 * @param n_data     number of byte to write
 * @return           of if ok else i2c I/O operation status
 */
static int _ExpanderWR(int I2cExpAddr, int index, uint8_t *data, int n_data) {
 8001714:	b530      	push	{r4, r5, lr}
 8001716:	b087      	sub	sp, #28
 8001718:	4605      	mov	r5, r0
 800171a:	4608      	mov	r0, r1
 800171c:	4611      	mov	r1, r2
 800171e:	461c      	mov	r4, r3

    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0] = index;
 8001720:	f88d 0008 	strb.w	r0, [sp, #8]
    memcpy(RegAddr + 1, data, n_data);
 8001724:	461a      	mov	r2, r3
 8001726:	f10d 0009 	add.w	r0, sp, #9
 800172a:	f002 f823 	bl	8003774 <memcpy>
    XNUCLEO53L1A1_GetI2cBus();
    status = HAL_I2C_Master_Transmit(&XNUCLEO53L1A1_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 800172e:	1c63      	adds	r3, r4, #1
 8001730:	2264      	movs	r2, #100	; 0x64
 8001732:	9200      	str	r2, [sp, #0]
 8001734:	b29b      	uxth	r3, r3
 8001736:	aa02      	add	r2, sp, #8
 8001738:	b2a9      	uxth	r1, r5
 800173a:	4802      	ldr	r0, [pc, #8]	; (8001744 <_ExpanderWR+0x30>)
 800173c:	f001 f840 	bl	80027c0 <HAL_I2C_Master_Transmit>
    XNUCLEO53L1A1_PutI2cBus();
    return status;
}
 8001740:	b007      	add	sp, #28
 8001742:	bd30      	pop	{r4, r5, pc}
 8001744:	20000398 	.word	0x20000398

08001748 <_ExpandersSetAllIO>:
static int _ExpandersSetAllIO(void){
 8001748:	b508      	push	{r3, lr}
    status = _ExpanderWR(I2cExpAddr0, GPSR, &CurIOVal.bytes[0], 2);
 800174a:	2302      	movs	r3, #2
 800174c:	4a06      	ldr	r2, [pc, #24]	; (8001768 <_ExpandersSetAllIO+0x20>)
 800174e:	2112      	movs	r1, #18
 8001750:	2086      	movs	r0, #134	; 0x86
 8001752:	f7ff ffdf 	bl	8001714 <_ExpanderWR>
    if( status ){
 8001756:	b100      	cbz	r0, 800175a <_ExpandersSetAllIO+0x12>
}
 8001758:	bd08      	pop	{r3, pc}
    status = _ExpanderWR(I2cExpAddr1, GPSR, &CurIOVal.bytes[2], 2);
 800175a:	2302      	movs	r3, #2
 800175c:	4a03      	ldr	r2, [pc, #12]	; (800176c <_ExpandersSetAllIO+0x24>)
 800175e:	2112      	movs	r1, #18
 8001760:	2084      	movs	r0, #132	; 0x84
 8001762:	f7ff ffd7 	bl	8001714 <_ExpanderWR>
    return status;
 8001766:	e7f7      	b.n	8001758 <_ExpandersSetAllIO+0x10>
 8001768:	200003ec 	.word	0x200003ec
 800176c:	200003ee 	.word	0x200003ee

08001770 <XNUCLEO53L1A1_I2C1Configure>:
int XNUCLEO53L1A1_I2C1Configure() {
 8001770:	b510      	push	{r4, lr}
 8001772:	b088      	sub	sp, #32
    _I2cFailRecover();
 8001774:	f7ff ff1e 	bl	80015b4 <_I2cFailRecover>
    __GPIOB_CLK_ENABLE();
 8001778:	2400      	movs	r4, #0
 800177a:	9401      	str	r4, [sp, #4]
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <XNUCLEO53L1A1_I2C1Configure+0x74>)
 800177e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001780:	f042 0202 	orr.w	r2, r2, #2
 8001784:	631a      	str	r2, [r3, #48]	; 0x30
 8001786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001788:	f002 0202 	and.w	r2, r2, #2
 800178c:	9201      	str	r2, [sp, #4]
 800178e:	9a01      	ldr	r2, [sp, #4]
    __I2C1_CLK_ENABLE();
 8001790:	9402      	str	r4, [sp, #8]
 8001792:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001794:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001798:	641a      	str	r2, [r3, #64]	; 0x40
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a0:	9302      	str	r3, [sp, #8]
 80017a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80017a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017aa:	2312      	movs	r3, #18
 80017ac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80017b0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017b2:	2304      	movs	r3, #4
 80017b4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b6:	a903      	add	r1, sp, #12
 80017b8:	480b      	ldr	r0, [pc, #44]	; (80017e8 <XNUCLEO53L1A1_I2C1Configure+0x78>)
 80017ba:	f000 fc83 	bl	80020c4 <HAL_GPIO_Init>
    XNUCLEO53L1A1_hi2c.Instance = I2C1;
 80017be:	480b      	ldr	r0, [pc, #44]	; (80017ec <XNUCLEO53L1A1_I2C1Configure+0x7c>)
 80017c0:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <XNUCLEO53L1A1_I2C1Configure+0x80>)
 80017c2:	6003      	str	r3, [r0, #0]
    XNUCLEO53L1A1_hi2c.Init.ClockSpeed = 400000;
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <XNUCLEO53L1A1_I2C1Configure+0x84>)
 80017c6:	6043      	str	r3, [r0, #4]
    XNUCLEO53L1A1_hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017c8:	6084      	str	r4, [r0, #8]
    XNUCLEO53L1A1_hi2c.Init.OwnAddress1 = 0;
 80017ca:	60c4      	str	r4, [r0, #12]
    XNUCLEO53L1A1_hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017d0:	6103      	str	r3, [r0, #16]
    XNUCLEO53L1A1_hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80017d2:	6144      	str	r4, [r0, #20]
    XNUCLEO53L1A1_hi2c.Init.OwnAddress2 = 0;
 80017d4:	6184      	str	r4, [r0, #24]
    XNUCLEO53L1A1_hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80017d6:	61c4      	str	r4, [r0, #28]
    XNUCLEO53L1A1_hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;
 80017d8:	6204      	str	r4, [r0, #32]
    status = HAL_I2C_Init(&XNUCLEO53L1A1_hi2c);
 80017da:	f000 ff63 	bl	80026a4 <HAL_I2C_Init>
}
 80017de:	b008      	add	sp, #32
 80017e0:	bd10      	pop	{r4, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020400 	.word	0x40020400
 80017ec:	20000398 	.word	0x20000398
 80017f0:	40005400 	.word	0x40005400
 80017f4:	00061a80 	.word	0x00061a80

080017f8 <XNUCLEO53L1A1_Init>:
int XNUCLEO53L1A1_Init(void) {
 80017f8:	b500      	push	{lr}
 80017fa:	b083      	sub	sp, #12
    XNUCLEO53L1A1_I2C1Configure();
 80017fc:	f7ff ffb8 	bl	8001770 <XNUCLEO53L1A1_I2C1Configure>
    status = _ExpanderRd( I2cExpAddr0, 0, ExpanderData, 2);
 8001800:	2302      	movs	r3, #2
 8001802:	aa01      	add	r2, sp, #4
 8001804:	2100      	movs	r1, #0
 8001806:	2086      	movs	r0, #134	; 0x86
 8001808:	f7ff ff64 	bl	80016d4 <_ExpanderRd>
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 800180c:	b930      	cbnz	r0, 800181c <XNUCLEO53L1A1_Init+0x24>
 800180e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001812:	b91b      	cbnz	r3, 800181c <XNUCLEO53L1A1_Init+0x24>
 8001814:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001818:	2b16      	cmp	r3, #22
 800181a:	d002      	beq.n	8001822 <XNUCLEO53L1A1_Init+0x2a>
}
 800181c:	b003      	add	sp, #12
 800181e:	f85d fb04 	ldr.w	pc, [sp], #4
    status = _ExpanderRd( I2cExpAddr1, 0, ExpanderData, 2);
 8001822:	2302      	movs	r3, #2
 8001824:	aa01      	add	r2, sp, #4
 8001826:	2100      	movs	r1, #0
 8001828:	2084      	movs	r0, #132	; 0x84
 800182a:	f7ff ff53 	bl	80016d4 <_ExpanderRd>
    if (status != 0 || ExpanderData[0] != 0x00 || ExpanderData[1] != 0x16) {
 800182e:	2800      	cmp	r0, #0
 8001830:	d1f4      	bne.n	800181c <XNUCLEO53L1A1_Init+0x24>
 8001832:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f0      	bne.n	800181c <XNUCLEO53L1A1_Init+0x24>
 800183a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800183e:	2b16      	cmp	r3, #22
 8001840:	d1ec      	bne.n	800181c <XNUCLEO53L1A1_Init+0x24>
    CurIOVal.u32=0x0;
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <XNUCLEO53L1A1_Init+0x94>)
 8001844:	2200      	movs	r2, #0
 8001846:	655a      	str	r2, [r3, #84]	; 0x54
    ExpanderData[0] = 0xFF;
 8001848:	23ff      	movs	r3, #255	; 0xff
 800184a:	f88d 3004 	strb.w	r3, [sp, #4]
    ExpanderData[1] = 0xFF;
 800184e:	f88d 3005 	strb.w	r3, [sp, #5]
    status = _ExpanderWR(I2cExpAddr0, GPDR, ExpanderData, 2);
 8001852:	2302      	movs	r3, #2
 8001854:	aa01      	add	r2, sp, #4
 8001856:	2114      	movs	r1, #20
 8001858:	2086      	movs	r0, #134	; 0x86
 800185a:	f7ff ff5b 	bl	8001714 <_ExpanderWR>
    if (status) {
 800185e:	2800      	cmp	r0, #0
 8001860:	d1dc      	bne.n	800181c <XNUCLEO53L1A1_Init+0x24>
    ExpanderData[0] = 0xFF;
 8001862:	23ff      	movs	r3, #255	; 0xff
 8001864:	f88d 3004 	strb.w	r3, [sp, #4]
    ExpanderData[1] = 0xBF; // all but bit 14-15 that is pb1 and xhurt
 8001868:	23bf      	movs	r3, #191	; 0xbf
 800186a:	f88d 3005 	strb.w	r3, [sp, #5]
    status = _ExpanderWR(I2cExpAddr1, GPDR, ExpanderData, 2);
 800186e:	2302      	movs	r3, #2
 8001870:	aa01      	add	r2, sp, #4
 8001872:	2114      	movs	r1, #20
 8001874:	2084      	movs	r0, #132	; 0x84
 8001876:	f7ff ff4d 	bl	8001714 <_ExpanderWR>
    if (status) {
 800187a:	2800      	cmp	r0, #0
 800187c:	d1ce      	bne.n	800181c <XNUCLEO53L1A1_Init+0x24>
    CurIOVal.u32=0x7F + (0x7F<<7) + (0x7F<<16)+(0x7F<<(16+7));
 800187e:	4b03      	ldr	r3, [pc, #12]	; (800188c <XNUCLEO53L1A1_Init+0x94>)
 8001880:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 8001884:	655a      	str	r2, [r3, #84]	; 0x54
    status= _ExpandersSetAllIO();
 8001886:	f7ff ff5f 	bl	8001748 <_ExpandersSetAllIO>
    return status;
 800188a:	e7c7      	b.n	800181c <XNUCLEO53L1A1_Init+0x24>
 800188c:	20000398 	.word	0x20000398

08001890 <XNUCLEO53L1A1_ResetId>:
int XNUCLEO53L1A1_ResetId(int DevNo, int state) {
 8001890:	b508      	push	{r3, lr}
    switch( DevNo ){
 8001892:	2863      	cmp	r0, #99	; 0x63
 8001894:	d022      	beq.n	80018dc <XNUCLEO53L1A1_ResetId+0x4c>
 8001896:	dc07      	bgt.n	80018a8 <XNUCLEO53L1A1_ResetId+0x18>
 8001898:	2801      	cmp	r0, #1
 800189a:	d01f      	beq.n	80018dc <XNUCLEO53L1A1_ResetId+0x4c>
 800189c:	2802      	cmp	r0, #2
 800189e:	d007      	beq.n	80018b0 <XNUCLEO53L1A1_ResetId+0x20>
 80018a0:	b378      	cbz	r0, 8001902 <XNUCLEO53L1A1_ResetId+0x72>
 80018a2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80018a6:	bd08      	pop	{r3, pc}
    switch( DevNo ){
 80018a8:	286c      	cmp	r0, #108	; 0x6c
 80018aa:	d02a      	beq.n	8001902 <XNUCLEO53L1A1_ResetId+0x72>
 80018ac:	2872      	cmp	r0, #114	; 0x72
 80018ae:	d112      	bne.n	80018d6 <XNUCLEO53L1A1_ResetId+0x46>
        CurIOVal.bytes[1]&=~0x80; /* bit 15 expender 0  => byte #1 */
 80018b0:	4a1d      	ldr	r2, [pc, #116]	; (8001928 <XNUCLEO53L1A1_ResetId+0x98>)
 80018b2:	f892 3055 	ldrb.w	r3, [r2, #85]	; 0x55
 80018b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018ba:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
        if( state )
 80018be:	b119      	cbz	r1, 80018c8 <XNUCLEO53L1A1_ResetId+0x38>
            CurIOVal.bytes[1]|=0x80; /* bit 15 expender 0 => byte #1*/
 80018c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018c4:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 80018c8:	2301      	movs	r3, #1
 80018ca:	4a18      	ldr	r2, [pc, #96]	; (800192c <XNUCLEO53L1A1_ResetId+0x9c>)
 80018cc:	2113      	movs	r1, #19
 80018ce:	2086      	movs	r0, #134	; 0x86
 80018d0:	f7ff ff20 	bl	8001714 <_ExpanderWR>
    return status;
 80018d4:	e7e7      	b.n	80018a6 <XNUCLEO53L1A1_ResetId+0x16>
    switch( DevNo ){
 80018d6:	f04f 30ff 	mov.w	r0, #4294967295
 80018da:	e7e4      	b.n	80018a6 <XNUCLEO53L1A1_ResetId+0x16>
        CurIOVal.bytes[3]&=~0x80; /* bit 15 expender 1  => byte #3 */
 80018dc:	4a12      	ldr	r2, [pc, #72]	; (8001928 <XNUCLEO53L1A1_ResetId+0x98>)
 80018de:	f892 3057 	ldrb.w	r3, [r2, #87]	; 0x57
 80018e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018e6:	f882 3057 	strb.w	r3, [r2, #87]	; 0x57
        if( state )
 80018ea:	b119      	cbz	r1, 80018f4 <XNUCLEO53L1A1_ResetId+0x64>
            CurIOVal.bytes[3]|=0x80; /* bit 15 expender 1  => byte #3 */
 80018ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018f0:	f882 3057 	strb.w	r3, [r2, #87]	; 0x57
        status= _ExpanderWR(I2cExpAddr1, GPSR+1, &CurIOVal.bytes[3], 1);
 80018f4:	2301      	movs	r3, #1
 80018f6:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <XNUCLEO53L1A1_ResetId+0xa0>)
 80018f8:	2113      	movs	r1, #19
 80018fa:	2084      	movs	r0, #132	; 0x84
 80018fc:	f7ff ff0a 	bl	8001714 <_ExpanderWR>
        break;
 8001900:	e7d1      	b.n	80018a6 <XNUCLEO53L1A1_ResetId+0x16>
        CurIOVal.bytes[1]&=~0x40; /* bit 14 expender 0 => byte #1*/
 8001902:	4a09      	ldr	r2, [pc, #36]	; (8001928 <XNUCLEO53L1A1_ResetId+0x98>)
 8001904:	f892 3055 	ldrb.w	r3, [r2, #85]	; 0x55
 8001908:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
 800190c:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
        if( state )
 8001910:	b119      	cbz	r1, 800191a <XNUCLEO53L1A1_ResetId+0x8a>
            CurIOVal.bytes[1]|=0x40; /* bit 14 expender 0 => byte #1*/
 8001912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001916:	f882 3055 	strb.w	r3, [r2, #85]	; 0x55
        status= _ExpanderWR(I2cExpAddr0, GPSR+1, &CurIOVal.bytes[1], 1);
 800191a:	2301      	movs	r3, #1
 800191c:	4a03      	ldr	r2, [pc, #12]	; (800192c <XNUCLEO53L1A1_ResetId+0x9c>)
 800191e:	2113      	movs	r1, #19
 8001920:	2086      	movs	r0, #134	; 0x86
 8001922:	f7ff fef7 	bl	8001714 <_ExpanderWR>
        break;
 8001926:	e7be      	b.n	80018a6 <XNUCLEO53L1A1_ResetId+0x16>
 8001928:	20000398 	.word	0x20000398
 800192c:	200003ed 	.word	0x200003ed
 8001930:	200003ef 	.word	0x200003ef

08001934 <VL53L1X_ClearInterrupt>:
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
	return status;
}

VL53L1X_ERROR VL53L1X_ClearInterrupt(uint16_t dev)
{
 8001934:	b508      	push	{r3, lr}
	VL53L1X_ERROR status = 0;

	status |= VL53L1_WrByte(dev, SYSTEM__INTERRUPT_CLEAR, 0x01);
 8001936:	2201      	movs	r2, #1
 8001938:	2186      	movs	r1, #134	; 0x86
 800193a:	f7ff fdb9 	bl	80014b0 <VL53L1_WrByte>
	return status;
}
 800193e:	bd08      	pop	{r3, pc}

08001940 <VL53L1X_GetInterruptPolarity>:
	status |= VL53L1_WrByte(dev, GPIO_HV_MUX__CTRL, Temp | (!(NewPolarity & 1)) << 4);
	return status;
}

VL53L1X_ERROR VL53L1X_GetInterruptPolarity(uint16_t dev, uint8_t *pInterruptPolarity)
{
 8001940:	b510      	push	{r4, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	460c      	mov	r4, r1
	uint8_t Temp;
	VL53L1X_ERROR status = 0;

	status |= VL53L1_RdByte(dev, GPIO_HV_MUX__CTRL, &Temp);
 8001946:	f10d 0207 	add.w	r2, sp, #7
 800194a:	2130      	movs	r1, #48	; 0x30
 800194c:	f7ff fdf4 	bl	8001538 <VL53L1_RdByte>
	Temp = Temp & 0x10;
 8001950:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001954:	f003 0310 	and.w	r3, r3, #16
 8001958:	f88d 3007 	strb.w	r3, [sp, #7]
	*pInterruptPolarity = !(Temp>>4);
 800195c:	fab3 f383 	clz	r3, r3
 8001960:	095b      	lsrs	r3, r3, #5
 8001962:	7023      	strb	r3, [r4, #0]
	return status;
}
 8001964:	b002      	add	sp, #8
 8001966:	bd10      	pop	{r4, pc}

08001968 <VL53L1X_StartRanging>:

VL53L1X_ERROR VL53L1X_StartRanging(uint16_t dev)
{
 8001968:	b508      	push	{r3, lr}
	VL53L1X_ERROR status = 0;

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x40);	/* Enable VL53L1X */
 800196a:	2240      	movs	r2, #64	; 0x40
 800196c:	2187      	movs	r1, #135	; 0x87
 800196e:	f7ff fd9f 	bl	80014b0 <VL53L1_WrByte>
	return status;
}
 8001972:	bd08      	pop	{r3, pc}

08001974 <VL53L1X_StopRanging>:

VL53L1X_ERROR VL53L1X_StopRanging(uint16_t dev)
{
 8001974:	b508      	push	{r3, lr}
	VL53L1X_ERROR status = 0;

	status |= VL53L1_WrByte(dev, SYSTEM__MODE_START, 0x00);	/* Disable VL53L1X */
 8001976:	2200      	movs	r2, #0
 8001978:	2187      	movs	r1, #135	; 0x87
 800197a:	f7ff fd99 	bl	80014b0 <VL53L1_WrByte>
	return status;
}
 800197e:	bd08      	pop	{r3, pc}

08001980 <VL53L1X_CheckForDataReady>:

VL53L1X_ERROR VL53L1X_CheckForDataReady(uint16_t dev, uint8_t *isDataReady)
{
 8001980:	b570      	push	{r4, r5, r6, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	4605      	mov	r5, r0
 8001986:	460e      	mov	r6, r1
	uint8_t Temp;
	uint8_t IntPol;
	VL53L1X_ERROR status = 0;

	status |= VL53L1X_GetInterruptPolarity(dev, &IntPol);
 8001988:	f10d 0106 	add.w	r1, sp, #6
 800198c:	f7ff ffd8 	bl	8001940 <VL53L1X_GetInterruptPolarity>
 8001990:	4604      	mov	r4, r0
	status |= VL53L1_RdByte(dev, GPIO__TIO_HV_STATUS, &Temp);
 8001992:	f10d 0207 	add.w	r2, sp, #7
 8001996:	2131      	movs	r1, #49	; 0x31
 8001998:	4628      	mov	r0, r5
 800199a:	f7ff fdcd 	bl	8001538 <VL53L1_RdByte>
 800199e:	4320      	orrs	r0, r4
 80019a0:	b240      	sxtb	r0, r0
	/* Read in the register to check if a new value is available */
	if (status == 0){
 80019a2:	b948      	cbnz	r0, 80019b8 <VL53L1X_CheckForDataReady+0x38>
		if ((Temp & 1) == IntPol)
 80019a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80019a8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d003      	beq.n	80019bc <VL53L1X_CheckForDataReady+0x3c>
			*isDataReady = 1;
		else
			*isDataReady = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	7033      	strb	r3, [r6, #0]
	}
	return status;
}
 80019b8:	b002      	add	sp, #8
 80019ba:	bd70      	pop	{r4, r5, r6, pc}
			*isDataReady = 1;
 80019bc:	2301      	movs	r3, #1
 80019be:	7033      	strb	r3, [r6, #0]
 80019c0:	e7fa      	b.n	80019b8 <VL53L1X_CheckForDataReady+0x38>
	...

080019c4 <VL53L1X_SensorInit>:
{
 80019c4:	b570      	push	{r4, r5, r6, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	4606      	mov	r6, r0
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80019ca:	242d      	movs	r4, #45	; 0x2d
	VL53L1X_ERROR status = 0;
 80019cc:	2500      	movs	r5, #0
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80019ce:	e00b      	b.n	80019e8 <VL53L1X_SensorInit+0x24>
		status |= VL53L1_WrByte(dev, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
 80019d0:	f1a4 032d 	sub.w	r3, r4, #45	; 0x2d
 80019d4:	4a1d      	ldr	r2, [pc, #116]	; (8001a4c <VL53L1X_SensorInit+0x88>)
 80019d6:	5cd2      	ldrb	r2, [r2, r3]
 80019d8:	4621      	mov	r1, r4
 80019da:	4630      	mov	r0, r6
 80019dc:	f7ff fd68 	bl	80014b0 <VL53L1_WrByte>
 80019e0:	4305      	orrs	r5, r0
 80019e2:	b26d      	sxtb	r5, r5
	for (Addr = 0x2D; Addr <= 0x87; Addr++){
 80019e4:	3401      	adds	r4, #1
 80019e6:	b2e4      	uxtb	r4, r4
 80019e8:	2c87      	cmp	r4, #135	; 0x87
 80019ea:	d9f1      	bls.n	80019d0 <VL53L1X_SensorInit+0xc>
	status |= VL53L1X_StartRanging(dev);
 80019ec:	4630      	mov	r0, r6
 80019ee:	f7ff ffbb 	bl	8001968 <VL53L1X_StartRanging>
 80019f2:	ea45 0400 	orr.w	r4, r5, r0
 80019f6:	b264      	sxtb	r4, r4
	tmp  = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f88d 3007 	strb.w	r3, [sp, #7]
	while(tmp==0){
 80019fe:	e006      	b.n	8001a0e <VL53L1X_SensorInit+0x4a>
			status |= VL53L1X_CheckForDataReady(dev, &tmp);
 8001a00:	f10d 0107 	add.w	r1, sp, #7
 8001a04:	4630      	mov	r0, r6
 8001a06:	f7ff ffbb 	bl	8001980 <VL53L1X_CheckForDataReady>
 8001a0a:	4304      	orrs	r4, r0
 8001a0c:	b264      	sxtb	r4, r4
	while(tmp==0){
 8001a0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f4      	beq.n	8001a00 <VL53L1X_SensorInit+0x3c>
	status |= VL53L1X_ClearInterrupt(dev);
 8001a16:	4630      	mov	r0, r6
 8001a18:	f7ff ff8c 	bl	8001934 <VL53L1X_ClearInterrupt>
 8001a1c:	4304      	orrs	r4, r0
 8001a1e:	b264      	sxtb	r4, r4
	status |= VL53L1X_StopRanging(dev);
 8001a20:	4630      	mov	r0, r6
 8001a22:	f7ff ffa7 	bl	8001974 <VL53L1X_StopRanging>
 8001a26:	4304      	orrs	r4, r0
 8001a28:	b264      	sxtb	r4, r4
	status |= VL53L1_WrByte(dev, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
 8001a2a:	2209      	movs	r2, #9
 8001a2c:	2108      	movs	r1, #8
 8001a2e:	4630      	mov	r0, r6
 8001a30:	f7ff fd3e 	bl	80014b0 <VL53L1_WrByte>
 8001a34:	4304      	orrs	r4, r0
 8001a36:	b264      	sxtb	r4, r4
	status |= VL53L1_WrByte(dev, 0x0B, 0); /* start VHV from the previous temperature */
 8001a38:	2200      	movs	r2, #0
 8001a3a:	210b      	movs	r1, #11
 8001a3c:	4630      	mov	r0, r6
 8001a3e:	f7ff fd37 	bl	80014b0 <VL53L1_WrByte>
 8001a42:	4320      	orrs	r0, r4
}
 8001a44:	b240      	sxtb	r0, r0
 8001a46:	b002      	add	sp, #8
 8001a48:	bd70      	pop	{r4, r5, r6, pc}
 8001a4a:	bf00      	nop
 8001a4c:	08006370 	.word	0x08006370

08001a50 <VL53L1X_GetTimingBudgetInMs>:
	}
	return status;
}

VL53L1X_ERROR VL53L1X_GetTimingBudgetInMs(uint16_t dev, uint16_t *pTimingBudget)
{
 8001a50:	b510      	push	{r4, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	460c      	mov	r4, r1
	uint16_t Temp;
	VL53L1X_ERROR status = 0;

	status |= VL53L1_RdWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI, &Temp);
 8001a56:	f10d 0206 	add.w	r2, sp, #6
 8001a5a:	215e      	movs	r1, #94	; 0x5e
 8001a5c:	f7ff fd88 	bl	8001570 <VL53L1_RdWord>
	switch (Temp) {
 8001a60:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001a64:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 8001a68:	d03b      	beq.n	8001ae2 <VL53L1X_GetTimingBudgetInMs+0x92>
 8001a6a:	d81a      	bhi.n	8001aa2 <VL53L1X_GetTimingBudgetInMs+0x52>
 8001a6c:	2b51      	cmp	r3, #81	; 0x51
 8001a6e:	d00f      	beq.n	8001a90 <VL53L1X_GetTimingBudgetInMs+0x40>
 8001a70:	d906      	bls.n	8001a80 <VL53L1X_GetTimingBudgetInMs+0x30>
 8001a72:	2bad      	cmp	r3, #173	; 0xad
 8001a74:	d035      	beq.n	8001ae2 <VL53L1X_GetTimingBudgetInMs+0x92>
 8001a76:	2bd6      	cmp	r3, #214	; 0xd6
 8001a78:	d10d      	bne.n	8001a96 <VL53L1X_GetTimingBudgetInMs+0x46>
		case 0x001E :
			*pTimingBudget = 20;
			break;
		case 0x00D6 :
		case 0x0060 :
			*pTimingBudget = 33;
 8001a7a:	2321      	movs	r3, #33	; 0x21
 8001a7c:	8023      	strh	r3, [r4, #0]
			break;
 8001a7e:	e003      	b.n	8001a88 <VL53L1X_GetTimingBudgetInMs+0x38>
	switch (Temp) {
 8001a80:	2b1d      	cmp	r3, #29
 8001a82:	d103      	bne.n	8001a8c <VL53L1X_GetTimingBudgetInMs+0x3c>
			*pTimingBudget = 15;
 8001a84:	230f      	movs	r3, #15
 8001a86:	8023      	strh	r3, [r4, #0]
		default:
			status = 1;
			*pTimingBudget = 0;
	}
	return status;
}
 8001a88:	b002      	add	sp, #8
 8001a8a:	bd10      	pop	{r4, pc}
	switch (Temp) {
 8001a8c:	2b1e      	cmp	r3, #30
 8001a8e:	d104      	bne.n	8001a9a <VL53L1X_GetTimingBudgetInMs+0x4a>
			*pTimingBudget = 20;
 8001a90:	2314      	movs	r3, #20
 8001a92:	8023      	strh	r3, [r4, #0]
			break;
 8001a94:	e7f8      	b.n	8001a88 <VL53L1X_GetTimingBudgetInMs+0x38>
	switch (Temp) {
 8001a96:	2b60      	cmp	r3, #96	; 0x60
 8001a98:	d0ef      	beq.n	8001a7a <VL53L1X_GetTimingBudgetInMs+0x2a>
			*pTimingBudget = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	8023      	strh	r3, [r4, #0]
			status = 1;
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	e7f2      	b.n	8001a88 <VL53L1X_GetTimingBudgetInMs+0x38>
	switch (Temp) {
 8001aa2:	f240 32e1 	movw	r2, #993	; 0x3e1
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d01e      	beq.n	8001ae8 <VL53L1X_GetTimingBudgetInMs+0x98>
 8001aaa:	d90b      	bls.n	8001ac4 <VL53L1X_GetTimingBudgetInMs+0x74>
 8001aac:	f240 428f 	movw	r2, #1167	; 0x48f
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d003      	beq.n	8001abc <VL53L1X_GetTimingBudgetInMs+0x6c>
 8001ab4:	f240 5291 	movw	r2, #1425	; 0x591
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d1ee      	bne.n	8001a9a <VL53L1X_GetTimingBudgetInMs+0x4a>
			*pTimingBudget = 500;
 8001abc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ac0:	8023      	strh	r3, [r4, #0]
			break;
 8001ac2:	e7e1      	b.n	8001a88 <VL53L1X_GetTimingBudgetInMs+0x38>
	switch (Temp) {
 8001ac4:	f240 22d9 	movw	r2, #729	; 0x2d9
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d00d      	beq.n	8001ae8 <VL53L1X_GetTimingBudgetInMs+0x98>
 8001acc:	f240 22e1 	movw	r2, #737	; 0x2e1
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d102      	bne.n	8001ada <VL53L1X_GetTimingBudgetInMs+0x8a>
			*pTimingBudget = 100;
 8001ad4:	2364      	movs	r3, #100	; 0x64
 8001ad6:	8023      	strh	r3, [r4, #0]
			break;
 8001ad8:	e7d6      	b.n	8001a88 <VL53L1X_GetTimingBudgetInMs+0x38>
	switch (Temp) {
 8001ada:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8001ade:	d0f9      	beq.n	8001ad4 <VL53L1X_GetTimingBudgetInMs+0x84>
 8001ae0:	e7db      	b.n	8001a9a <VL53L1X_GetTimingBudgetInMs+0x4a>
			*pTimingBudget = 50;
 8001ae2:	2332      	movs	r3, #50	; 0x32
 8001ae4:	8023      	strh	r3, [r4, #0]
			break;
 8001ae6:	e7cf      	b.n	8001a88 <VL53L1X_GetTimingBudgetInMs+0x38>
			*pTimingBudget = 200;
 8001ae8:	23c8      	movs	r3, #200	; 0xc8
 8001aea:	8023      	strh	r3, [r4, #0]
			break;
 8001aec:	e7cc      	b.n	8001a88 <VL53L1X_GetTimingBudgetInMs+0x38>

08001aee <VL53L1X_GetDistanceMode>:
		status |= VL53L1X_SetTimingBudgetInMs(dev, TB);
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistanceMode(uint16_t dev, uint16_t *DM)
{
 8001aee:	b510      	push	{r4, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	460c      	mov	r4, r1
	uint8_t TempDM, status=0;

	status |= VL53L1_RdByte(dev,PHASECAL_CONFIG__TIMEOUT_MACROP, &TempDM);
 8001af4:	f10d 0207 	add.w	r2, sp, #7
 8001af8:	214b      	movs	r1, #75	; 0x4b
 8001afa:	f7ff fd1d 	bl	8001538 <VL53L1_RdByte>
	if (TempDM == 0x14)
 8001afe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001b02:	2b14      	cmp	r3, #20
 8001b04:	d005      	beq.n	8001b12 <VL53L1X_GetDistanceMode+0x24>
		*DM=1;
	if(TempDM == 0x0A)
 8001b06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001b0a:	2b0a      	cmp	r3, #10
 8001b0c:	d004      	beq.n	8001b18 <VL53L1X_GetDistanceMode+0x2a>
		*DM=2;
	return status;
}
 8001b0e:	b002      	add	sp, #8
 8001b10:	bd10      	pop	{r4, pc}
		*DM=1;
 8001b12:	2301      	movs	r3, #1
 8001b14:	8023      	strh	r3, [r4, #0]
 8001b16:	e7f6      	b.n	8001b06 <VL53L1X_GetDistanceMode+0x18>
		*DM=2;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	8023      	strh	r3, [r4, #0]
 8001b1c:	e7f7      	b.n	8001b0e <VL53L1X_GetDistanceMode+0x20>

08001b1e <VL53L1X_SetTimingBudgetInMs>:
{
 8001b1e:	b570      	push	{r4, r5, r6, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	4606      	mov	r6, r0
 8001b24:	460c      	mov	r4, r1
	status |= VL53L1X_GetDistanceMode(dev, &DM);
 8001b26:	f10d 0106 	add.w	r1, sp, #6
 8001b2a:	f7ff ffe0 	bl	8001aee <VL53L1X_GetDistanceMode>
	if (DM == 0)
 8001b2e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 80c9 	beq.w	8001cca <VL53L1X_SetTimingBudgetInMs+0x1ac>
 8001b38:	4605      	mov	r5, r0
	else if (DM == 1) {	/* Short DistanceMode */
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d014      	beq.n	8001b68 <VL53L1X_SetTimingBudgetInMs+0x4a>
		switch (TimingBudgetInMs) {
 8001b3e:	2c64      	cmp	r4, #100	; 0x64
 8001b40:	f000 80a9 	beq.w	8001c96 <VL53L1X_SetTimingBudgetInMs+0x178>
 8001b44:	f200 8088 	bhi.w	8001c58 <VL53L1X_SetTimingBudgetInMs+0x13a>
 8001b48:	2c21      	cmp	r4, #33	; 0x21
 8001b4a:	f000 8099 	beq.w	8001c80 <VL53L1X_SetTimingBudgetInMs+0x162>
 8001b4e:	2c32      	cmp	r4, #50	; 0x32
 8001b50:	d173      	bne.n	8001c3a <VL53L1X_SetTimingBudgetInMs+0x11c>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001b52:	22ad      	movs	r2, #173	; 0xad
 8001b54:	215e      	movs	r1, #94	; 0x5e
 8001b56:	4630      	mov	r0, r6
 8001b58:	f7ff fcbe 	bl	80014d8 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001b5c:	22c6      	movs	r2, #198	; 0xc6
 8001b5e:	2161      	movs	r1, #97	; 0x61
 8001b60:	4630      	mov	r0, r6
 8001b62:	f7ff fcb9 	bl	80014d8 <VL53L1_WrWord>
			break;
 8001b66:	e0b1      	b.n	8001ccc <VL53L1X_SetTimingBudgetInMs+0x1ae>
		switch (TimingBudgetInMs) {
 8001b68:	2c32      	cmp	r4, #50	; 0x32
 8001b6a:	d04c      	beq.n	8001c06 <VL53L1X_SetTimingBudgetInMs+0xe8>
 8001b6c:	d81d      	bhi.n	8001baa <VL53L1X_SetTimingBudgetInMs+0x8c>
 8001b6e:	2c14      	cmp	r4, #20
 8001b70:	d03e      	beq.n	8001bf0 <VL53L1X_SetTimingBudgetInMs+0xd2>
 8001b72:	2c21      	cmp	r4, #33	; 0x21
 8001b74:	d10a      	bne.n	8001b8c <VL53L1X_SetTimingBudgetInMs+0x6e>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001b76:	22d6      	movs	r2, #214	; 0xd6
 8001b78:	215e      	movs	r1, #94	; 0x5e
 8001b7a:	4630      	mov	r0, r6
 8001b7c:	f7ff fcac 	bl	80014d8 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001b80:	226e      	movs	r2, #110	; 0x6e
 8001b82:	2161      	movs	r1, #97	; 0x61
 8001b84:	4630      	mov	r0, r6
 8001b86:	f7ff fca7 	bl	80014d8 <VL53L1_WrWord>
			break;
 8001b8a:	e09f      	b.n	8001ccc <VL53L1X_SetTimingBudgetInMs+0x1ae>
		switch (TimingBudgetInMs) {
 8001b8c:	2c0f      	cmp	r4, #15
 8001b8e:	d10a      	bne.n	8001ba6 <VL53L1X_SetTimingBudgetInMs+0x88>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001b90:	221d      	movs	r2, #29
 8001b92:	215e      	movs	r1, #94	; 0x5e
 8001b94:	4630      	mov	r0, r6
 8001b96:	f7ff fc9f 	bl	80014d8 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001b9a:	2227      	movs	r2, #39	; 0x27
 8001b9c:	2161      	movs	r1, #97	; 0x61
 8001b9e:	4630      	mov	r0, r6
 8001ba0:	f7ff fc9a 	bl	80014d8 <VL53L1_WrWord>
			break;
 8001ba4:	e092      	b.n	8001ccc <VL53L1X_SetTimingBudgetInMs+0x1ae>
		switch (TimingBudgetInMs) {
 8001ba6:	2501      	movs	r5, #1
 8001ba8:	e090      	b.n	8001ccc <VL53L1X_SetTimingBudgetInMs+0x1ae>
 8001baa:	2cc8      	cmp	r4, #200	; 0xc8
 8001bac:	d038      	beq.n	8001c20 <VL53L1X_SetTimingBudgetInMs+0x102>
 8001bae:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 8001bb2:	d10c      	bne.n	8001bce <VL53L1X_SetTimingBudgetInMs+0xb0>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001bb4:	f240 5291 	movw	r2, #1425	; 0x591
 8001bb8:	215e      	movs	r1, #94	; 0x5e
 8001bba:	4630      	mov	r0, r6
 8001bbc:	f7ff fc8c 	bl	80014d8 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001bc0:	f240 52c1 	movw	r2, #1473	; 0x5c1
 8001bc4:	2161      	movs	r1, #97	; 0x61
 8001bc6:	4630      	mov	r0, r6
 8001bc8:	f7ff fc86 	bl	80014d8 <VL53L1_WrWord>
			break;
 8001bcc:	e07e      	b.n	8001ccc <VL53L1X_SetTimingBudgetInMs+0x1ae>
		switch (TimingBudgetInMs) {
 8001bce:	2c64      	cmp	r4, #100	; 0x64
 8001bd0:	d10c      	bne.n	8001bec <VL53L1X_SetTimingBudgetInMs+0xce>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001bd2:	f240 22e1 	movw	r2, #737	; 0x2e1
 8001bd6:	215e      	movs	r1, #94	; 0x5e
 8001bd8:	4630      	mov	r0, r6
 8001bda:	f7ff fc7d 	bl	80014d8 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001bde:	f44f 7262 	mov.w	r2, #904	; 0x388
 8001be2:	2161      	movs	r1, #97	; 0x61
 8001be4:	4630      	mov	r0, r6
 8001be6:	f7ff fc77 	bl	80014d8 <VL53L1_WrWord>
			break;
 8001bea:	e06f      	b.n	8001ccc <VL53L1X_SetTimingBudgetInMs+0x1ae>
		switch (TimingBudgetInMs) {
 8001bec:	2501      	movs	r5, #1
 8001bee:	e06d      	b.n	8001ccc <VL53L1X_SetTimingBudgetInMs+0x1ae>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001bf0:	2251      	movs	r2, #81	; 0x51
 8001bf2:	215e      	movs	r1, #94	; 0x5e
 8001bf4:	4630      	mov	r0, r6
 8001bf6:	f7ff fc6f 	bl	80014d8 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001bfa:	226e      	movs	r2, #110	; 0x6e
 8001bfc:	2161      	movs	r1, #97	; 0x61
 8001bfe:	4630      	mov	r0, r6
 8001c00:	f7ff fc6a 	bl	80014d8 <VL53L1_WrWord>
			break;
 8001c04:	e062      	b.n	8001ccc <VL53L1X_SetTimingBudgetInMs+0x1ae>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001c06:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8001c0a:	215e      	movs	r1, #94	; 0x5e
 8001c0c:	4630      	mov	r0, r6
 8001c0e:	f7ff fc63 	bl	80014d8 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001c12:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001c16:	2161      	movs	r1, #97	; 0x61
 8001c18:	4630      	mov	r0, r6
 8001c1a:	f7ff fc5d 	bl	80014d8 <VL53L1_WrWord>
			break;
 8001c1e:	e055      	b.n	8001ccc <VL53L1X_SetTimingBudgetInMs+0x1ae>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001c20:	f240 32e1 	movw	r2, #993	; 0x3e1
 8001c24:	215e      	movs	r1, #94	; 0x5e
 8001c26:	4630      	mov	r0, r6
 8001c28:	f7ff fc56 	bl	80014d8 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001c2c:	f240 4296 	movw	r2, #1174	; 0x496
 8001c30:	2161      	movs	r1, #97	; 0x61
 8001c32:	4630      	mov	r0, r6
 8001c34:	f7ff fc50 	bl	80014d8 <VL53L1_WrWord>
			break;
 8001c38:	e048      	b.n	8001ccc <VL53L1X_SetTimingBudgetInMs+0x1ae>
		switch (TimingBudgetInMs) {
 8001c3a:	2c14      	cmp	r4, #20
 8001c3c:	d10a      	bne.n	8001c54 <VL53L1X_SetTimingBudgetInMs+0x136>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001c3e:	221e      	movs	r2, #30
 8001c40:	215e      	movs	r1, #94	; 0x5e
 8001c42:	4630      	mov	r0, r6
 8001c44:	f7ff fc48 	bl	80014d8 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001c48:	2222      	movs	r2, #34	; 0x22
 8001c4a:	2161      	movs	r1, #97	; 0x61
 8001c4c:	4630      	mov	r0, r6
 8001c4e:	f7ff fc43 	bl	80014d8 <VL53L1_WrWord>
			break;
 8001c52:	e03b      	b.n	8001ccc <VL53L1X_SetTimingBudgetInMs+0x1ae>
		switch (TimingBudgetInMs) {
 8001c54:	2501      	movs	r5, #1
 8001c56:	e039      	b.n	8001ccc <VL53L1X_SetTimingBudgetInMs+0x1ae>
 8001c58:	2cc8      	cmp	r4, #200	; 0xc8
 8001c5a:	d029      	beq.n	8001cb0 <VL53L1X_SetTimingBudgetInMs+0x192>
 8001c5c:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 8001c60:	d10c      	bne.n	8001c7c <VL53L1X_SetTimingBudgetInMs+0x15e>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001c62:	f240 428f 	movw	r2, #1167	; 0x48f
 8001c66:	215e      	movs	r1, #94	; 0x5e
 8001c68:	4630      	mov	r0, r6
 8001c6a:	f7ff fc35 	bl	80014d8 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001c6e:	f240 42a4 	movw	r2, #1188	; 0x4a4
 8001c72:	2161      	movs	r1, #97	; 0x61
 8001c74:	4630      	mov	r0, r6
 8001c76:	f7ff fc2f 	bl	80014d8 <VL53L1_WrWord>
			break;
 8001c7a:	e027      	b.n	8001ccc <VL53L1X_SetTimingBudgetInMs+0x1ae>
		switch (TimingBudgetInMs) {
 8001c7c:	2501      	movs	r5, #1
 8001c7e:	e025      	b.n	8001ccc <VL53L1X_SetTimingBudgetInMs+0x1ae>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001c80:	2260      	movs	r2, #96	; 0x60
 8001c82:	215e      	movs	r1, #94	; 0x5e
 8001c84:	4630      	mov	r0, r6
 8001c86:	f7ff fc27 	bl	80014d8 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001c8a:	226e      	movs	r2, #110	; 0x6e
 8001c8c:	2161      	movs	r1, #97	; 0x61
 8001c8e:	4630      	mov	r0, r6
 8001c90:	f7ff fc22 	bl	80014d8 <VL53L1_WrWord>
			break;
 8001c94:	e01a      	b.n	8001ccc <VL53L1X_SetTimingBudgetInMs+0x1ae>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001c96:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8001c9a:	215e      	movs	r1, #94	; 0x5e
 8001c9c:	4630      	mov	r0, r6
 8001c9e:	f7ff fc1b 	bl	80014d8 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001ca2:	f44f 72f5 	mov.w	r2, #490	; 0x1ea
 8001ca6:	2161      	movs	r1, #97	; 0x61
 8001ca8:	4630      	mov	r0, r6
 8001caa:	f7ff fc15 	bl	80014d8 <VL53L1_WrWord>
			break;
 8001cae:	e00d      	b.n	8001ccc <VL53L1X_SetTimingBudgetInMs+0x1ae>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_A_HI,
 8001cb0:	f240 22d9 	movw	r2, #729	; 0x2d9
 8001cb4:	215e      	movs	r1, #94	; 0x5e
 8001cb6:	4630      	mov	r0, r6
 8001cb8:	f7ff fc0e 	bl	80014d8 <VL53L1_WrWord>
			VL53L1_WrWord(dev, RANGE_CONFIG__TIMEOUT_MACROP_B_HI,
 8001cbc:	f44f 723e 	mov.w	r2, #760	; 0x2f8
 8001cc0:	2161      	movs	r1, #97	; 0x61
 8001cc2:	4630      	mov	r0, r6
 8001cc4:	f7ff fc08 	bl	80014d8 <VL53L1_WrWord>
			break;
 8001cc8:	e000      	b.n	8001ccc <VL53L1X_SetTimingBudgetInMs+0x1ae>
		return 1;
 8001cca:	2501      	movs	r5, #1
}
 8001ccc:	4628      	mov	r0, r5
 8001cce:	b002      	add	sp, #8
 8001cd0:	bd70      	pop	{r4, r5, r6, pc}

08001cd2 <VL53L1X_SetDistanceMode>:
{
 8001cd2:	b530      	push	{r4, r5, lr}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	4604      	mov	r4, r0
 8001cd8:	460d      	mov	r5, r1
	status |= VL53L1X_GetTimingBudgetInMs(dev, &TB);
 8001cda:	f10d 0106 	add.w	r1, sp, #6
 8001cde:	f7ff feb7 	bl	8001a50 <VL53L1X_GetTimingBudgetInMs>
	if (status != 0)
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	d151      	bne.n	8001d8a <VL53L1X_SetDistanceMode+0xb8>
	switch (DM) {
 8001ce6:	2d01      	cmp	r5, #1
 8001ce8:	d003      	beq.n	8001cf2 <VL53L1X_SetDistanceMode+0x20>
 8001cea:	2d02      	cmp	r5, #2
 8001cec:	d02b      	beq.n	8001d46 <VL53L1X_SetDistanceMode+0x74>
 8001cee:	2501      	movs	r5, #1
 8001cf0:	e04c      	b.n	8001d8c <VL53L1X_SetDistanceMode+0xba>
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x14);
 8001cf2:	2214      	movs	r2, #20
 8001cf4:	214b      	movs	r1, #75	; 0x4b
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	f7ff fbda 	bl	80014b0 <VL53L1_WrByte>
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	2160      	movs	r1, #96	; 0x60
 8001d00:	4620      	mov	r0, r4
 8001d02:	f7ff fbd5 	bl	80014b0 <VL53L1_WrByte>
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 8001d06:	2205      	movs	r2, #5
 8001d08:	2163      	movs	r1, #99	; 0x63
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	f7ff fbd0 	bl	80014b0 <VL53L1_WrByte>
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 8001d10:	2238      	movs	r2, #56	; 0x38
 8001d12:	2169      	movs	r1, #105	; 0x69
 8001d14:	4620      	mov	r0, r4
 8001d16:	f7ff fbcb 	bl	80014b0 <VL53L1_WrByte>
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0705);
 8001d1a:	f240 7205 	movw	r2, #1797	; 0x705
 8001d1e:	2178      	movs	r1, #120	; 0x78
 8001d20:	4620      	mov	r0, r4
 8001d22:	f7ff fbd9 	bl	80014d8 <VL53L1_WrWord>
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0606);
 8001d26:	f240 6206 	movw	r2, #1542	; 0x606
 8001d2a:	217a      	movs	r1, #122	; 0x7a
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	f7ff fbd3 	bl	80014d8 <VL53L1_WrWord>
 8001d32:	4605      	mov	r5, r0
	if (status == 0)
 8001d34:	bb55      	cbnz	r5, 8001d8c <VL53L1X_SetDistanceMode+0xba>
		status |= VL53L1X_SetTimingBudgetInMs(dev, TB);
 8001d36:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	f7ff feef 	bl	8001b1e <VL53L1X_SetTimingBudgetInMs>
 8001d40:	4305      	orrs	r5, r0
 8001d42:	b26d      	sxtb	r5, r5
 8001d44:	e022      	b.n	8001d8c <VL53L1X_SetDistanceMode+0xba>
		status = VL53L1_WrByte(dev, PHASECAL_CONFIG__TIMEOUT_MACROP, 0x0A);
 8001d46:	220a      	movs	r2, #10
 8001d48:	214b      	movs	r1, #75	; 0x4b
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	f7ff fbb0 	bl	80014b0 <VL53L1_WrByte>
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 8001d50:	220f      	movs	r2, #15
 8001d52:	2160      	movs	r1, #96	; 0x60
 8001d54:	4620      	mov	r0, r4
 8001d56:	f7ff fbab 	bl	80014b0 <VL53L1_WrByte>
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 8001d5a:	220d      	movs	r2, #13
 8001d5c:	2163      	movs	r1, #99	; 0x63
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f7ff fba6 	bl	80014b0 <VL53L1_WrByte>
		status = VL53L1_WrByte(dev, RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 8001d64:	22b8      	movs	r2, #184	; 0xb8
 8001d66:	2169      	movs	r1, #105	; 0x69
 8001d68:	4620      	mov	r0, r4
 8001d6a:	f7ff fba1 	bl	80014b0 <VL53L1_WrByte>
		status = VL53L1_WrWord(dev, SD_CONFIG__WOI_SD0, 0x0F0D);
 8001d6e:	f640 720d 	movw	r2, #3853	; 0xf0d
 8001d72:	2178      	movs	r1, #120	; 0x78
 8001d74:	4620      	mov	r0, r4
 8001d76:	f7ff fbaf 	bl	80014d8 <VL53L1_WrWord>
		status = VL53L1_WrWord(dev, SD_CONFIG__INITIAL_PHASE_SD0, 0x0E0E);
 8001d7a:	f640 620e 	movw	r2, #3598	; 0xe0e
 8001d7e:	217a      	movs	r1, #122	; 0x7a
 8001d80:	4620      	mov	r0, r4
 8001d82:	f7ff fba9 	bl	80014d8 <VL53L1_WrWord>
 8001d86:	4605      	mov	r5, r0
		break;
 8001d88:	e7d4      	b.n	8001d34 <VL53L1X_SetDistanceMode+0x62>
		return 1;
 8001d8a:	2501      	movs	r5, #1
}
 8001d8c:	4628      	mov	r0, r5
 8001d8e:	b003      	add	sp, #12
 8001d90:	bd30      	pop	{r4, r5, pc}
 8001d92:	0000      	movs	r0, r0
 8001d94:	0000      	movs	r0, r0
	...

08001d98 <VL53L1X_SetInterMeasurementInMs>:

VL53L1X_ERROR VL53L1X_SetInterMeasurementInMs(uint16_t dev, uint32_t InterMeasMs)
{
 8001d98:	b570      	push	{r4, r5, r6, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	4605      	mov	r5, r0
 8001d9e:	460e      	mov	r6, r1
	uint16_t ClockPLL;
	VL53L1X_ERROR status = 0;

	status |= VL53L1_RdWord(dev, VL53L1_RESULT__OSC_CALIBRATE_VAL, &ClockPLL);
 8001da0:	f10d 0206 	add.w	r2, sp, #6
 8001da4:	21de      	movs	r1, #222	; 0xde
 8001da6:	f7ff fbe3 	bl	8001570 <VL53L1_RdWord>
 8001daa:	4604      	mov	r4, r0
	ClockPLL = ClockPLL&0x3FF;
 8001dac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001db0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001db4:	f8ad 3006 	strh.w	r3, [sp, #6]
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
			(uint32_t)(ClockPLL * InterMeasMs * 1.075));
 8001db8:	fb06 f003 	mul.w	r0, r6, r3
 8001dbc:	f7fe fbaa 	bl	8000514 <__aeabi_ui2d>
 8001dc0:	a307      	add	r3, pc, #28	; (adr r3, 8001de0 <VL53L1X_SetInterMeasurementInMs+0x48>)
 8001dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc6:	f7fe fc1f 	bl	8000608 <__aeabi_dmul>
	VL53L1_WrDWord(dev, VL53L1_SYSTEM__INTERMEASUREMENT_PERIOD,
 8001dca:	f7fe fef5 	bl	8000bb8 <__aeabi_d2uiz>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	216c      	movs	r1, #108	; 0x6c
 8001dd2:	4628      	mov	r0, r5
 8001dd4:	f7ff fb96 	bl	8001504 <VL53L1_WrDWord>
	return status;

}
 8001dd8:	4620      	mov	r0, r4
 8001dda:	b002      	add	sp, #8
 8001ddc:	bd70      	pop	{r4, r5, r6, pc}
 8001dde:	bf00      	nop
 8001de0:	33333333 	.word	0x33333333
 8001de4:	3ff13333 	.word	0x3ff13333

08001de8 <VL53L1X_BootState>:
	*pIM= (uint16_t)(*pIM/(ClockPLL*1.065));
	return status;
}

VL53L1X_ERROR VL53L1X_BootState(uint16_t dev, uint8_t *state)
{
 8001de8:	b510      	push	{r4, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	460c      	mov	r4, r1
	VL53L1X_ERROR status = 0;
	uint8_t tmp = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f88d 3007 	strb.w	r3, [sp, #7]

	status |= VL53L1_RdByte(dev,VL53L1_FIRMWARE__SYSTEM_STATUS, &tmp);
 8001df4:	f10d 0207 	add.w	r2, sp, #7
 8001df8:	21e5      	movs	r1, #229	; 0xe5
 8001dfa:	f7ff fb9d 	bl	8001538 <VL53L1_RdByte>
	*state = tmp;
 8001dfe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e02:	7023      	strb	r3, [r4, #0]
	return status;
}
 8001e04:	b002      	add	sp, #8
 8001e06:	bd10      	pop	{r4, pc}

08001e08 <VL53L1X_GetDistance>:
	*sensorId = tmp;
	return status;
}

VL53L1X_ERROR VL53L1X_GetDistance(uint16_t dev, uint16_t *distance)
{
 8001e08:	b510      	push	{r4, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	460c      	mov	r4, r1
	VL53L1X_ERROR status = 0;
	uint16_t tmp;

	status |= (VL53L1_RdWord(dev,
 8001e0e:	f10d 0206 	add.w	r2, sp, #6
 8001e12:	2196      	movs	r1, #150	; 0x96
 8001e14:	f7ff fbac 	bl	8001570 <VL53L1_RdWord>
			VL53L1_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0, &tmp));
	*distance = tmp;
 8001e18:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001e1c:	8023      	strh	r3, [r4, #0]
	return status;
}
 8001e1e:	b002      	add	sp, #8
 8001e20:	bd10      	pop	{r4, pc}

08001e22 <VL53L1X_GetSignalRate>:
	*ambPerSp=(uint16_t) (200.0 * AmbientRate / SpNb);
	return status;
}

VL53L1X_ERROR VL53L1X_GetSignalRate(uint16_t dev, uint16_t *signal)
{
 8001e22:	b510      	push	{r4, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	460c      	mov	r4, r1
	VL53L1X_ERROR status = 0;
	uint16_t tmp;

	status |= VL53L1_RdWord(dev,
 8001e28:	f10d 0206 	add.w	r2, sp, #6
 8001e2c:	2198      	movs	r1, #152	; 0x98
 8001e2e:	f7ff fb9f 	bl	8001570 <VL53L1_RdWord>
		VL53L1_RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0, &tmp);
	*signal = tmp*8;
 8001e32:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	8023      	strh	r3, [r4, #0]
	return status;
}
 8001e3a:	b002      	add	sp, #8
 8001e3c:	bd10      	pop	{r4, pc}

08001e3e <VL53L1X_GetSpadNb>:

VL53L1X_ERROR VL53L1X_GetSpadNb(uint16_t dev, uint16_t *spNb)
{
 8001e3e:	b510      	push	{r4, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	460c      	mov	r4, r1
	VL53L1X_ERROR status = 0;
	uint16_t tmp;

	status |= VL53L1_RdWord(dev,
 8001e44:	f10d 0206 	add.w	r2, sp, #6
 8001e48:	218c      	movs	r1, #140	; 0x8c
 8001e4a:	f7ff fb91 	bl	8001570 <VL53L1_RdWord>
			      VL53L1_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0, &tmp);
	*spNb = tmp >> 8;
 8001e4e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001e52:	0a1b      	lsrs	r3, r3, #8
 8001e54:	8023      	strh	r3, [r4, #0]
	return status;
}
 8001e56:	b002      	add	sp, #8
 8001e58:	bd10      	pop	{r4, pc}

08001e5a <VL53L1X_GetAmbientRate>:

VL53L1X_ERROR VL53L1X_GetAmbientRate(uint16_t dev, uint16_t *ambRate)
{
 8001e5a:	b510      	push	{r4, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	460c      	mov	r4, r1
	VL53L1X_ERROR status = 0;
	uint16_t tmp;

	status |= VL53L1_RdWord(dev, RESULT__AMBIENT_COUNT_RATE_MCPS_SD, &tmp);
 8001e60:	f10d 0206 	add.w	r2, sp, #6
 8001e64:	2190      	movs	r1, #144	; 0x90
 8001e66:	f7ff fb83 	bl	8001570 <VL53L1_RdWord>
	*ambRate = tmp*8;
 8001e6a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	8023      	strh	r3, [r4, #0]
	return status;
}
 8001e72:	b002      	add	sp, #8
 8001e74:	bd10      	pop	{r4, pc}
	...

08001e78 <VL53L1X_GetRangeStatus>:

VL53L1X_ERROR VL53L1X_GetRangeStatus(uint16_t dev, uint8_t *rangeStatus)
{
 8001e78:	b510      	push	{r4, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	460c      	mov	r4, r1
	VL53L1X_ERROR status = 0;
	uint8_t RgSt;

	*rangeStatus = 255;
 8001e7e:	23ff      	movs	r3, #255	; 0xff
 8001e80:	700b      	strb	r3, [r1, #0]
	status |= VL53L1_RdByte(dev, VL53L1_RESULT__RANGE_STATUS, &RgSt);
 8001e82:	f10d 0207 	add.w	r2, sp, #7
 8001e86:	2189      	movs	r1, #137	; 0x89
 8001e88:	f7ff fb56 	bl	8001538 <VL53L1_RdByte>
	RgSt = RgSt & 0x1F;
 8001e8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e90:	f003 031f 	and.w	r3, r3, #31
 8001e94:	f88d 3007 	strb.w	r3, [sp, #7]
	if (RgSt < 24)
 8001e98:	2b17      	cmp	r3, #23
 8001e9a:	d804      	bhi.n	8001ea6 <VL53L1X_GetRangeStatus+0x2e>
		*rangeStatus = status_rtn[RgSt];
 8001e9c:	4a03      	ldr	r2, [pc, #12]	; (8001eac <VL53L1X_GetRangeStatus+0x34>)
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001ea4:	7023      	strb	r3, [r4, #0]
	return status;
}
 8001ea6:	b002      	add	sp, #8
 8001ea8:	bd10      	pop	{r4, pc}
 8001eaa:	bf00      	nop
 8001eac:	08006370 	.word	0x08006370

08001eb0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb0:	490f      	ldr	r1, [pc, #60]	; (8001ef0 <SystemInit+0x40>)
 8001eb2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001eb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <SystemInit+0x44>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ec8:	2000      	movs	r0, #0
 8001eca:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001ed2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ed6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001ed8:	4a07      	ldr	r2, [pc, #28]	; (8001ef8 <SystemInit+0x48>)
 8001eda:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001ee4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ee6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001eea:	608b      	str	r3, [r1, #8]
#endif
}
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000ed00 	.word	0xe000ed00
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	24003010 	.word	0x24003010

08001efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001efc:	b510      	push	{r4, lr}
 8001efe:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f00:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <HAL_InitTick+0x40>)
 8001f02:	7818      	ldrb	r0, [r3, #0]
 8001f04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f08:	fbb3 f3f0 	udiv	r3, r3, r0
 8001f0c:	4a0c      	ldr	r2, [pc, #48]	; (8001f40 <HAL_InitTick+0x44>)
 8001f0e:	6810      	ldr	r0, [r2, #0]
 8001f10:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f14:	f000 f8ac 	bl	8002070 <HAL_SYSTICK_Config>
 8001f18:	b968      	cbnz	r0, 8001f36 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1a:	2c0f      	cmp	r4, #15
 8001f1c:	d901      	bls.n	8001f22 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001f1e:	2001      	movs	r0, #1
 8001f20:	e00a      	b.n	8001f38 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f22:	2200      	movs	r2, #0
 8001f24:	4621      	mov	r1, r4
 8001f26:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2a:	f000 f85d 	bl	8001fe8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f2e:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <HAL_InitTick+0x40>)
 8001f30:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8001f32:	2000      	movs	r0, #0
 8001f34:	e000      	b.n	8001f38 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001f36:	2001      	movs	r0, #1
}
 8001f38:	bd10      	pop	{r4, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000008 	.word	0x20000008
 8001f40:	20000004 	.word	0x20000004

08001f44 <HAL_Init>:
{
 8001f44:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <HAL_Init+0x30>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f4e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f56:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f5e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f60:	2003      	movs	r0, #3
 8001f62:	f000 f82f 	bl	8001fc4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f66:	2000      	movs	r0, #0
 8001f68:	f7ff ffc8 	bl	8001efc <HAL_InitTick>
  HAL_MspInit();
 8001f6c:	f7ff f9e0 	bl	8001330 <HAL_MspInit>
}
 8001f70:	2000      	movs	r0, #0
 8001f72:	bd08      	pop	{r3, pc}
 8001f74:	40023c00 	.word	0x40023c00

08001f78 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001f78:	4a03      	ldr	r2, [pc, #12]	; (8001f88 <HAL_IncTick+0x10>)
 8001f7a:	6811      	ldr	r1, [r2, #0]
 8001f7c:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <HAL_IncTick+0x14>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	440b      	add	r3, r1
 8001f82:	6013      	str	r3, [r2, #0]
}
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	200003f0 	.word	0x200003f0
 8001f8c:	20000008 	.word	0x20000008

08001f90 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001f90:	4b01      	ldr	r3, [pc, #4]	; (8001f98 <HAL_GetTick+0x8>)
 8001f92:	6818      	ldr	r0, [r3, #0]
}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	200003f0 	.word	0x200003f0

08001f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f9c:	b538      	push	{r3, r4, r5, lr}
 8001f9e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001fa0:	f7ff fff6 	bl	8001f90 <HAL_GetTick>
 8001fa4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fa6:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001faa:	d002      	beq.n	8001fb2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <HAL_Delay+0x24>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fb2:	f7ff ffed 	bl	8001f90 <HAL_GetTick>
 8001fb6:	1b40      	subs	r0, r0, r5
 8001fb8:	42a0      	cmp	r0, r4
 8001fba:	d3fa      	bcc.n	8001fb2 <HAL_Delay+0x16>
  {
  }
}
 8001fbc:	bd38      	pop	{r3, r4, r5, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000008 	.word	0x20000008

08001fc4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc4:	4a07      	ldr	r2, [pc, #28]	; (8001fe4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001fc6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fc8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fcc:	041b      	lsls	r3, r3, #16
 8001fce:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001fd0:	0200      	lsls	r0, r0, #8
 8001fd2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001fe0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fe8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fea:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_NVIC_SetPriority+0x68>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff2:	f1c3 0c07 	rsb	ip, r3, #7
 8001ff6:	f1bc 0f04 	cmp.w	ip, #4
 8001ffa:	bf28      	it	cs
 8001ffc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002000:	f103 0e04 	add.w	lr, r3, #4
 8002004:	f1be 0f06 	cmp.w	lr, #6
 8002008:	d918      	bls.n	800203c <HAL_NVIC_SetPriority+0x54>
 800200a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	f04f 3eff 	mov.w	lr, #4294967295
 8002010:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002014:	ea21 010c 	bic.w	r1, r1, ip
 8002018:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800201a:	fa0e f303 	lsl.w	r3, lr, r3
 800201e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002022:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8002024:	2800      	cmp	r0, #0
 8002026:	db0b      	blt.n	8002040 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002028:	0109      	lsls	r1, r1, #4
 800202a:	b2c9      	uxtb	r1, r1
 800202c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002030:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002034:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002038:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203c:	2300      	movs	r3, #0
 800203e:	e7e5      	b.n	800200c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002040:	f000 000f 	and.w	r0, r0, #15
 8002044:	0109      	lsls	r1, r1, #4
 8002046:	b2c9      	uxtb	r1, r1
 8002048:	4b02      	ldr	r3, [pc, #8]	; (8002054 <HAL_NVIC_SetPriority+0x6c>)
 800204a:	5419      	strb	r1, [r3, r0]
 800204c:	e7f4      	b.n	8002038 <HAL_NVIC_SetPriority+0x50>
 800204e:	bf00      	nop
 8002050:	e000ed00 	.word	0xe000ed00
 8002054:	e000ed14 	.word	0xe000ed14

08002058 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002058:	f000 021f 	and.w	r2, r0, #31
 800205c:	0940      	lsrs	r0, r0, #5
 800205e:	2301      	movs	r3, #1
 8002060:	4093      	lsls	r3, r2
 8002062:	4a02      	ldr	r2, [pc, #8]	; (800206c <HAL_NVIC_EnableIRQ+0x14>)
 8002064:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000e100 	.word	0xe000e100

08002070 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002070:	3801      	subs	r0, #1
 8002072:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002076:	d20b      	bcs.n	8002090 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002078:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800207c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207e:	4a05      	ldr	r2, [pc, #20]	; (8002094 <HAL_SYSTICK_Config+0x24>)
 8002080:	21f0      	movs	r1, #240	; 0xf0
 8002082:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002086:	2000      	movs	r0, #0
 8002088:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208a:	2207      	movs	r2, #7
 800208c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800208e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002090:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002098:	2804      	cmp	r0, #4
 800209a:	d006      	beq.n	80020aa <HAL_SYSTICK_CLKSourceConfig+0x12>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800209c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80020a0:	6913      	ldr	r3, [r2, #16]
 80020a2:	f023 0304 	bic.w	r3, r3, #4
 80020a6:	6113      	str	r3, [r2, #16]
  }
}
 80020a8:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80020aa:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80020ae:	6913      	ldr	r3, [r2, #16]
 80020b0:	f043 0304 	orr.w	r3, r3, #4
 80020b4:	6113      	str	r3, [r2, #16]
 80020b6:	4770      	bx	lr

080020b8 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80020b8:	4770      	bx	lr

080020ba <HAL_SYSTICK_IRQHandler>:
{
 80020ba:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80020bc:	f7ff fffc 	bl	80020b8 <HAL_SYSTICK_Callback>
}
 80020c0:	bd08      	pop	{r3, pc}
	...

080020c4 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020c4:	2300      	movs	r3, #0
 80020c6:	2b0f      	cmp	r3, #15
 80020c8:	f200 80c6 	bhi.w	8002258 <HAL_GPIO_Init+0x194>
{
 80020cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ce:	b083      	sub	sp, #12
 80020d0:	e03a      	b.n	8002148 <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020d2:	2204      	movs	r2, #4
 80020d4:	e000      	b.n	80020d8 <HAL_GPIO_Init+0x14>
 80020d6:	2200      	movs	r2, #0
 80020d8:	40aa      	lsls	r2, r5
 80020da:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020dc:	3402      	adds	r4, #2
 80020de:	4d5f      	ldr	r5, [pc, #380]	; (800225c <HAL_GPIO_Init+0x198>)
 80020e0:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020e4:	4a5e      	ldr	r2, [pc, #376]	; (8002260 <HAL_GPIO_Init+0x19c>)
 80020e6:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80020e8:	ea6f 020c 	mvn.w	r2, ip
 80020ec:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020f0:	684e      	ldr	r6, [r1, #4]
 80020f2:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80020f6:	d001      	beq.n	80020fc <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 80020f8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 80020fc:	4c58      	ldr	r4, [pc, #352]	; (8002260 <HAL_GPIO_Init+0x19c>)
 80020fe:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8002100:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002102:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002106:	684e      	ldr	r6, [r1, #4]
 8002108:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 800210c:	d001      	beq.n	8002112 <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 800210e:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8002112:	4c53      	ldr	r4, [pc, #332]	; (8002260 <HAL_GPIO_Init+0x19c>)
 8002114:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002116:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8002118:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800211c:	684e      	ldr	r6, [r1, #4]
 800211e:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8002122:	d001      	beq.n	8002128 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 8002124:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8002128:	4c4d      	ldr	r4, [pc, #308]	; (8002260 <HAL_GPIO_Init+0x19c>)
 800212a:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 800212c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800212e:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002130:	684d      	ldr	r5, [r1, #4]
 8002132:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8002136:	d001      	beq.n	800213c <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8002138:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 800213c:	4c48      	ldr	r4, [pc, #288]	; (8002260 <HAL_GPIO_Init+0x19c>)
 800213e:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002140:	3301      	adds	r3, #1
 8002142:	2b0f      	cmp	r3, #15
 8002144:	f200 8086 	bhi.w	8002254 <HAL_GPIO_Init+0x190>
    ioposition = 0x01U << position;
 8002148:	2201      	movs	r2, #1
 800214a:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800214c:	680c      	ldr	r4, [r1, #0]
 800214e:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8002152:	ea32 0404 	bics.w	r4, r2, r4
 8002156:	d1f3      	bne.n	8002140 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002158:	684c      	ldr	r4, [r1, #4]
 800215a:	2c02      	cmp	r4, #2
 800215c:	d001      	beq.n	8002162 <HAL_GPIO_Init+0x9e>
 800215e:	2c12      	cmp	r4, #18
 8002160:	d110      	bne.n	8002184 <HAL_GPIO_Init+0xc0>
        temp = GPIOx->AFR[position >> 3U];
 8002162:	08dd      	lsrs	r5, r3, #3
 8002164:	3508      	adds	r5, #8
 8002166:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800216a:	f003 0407 	and.w	r4, r3, #7
 800216e:	00a6      	lsls	r6, r4, #2
 8002170:	240f      	movs	r4, #15
 8002172:	40b4      	lsls	r4, r6
 8002174:	ea27 0e04 	bic.w	lr, r7, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002178:	690c      	ldr	r4, [r1, #16]
 800217a:	40b4      	lsls	r4, r6
 800217c:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002180:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8002184:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002186:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800218a:	2403      	movs	r4, #3
 800218c:	fa04 f40e 	lsl.w	r4, r4, lr
 8002190:	43e5      	mvns	r5, r4
 8002192:	ea26 0604 	bic.w	r6, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002196:	684c      	ldr	r4, [r1, #4]
 8002198:	f004 0403 	and.w	r4, r4, #3
 800219c:	fa04 f40e 	lsl.w	r4, r4, lr
 80021a0:	4334      	orrs	r4, r6
      GPIOx->MODER = temp;
 80021a2:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021a4:	684c      	ldr	r4, [r1, #4]
 80021a6:	1e66      	subs	r6, r4, #1
 80021a8:	2e01      	cmp	r6, #1
 80021aa:	d903      	bls.n	80021b4 <HAL_GPIO_Init+0xf0>
 80021ac:	2c11      	cmp	r4, #17
 80021ae:	d001      	beq.n	80021b4 <HAL_GPIO_Init+0xf0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021b0:	2c12      	cmp	r4, #18
 80021b2:	d10f      	bne.n	80021d4 <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 80021b4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021b6:	402e      	ands	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021b8:	68cc      	ldr	r4, [r1, #12]
 80021ba:	fa04 f40e 	lsl.w	r4, r4, lr
 80021be:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80021c0:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80021c2:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021c4:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021c8:	684c      	ldr	r4, [r1, #4]
 80021ca:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80021ce:	409c      	lsls	r4, r3
 80021d0:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 80021d2:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80021d4:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021d6:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021d8:	688a      	ldr	r2, [r1, #8]
 80021da:	fa02 f20e 	lsl.w	r2, r2, lr
 80021de:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 80021e0:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021e2:	684a      	ldr	r2, [r1, #4]
 80021e4:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80021e8:	d0aa      	beq.n	8002140 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ea:	2200      	movs	r2, #0
 80021ec:	9201      	str	r2, [sp, #4]
 80021ee:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <HAL_GPIO_Init+0x1a0>)
 80021f0:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80021f2:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80021f6:	6454      	str	r4, [r2, #68]	; 0x44
 80021f8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021fa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80021fe:	9201      	str	r2, [sp, #4]
 8002200:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002202:	089c      	lsrs	r4, r3, #2
 8002204:	1ca5      	adds	r5, r4, #2
 8002206:	4a15      	ldr	r2, [pc, #84]	; (800225c <HAL_GPIO_Init+0x198>)
 8002208:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800220c:	f003 0203 	and.w	r2, r3, #3
 8002210:	0095      	lsls	r5, r2, #2
 8002212:	220f      	movs	r2, #15
 8002214:	40aa      	lsls	r2, r5
 8002216:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800221a:	4a13      	ldr	r2, [pc, #76]	; (8002268 <HAL_GPIO_Init+0x1a4>)
 800221c:	4290      	cmp	r0, r2
 800221e:	f43f af5a 	beq.w	80020d6 <HAL_GPIO_Init+0x12>
 8002222:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002226:	4290      	cmp	r0, r2
 8002228:	d00e      	beq.n	8002248 <HAL_GPIO_Init+0x184>
 800222a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800222e:	4290      	cmp	r0, r2
 8002230:	d00c      	beq.n	800224c <HAL_GPIO_Init+0x188>
 8002232:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002236:	4290      	cmp	r0, r2
 8002238:	d00a      	beq.n	8002250 <HAL_GPIO_Init+0x18c>
 800223a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800223e:	4290      	cmp	r0, r2
 8002240:	f43f af47 	beq.w	80020d2 <HAL_GPIO_Init+0xe>
 8002244:	2207      	movs	r2, #7
 8002246:	e747      	b.n	80020d8 <HAL_GPIO_Init+0x14>
 8002248:	2201      	movs	r2, #1
 800224a:	e745      	b.n	80020d8 <HAL_GPIO_Init+0x14>
 800224c:	2202      	movs	r2, #2
 800224e:	e743      	b.n	80020d8 <HAL_GPIO_Init+0x14>
 8002250:	2203      	movs	r2, #3
 8002252:	e741      	b.n	80020d8 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8002254:	b003      	add	sp, #12
 8002256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40013800 	.word	0x40013800
 8002260:	40013c00 	.word	0x40013c00
 8002264:	40023800 	.word	0x40023800
 8002268:	40020000 	.word	0x40020000

0800226c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800226c:	6903      	ldr	r3, [r0, #16]
 800226e:	4219      	tst	r1, r3
 8002270:	d001      	beq.n	8002276 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8002272:	2001      	movs	r0, #1
 8002274:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002276:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002278:	4770      	bx	lr

0800227a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800227a:	b10a      	cbz	r2, 8002280 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800227c:	6181      	str	r1, [r0, #24]
 800227e:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002280:	0409      	lsls	r1, r1, #16
 8002282:	6181      	str	r1, [r0, #24]
  }
}
 8002284:	4770      	bx	lr
	...

08002288 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002288:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800228a:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	4203      	tst	r3, r0
 8002290:	d100      	bne.n	8002294 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8002292:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002294:	4b02      	ldr	r3, [pc, #8]	; (80022a0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002296:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002298:	f7fe feca 	bl	8001030 <HAL_GPIO_EXTI_Callback>
}
 800229c:	e7f9      	b.n	8002292 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800229e:	bf00      	nop
 80022a0:	40013c00 	.word	0x40013c00

080022a4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022a4:	6803      	ldr	r3, [r0, #0]
 80022a6:	695a      	ldr	r2, [r3, #20]
 80022a8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80022ac:	d101      	bne.n	80022b2 <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80022ae:	2000      	movs	r0, #0
}
 80022b0:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022b6:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80022b8:	2304      	movs	r3, #4
 80022ba:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80022bc:	2300      	movs	r3, #0
 80022be:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80022c0:	2220      	movs	r2, #32
 80022c2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80022c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80022ca:	2001      	movs	r0, #1
 80022cc:	4770      	bx	lr

080022ce <I2C_WaitOnFlagUntilTimeout>:
{
 80022ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022d2:	4607      	mov	r7, r0
 80022d4:	460d      	mov	r5, r1
 80022d6:	4690      	mov	r8, r2
 80022d8:	461e      	mov	r6, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80022da:	e020      	b.n	800231e <I2C_WaitOnFlagUntilTimeout+0x50>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80022dc:	b12e      	cbz	r6, 80022ea <I2C_WaitOnFlagUntilTimeout+0x1c>
 80022de:	f7ff fe57 	bl	8001f90 <HAL_GetTick>
 80022e2:	9b06      	ldr	r3, [sp, #24]
 80022e4:	1ac0      	subs	r0, r0, r3
 80022e6:	42b0      	cmp	r0, r6
 80022e8:	d919      	bls.n	800231e <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80022ee:	2220      	movs	r2, #32
 80022f0:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        __HAL_UNLOCK(hi2c);
 80022f8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_TIMEOUT;
 80022fc:	2003      	movs	r0, #3
 80022fe:	e01e      	b.n	800233e <I2C_WaitOnFlagUntilTimeout+0x70>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	699c      	ldr	r4, [r3, #24]
 8002304:	ea25 0c04 	bic.w	ip, r5, r4
 8002308:	fa1f fc8c 	uxth.w	ip, ip
 800230c:	fabc fc8c 	clz	ip, ip
 8002310:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8002314:	45e0      	cmp	r8, ip
 8002316:	d111      	bne.n	800233c <I2C_WaitOnFlagUntilTimeout+0x6e>
    if(Timeout != HAL_MAX_DELAY)
 8002318:	f1b6 3fff 	cmp.w	r6, #4294967295
 800231c:	d1de      	bne.n	80022dc <I2C_WaitOnFlagUntilTimeout+0xe>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800231e:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8002322:	2b01      	cmp	r3, #1
 8002324:	d1ec      	bne.n	8002300 <I2C_WaitOnFlagUntilTimeout+0x32>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	ea25 0c03 	bic.w	ip, r5, r3
 800232e:	fa1f fc8c 	uxth.w	ip, ip
 8002332:	fabc fc8c 	clz	ip, ip
 8002336:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800233a:	e7eb      	b.n	8002314 <I2C_WaitOnFlagUntilTimeout+0x46>
  return HAL_OK;
 800233c:	2000      	movs	r0, #0
}
 800233e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002342 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002346:	4605      	mov	r5, r0
 8002348:	460e      	mov	r6, r1
 800234a:	4617      	mov	r7, r2
 800234c:	4698      	mov	r8, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800234e:	e033      	b.n	80023b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x76>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002356:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002358:	682b      	ldr	r3, [r5, #0]
 800235a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800235e:	615a      	str	r2, [r3, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002360:	2304      	movs	r3, #4
 8002362:	642b      	str	r3, [r5, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002364:	2300      	movs	r3, #0
 8002366:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002368:	2220      	movs	r2, #32
 800236a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 800236e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8002372:	2001      	movs	r0, #1
 8002374:	e02e      	b.n	80023d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002376:	b12f      	cbz	r7, 8002384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x42>
 8002378:	f7ff fe0a 	bl	8001f90 <HAL_GetTick>
 800237c:	eba0 0008 	sub.w	r0, r0, r8
 8002380:	42b8      	cmp	r0, r7
 8002382:	d919      	bls.n	80023b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x76>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002384:	2300      	movs	r3, #0
 8002386:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002388:	2220      	movs	r2, #32
 800238a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800238e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002392:	2003      	movs	r0, #3
 8002394:	e01e      	b.n	80023d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002396:	682b      	ldr	r3, [r5, #0]
 8002398:	699c      	ldr	r4, [r3, #24]
 800239a:	ea26 0404 	bic.w	r4, r6, r4
 800239e:	b2a4      	uxth	r4, r4
 80023a0:	3c00      	subs	r4, #0
 80023a2:	bf18      	it	ne
 80023a4:	2401      	movne	r4, #1
 80023a6:	b1a4      	cbz	r4, 80023d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x90>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023a8:	682b      	ldr	r3, [r5, #0]
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80023b0:	d1ce      	bne.n	8002350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if(Timeout != HAL_MAX_DELAY)
 80023b2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80023b6:	d1de      	bne.n	8002376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x34>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023b8:	f3c6 4307 	ubfx	r3, r6, #16, #8
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d1ea      	bne.n	8002396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>
 80023c0:	682b      	ldr	r3, [r5, #0]
 80023c2:	695c      	ldr	r4, [r3, #20]
 80023c4:	ea26 0404 	bic.w	r4, r6, r4
 80023c8:	b2a4      	uxth	r4, r4
 80023ca:	3c00      	subs	r4, #0
 80023cc:	bf18      	it	ne
 80023ce:	2401      	movne	r4, #1
 80023d0:	e7e9      	b.n	80023a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
  return HAL_OK;
 80023d2:	2000      	movs	r0, #0
}
 80023d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080023d8 <I2C_MasterRequestWrite>:
{
 80023d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023da:	b083      	sub	sp, #12
 80023dc:	4604      	mov	r4, r0
 80023de:	460d      	mov	r5, r1
 80023e0:	4616      	mov	r6, r2
 80023e2:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023e4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d00d      	beq.n	8002406 <I2C_MasterRequestWrite+0x2e>
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d00b      	beq.n	8002406 <I2C_MasterRequestWrite+0x2e>
 80023ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023f2:	d008      	beq.n	8002406 <I2C_MasterRequestWrite+0x2e>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80023f6:	2b12      	cmp	r3, #18
 80023f8:	d10a      	bne.n	8002410 <I2C_MasterRequestWrite+0x38>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80023fa:	6802      	ldr	r2, [r0, #0]
 80023fc:	6813      	ldr	r3, [r2, #0]
 80023fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	e004      	b.n	8002410 <I2C_MasterRequestWrite+0x38>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002406:	6822      	ldr	r2, [r4, #0]
 8002408:	6813      	ldr	r3, [r2, #0]
 800240a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240e:	6013      	str	r3, [r2, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002410:	9700      	str	r7, [sp, #0]
 8002412:	4633      	mov	r3, r6
 8002414:	2200      	movs	r2, #0
 8002416:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800241a:	4620      	mov	r0, r4
 800241c:	f7ff ff57 	bl	80022ce <I2C_WaitOnFlagUntilTimeout>
 8002420:	bb70      	cbnz	r0, 8002480 <I2C_MasterRequestWrite+0xa8>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002422:	6923      	ldr	r3, [r4, #16]
 8002424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002428:	d10f      	bne.n	800244a <I2C_MasterRequestWrite+0x72>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002430:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002432:	463b      	mov	r3, r7
 8002434:	4632      	mov	r2, r6
 8002436:	4914      	ldr	r1, [pc, #80]	; (8002488 <I2C_MasterRequestWrite+0xb0>)
 8002438:	4620      	mov	r0, r4
 800243a:	f7ff ff82 	bl	8002342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800243e:	b300      	cbz	r0, 8002482 <I2C_MasterRequestWrite+0xaa>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002440:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002442:	2b04      	cmp	r3, #4
 8002444:	d01a      	beq.n	800247c <I2C_MasterRequestWrite+0xa4>
      return HAL_TIMEOUT;
 8002446:	2003      	movs	r0, #3
 8002448:	e01b      	b.n	8002482 <I2C_MasterRequestWrite+0xaa>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800244a:	11eb      	asrs	r3, r5, #7
 800244c:	6822      	ldr	r2, [r4, #0]
 800244e:	f003 0306 	and.w	r3, r3, #6
 8002452:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002456:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002458:	463b      	mov	r3, r7
 800245a:	4632      	mov	r2, r6
 800245c:	490b      	ldr	r1, [pc, #44]	; (800248c <I2C_MasterRequestWrite+0xb4>)
 800245e:	4620      	mov	r0, r4
 8002460:	f7ff ff6f 	bl	8002342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002464:	b130      	cbz	r0, 8002474 <I2C_MasterRequestWrite+0x9c>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002466:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002468:	2b04      	cmp	r3, #4
 800246a:	d001      	beq.n	8002470 <I2C_MasterRequestWrite+0x98>
        return HAL_TIMEOUT;
 800246c:	2003      	movs	r0, #3
 800246e:	e008      	b.n	8002482 <I2C_MasterRequestWrite+0xaa>
        return HAL_ERROR;
 8002470:	2001      	movs	r0, #1
 8002472:	e006      	b.n	8002482 <I2C_MasterRequestWrite+0xaa>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002474:	6823      	ldr	r3, [r4, #0]
 8002476:	b2ed      	uxtb	r5, r5
 8002478:	611d      	str	r5, [r3, #16]
 800247a:	e7da      	b.n	8002432 <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 800247c:	2001      	movs	r0, #1
 800247e:	e000      	b.n	8002482 <I2C_MasterRequestWrite+0xaa>
    return HAL_TIMEOUT;
 8002480:	2003      	movs	r0, #3
}
 8002482:	b003      	add	sp, #12
 8002484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002486:	bf00      	nop
 8002488:	00010002 	.word	0x00010002
 800248c:	00010008 	.word	0x00010008

08002490 <I2C_MasterRequestRead>:
{
 8002490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002494:	b084      	sub	sp, #16
 8002496:	4604      	mov	r4, r0
 8002498:	460d      	mov	r5, r1
 800249a:	4616      	mov	r6, r2
 800249c:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800249e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80024a0:	6801      	ldr	r1, [r0, #0]
 80024a2:	680b      	ldr	r3, [r1, #0]
 80024a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a8:	600b      	str	r3, [r1, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024aa:	2a04      	cmp	r2, #4
 80024ac:	d00d      	beq.n	80024ca <I2C_MasterRequestRead+0x3a>
 80024ae:	2a01      	cmp	r2, #1
 80024b0:	d00b      	beq.n	80024ca <I2C_MasterRequestRead+0x3a>
 80024b2:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80024b6:	d008      	beq.n	80024ca <I2C_MasterRequestRead+0x3a>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80024b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80024ba:	2b11      	cmp	r3, #17
 80024bc:	d10a      	bne.n	80024d4 <I2C_MasterRequestRead+0x44>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80024be:	6802      	ldr	r2, [r0, #0]
 80024c0:	6813      	ldr	r3, [r2, #0]
 80024c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	e004      	b.n	80024d4 <I2C_MasterRequestRead+0x44>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80024ca:	6822      	ldr	r2, [r4, #0]
 80024cc:	6813      	ldr	r3, [r2, #0]
 80024ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d2:	6013      	str	r3, [r2, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024d4:	9700      	str	r7, [sp, #0]
 80024d6:	4633      	mov	r3, r6
 80024d8:	2200      	movs	r2, #0
 80024da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024de:	4620      	mov	r0, r4
 80024e0:	f7ff fef5 	bl	80022ce <I2C_WaitOnFlagUntilTimeout>
 80024e4:	2800      	cmp	r0, #0
 80024e6:	d157      	bne.n	8002598 <I2C_MasterRequestRead+0x108>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024e8:	6923      	ldr	r3, [r4, #16]
 80024ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ee:	d111      	bne.n	8002514 <I2C_MasterRequestRead+0x84>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	f045 0501 	orr.w	r5, r5, #1
 80024f6:	b2ed      	uxtb	r5, r5
 80024f8:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024fa:	463b      	mov	r3, r7
 80024fc:	4632      	mov	r2, r6
 80024fe:	4929      	ldr	r1, [pc, #164]	; (80025a4 <I2C_MasterRequestRead+0x114>)
 8002500:	4620      	mov	r0, r4
 8002502:	f7ff ff1e 	bl	8002342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002506:	2800      	cmp	r0, #0
 8002508:	d047      	beq.n	800259a <I2C_MasterRequestRead+0x10a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800250a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800250c:	2b04      	cmp	r3, #4
 800250e:	d041      	beq.n	8002594 <I2C_MasterRequestRead+0x104>
      return HAL_TIMEOUT;
 8002510:	2003      	movs	r0, #3
 8002512:	e042      	b.n	800259a <I2C_MasterRequestRead+0x10a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002514:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8002518:	f008 0806 	and.w	r8, r8, #6
 800251c:	6823      	ldr	r3, [r4, #0]
 800251e:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8002522:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002524:	463b      	mov	r3, r7
 8002526:	4632      	mov	r2, r6
 8002528:	491f      	ldr	r1, [pc, #124]	; (80025a8 <I2C_MasterRequestRead+0x118>)
 800252a:	4620      	mov	r0, r4
 800252c:	f7ff ff09 	bl	8002342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002530:	b130      	cbz	r0, 8002540 <I2C_MasterRequestRead+0xb0>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002532:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002534:	2b04      	cmp	r3, #4
 8002536:	d001      	beq.n	800253c <I2C_MasterRequestRead+0xac>
        return HAL_TIMEOUT;
 8002538:	2003      	movs	r0, #3
 800253a:	e02e      	b.n	800259a <I2C_MasterRequestRead+0x10a>
        return HAL_ERROR;
 800253c:	2001      	movs	r0, #1
 800253e:	e02c      	b.n	800259a <I2C_MasterRequestRead+0x10a>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	b2ed      	uxtb	r5, r5
 8002544:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002546:	463b      	mov	r3, r7
 8002548:	4632      	mov	r2, r6
 800254a:	4916      	ldr	r1, [pc, #88]	; (80025a4 <I2C_MasterRequestRead+0x114>)
 800254c:	4620      	mov	r0, r4
 800254e:	f7ff fef8 	bl	8002342 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002552:	b130      	cbz	r0, 8002562 <I2C_MasterRequestRead+0xd2>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002554:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002556:	2b04      	cmp	r3, #4
 8002558:	d001      	beq.n	800255e <I2C_MasterRequestRead+0xce>
        return HAL_TIMEOUT;
 800255a:	2003      	movs	r0, #3
 800255c:	e01d      	b.n	800259a <I2C_MasterRequestRead+0x10a>
        return HAL_ERROR;
 800255e:	2001      	movs	r0, #1
 8002560:	e01b      	b.n	800259a <I2C_MasterRequestRead+0x10a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002562:	2200      	movs	r2, #0
 8002564:	9203      	str	r2, [sp, #12]
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	6959      	ldr	r1, [r3, #20]
 800256a:	9103      	str	r1, [sp, #12]
 800256c:	6999      	ldr	r1, [r3, #24]
 800256e:	9103      	str	r1, [sp, #12]
 8002570:	9903      	ldr	r1, [sp, #12]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8002572:	6819      	ldr	r1, [r3, #0]
 8002574:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002578:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800257a:	9700      	str	r7, [sp, #0]
 800257c:	4633      	mov	r3, r6
 800257e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002582:	4620      	mov	r0, r4
 8002584:	f7ff fea3 	bl	80022ce <I2C_WaitOnFlagUntilTimeout>
 8002588:	b950      	cbnz	r0, 80025a0 <I2C_MasterRequestRead+0x110>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800258a:	6822      	ldr	r2, [r4, #0]
 800258c:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8002590:	6113      	str	r3, [r2, #16]
 8002592:	e7b2      	b.n	80024fa <I2C_MasterRequestRead+0x6a>
      return HAL_ERROR;
 8002594:	2001      	movs	r0, #1
 8002596:	e000      	b.n	800259a <I2C_MasterRequestRead+0x10a>
    return HAL_TIMEOUT;
 8002598:	2003      	movs	r0, #3
}
 800259a:	b004      	add	sp, #16
 800259c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_TIMEOUT;
 80025a0:	2003      	movs	r0, #3
 80025a2:	e7fa      	b.n	800259a <I2C_MasterRequestRead+0x10a>
 80025a4:	00010002 	.word	0x00010002
 80025a8:	00010008 	.word	0x00010008

080025ac <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 80025ac:	b570      	push	{r4, r5, r6, lr}
 80025ae:	4604      	mov	r4, r0
 80025b0:	460d      	mov	r5, r1
 80025b2:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80025bc:	d119      	bne.n	80025f2 <I2C_WaitOnTXEFlagUntilTimeout+0x46>
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025be:	4620      	mov	r0, r4
 80025c0:	f7ff fe70 	bl	80022a4 <I2C_IsAcknowledgeFailed>
 80025c4:	b9b8      	cbnz	r0, 80025f6 <I2C_WaitOnTXEFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 80025c6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80025ca:	d0f3      	beq.n	80025b4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80025cc:	b125      	cbz	r5, 80025d8 <I2C_WaitOnTXEFlagUntilTimeout+0x2c>
 80025ce:	f7ff fcdf 	bl	8001f90 <HAL_GetTick>
 80025d2:	1b80      	subs	r0, r0, r6
 80025d4:	42a8      	cmp	r0, r5
 80025d6:	d9ed      	bls.n	80025b4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025da:	f043 0320 	orr.w	r3, r3, #32
 80025de:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80025e4:	2220      	movs	r2, #32
 80025e6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80025ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 80025ee:	2003      	movs	r0, #3
 80025f0:	e000      	b.n	80025f4 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
  return HAL_OK;      
 80025f2:	2000      	movs	r0, #0
}
 80025f4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80025f6:	2001      	movs	r0, #1
 80025f8:	e7fc      	b.n	80025f4 <I2C_WaitOnTXEFlagUntilTimeout+0x48>

080025fa <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80025fa:	b570      	push	{r4, r5, r6, lr}
 80025fc:	4604      	mov	r4, r0
 80025fe:	460d      	mov	r5, r1
 8002600:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002602:	6823      	ldr	r3, [r4, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f013 0f04 	tst.w	r3, #4
 800260a:	d119      	bne.n	8002640 <I2C_WaitOnBTFFlagUntilTimeout+0x46>
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800260c:	4620      	mov	r0, r4
 800260e:	f7ff fe49 	bl	80022a4 <I2C_IsAcknowledgeFailed>
 8002612:	b9b8      	cbnz	r0, 8002644 <I2C_WaitOnBTFFlagUntilTimeout+0x4a>
    if(Timeout != HAL_MAX_DELAY)
 8002614:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002618:	d0f3      	beq.n	8002602 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800261a:	b125      	cbz	r5, 8002626 <I2C_WaitOnBTFFlagUntilTimeout+0x2c>
 800261c:	f7ff fcb8 	bl	8001f90 <HAL_GetTick>
 8002620:	1b80      	subs	r0, r0, r6
 8002622:	42a8      	cmp	r0, r5
 8002624:	d9ed      	bls.n	8002602 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002626:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002628:	f043 0320 	orr.w	r3, r3, #32
 800262c:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800262e:	2300      	movs	r3, #0
 8002630:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8002632:	2220      	movs	r2, #32
 8002634:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8002638:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 800263c:	2003      	movs	r0, #3
 800263e:	e000      	b.n	8002642 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
  return HAL_OK;
 8002640:	2000      	movs	r0, #0
}
 8002642:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002644:	2001      	movs	r0, #1
 8002646:	e7fc      	b.n	8002642 <I2C_WaitOnBTFFlagUntilTimeout+0x48>

08002648 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 8002648:	b570      	push	{r4, r5, r6, lr}
 800264a:	4605      	mov	r5, r0
 800264c:	460c      	mov	r4, r1
 800264e:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002650:	682b      	ldr	r3, [r5, #0]
 8002652:	6959      	ldr	r1, [r3, #20]
 8002654:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002658:	d122      	bne.n	80026a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x58>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800265a:	6959      	ldr	r1, [r3, #20]
 800265c:	f011 0f10 	tst.w	r1, #16
 8002660:	d111      	bne.n	8002686 <I2C_WaitOnRXNEFlagUntilTimeout+0x3e>
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002662:	b124      	cbz	r4, 800266e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
 8002664:	f7ff fc94 	bl	8001f90 <HAL_GetTick>
 8002668:	1b80      	subs	r0, r0, r6
 800266a:	42a0      	cmp	r0, r4
 800266c:	d9f0      	bls.n	8002650 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800266e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002670:	f043 0320 	orr.w	r3, r3, #32
 8002674:	642b      	str	r3, [r5, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8002676:	2320      	movs	r3, #32
 8002678:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 800267c:	2300      	movs	r3, #0
 800267e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_TIMEOUT;
 8002682:	2003      	movs	r0, #3
}
 8002684:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002686:	f06f 0210 	mvn.w	r2, #16
 800268a:	615a      	str	r2, [r3, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800268c:	2300      	movs	r3, #0
 800268e:	642b      	str	r3, [r5, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8002690:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8002692:	2220      	movs	r2, #32
 8002694:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8002698:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800269c:	2001      	movs	r0, #1
 800269e:	e7f1      	b.n	8002684 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
  return HAL_OK;
 80026a0:	2000      	movs	r0, #0
 80026a2:	e7ef      	b.n	8002684 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>

080026a4 <HAL_I2C_Init>:
  if(hi2c == NULL)
 80026a4:	2800      	cmp	r0, #0
 80026a6:	f000 8082 	beq.w	80027ae <HAL_I2C_Init+0x10a>
{
 80026aa:	b510      	push	{r4, lr}
 80026ac:	4604      	mov	r4, r0
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80026ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d041      	beq.n	800273a <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80026b6:	2324      	movs	r3, #36	; 0x24
 80026b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80026bc:	6822      	ldr	r2, [r4, #0]
 80026be:	6813      	ldr	r3, [r2, #0]
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026c6:	f000 fda9 	bl	800321c <HAL_RCC_GetPCLK1Freq>
  freqrange = I2C_FREQRANGE(pclk1);
 80026ca:	4b3a      	ldr	r3, [pc, #232]	; (80027b4 <HAL_I2C_Init+0x110>)
 80026cc:	fba3 2300 	umull	r2, r3, r3, r0
 80026d0:	0c9b      	lsrs	r3, r3, #18
  hi2c->Instance->CR2 = freqrange;
 80026d2:	6822      	ldr	r2, [r4, #0]
 80026d4:	6053      	str	r3, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80026d6:	6861      	ldr	r1, [r4, #4]
 80026d8:	4a37      	ldr	r2, [pc, #220]	; (80027b8 <HAL_I2C_Init+0x114>)
 80026da:	4291      	cmp	r1, r2
 80026dc:	d832      	bhi.n	8002744 <HAL_I2C_Init+0xa0>
 80026de:	3301      	adds	r3, #1
 80026e0:	6822      	ldr	r2, [r4, #0]
 80026e2:	6213      	str	r3, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80026e4:	6863      	ldr	r3, [r4, #4]
 80026e6:	4a34      	ldr	r2, [pc, #208]	; (80027b8 <HAL_I2C_Init+0x114>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d835      	bhi.n	8002758 <HAL_I2C_Init+0xb4>
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80026f2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026f6:	4218      	tst	r0, r3
 80026f8:	d100      	bne.n	80026fc <HAL_I2C_Init+0x58>
 80026fa:	2004      	movs	r0, #4
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	61d8      	str	r0, [r3, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002700:	69e3      	ldr	r3, [r4, #28]
 8002702:	6a21      	ldr	r1, [r4, #32]
 8002704:	6822      	ldr	r2, [r4, #0]
 8002706:	430b      	orrs	r3, r1
 8002708:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800270a:	6923      	ldr	r3, [r4, #16]
 800270c:	68e1      	ldr	r1, [r4, #12]
 800270e:	6822      	ldr	r2, [r4, #0]
 8002710:	430b      	orrs	r3, r1
 8002712:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8002714:	6963      	ldr	r3, [r4, #20]
 8002716:	69a1      	ldr	r1, [r4, #24]
 8002718:	6822      	ldr	r2, [r4, #0]
 800271a:	430b      	orrs	r3, r1
 800271c:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800271e:	6822      	ldr	r2, [r4, #0]
 8002720:	6813      	ldr	r3, [r2, #0]
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002728:	2000      	movs	r0, #0
 800272a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800272c:	2320      	movs	r3, #32
 800272e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002732:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002734:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8002738:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800273a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800273e:	f7fe fe27 	bl	8001390 <HAL_I2C_MspInit>
 8002742:	e7b8      	b.n	80026b6 <HAL_I2C_Init+0x12>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8002744:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002748:	fb02 f303 	mul.w	r3, r2, r3
 800274c:	4a1b      	ldr	r2, [pc, #108]	; (80027bc <HAL_I2C_Init+0x118>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	099b      	lsrs	r3, r3, #6
 8002754:	3301      	adds	r3, #1
 8002756:	e7c3      	b.n	80026e0 <HAL_I2C_Init+0x3c>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8002758:	68a1      	ldr	r1, [r4, #8]
 800275a:	b989      	cbnz	r1, 8002780 <HAL_I2C_Init+0xdc>
 800275c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002760:	fbb0 f2f2 	udiv	r2, r0, r2
 8002764:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002768:	fab2 f282 	clz	r2, r2
 800276c:	0952      	lsrs	r2, r2, #5
 800276e:	b9e2      	cbnz	r2, 80027aa <HAL_I2C_Init+0x106>
 8002770:	b991      	cbnz	r1, 8002798 <HAL_I2C_Init+0xf4>
 8002772:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002776:	fbb0 f0f3 	udiv	r0, r0, r3
 800277a:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800277e:	e7bd      	b.n	80026fc <HAL_I2C_Init+0x58>
 8002780:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002784:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002788:	fbb0 f2f2 	udiv	r2, r0, r2
 800278c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002790:	fab2 f282 	clz	r2, r2
 8002794:	0952      	lsrs	r2, r2, #5
 8002796:	e7ea      	b.n	800276e <HAL_I2C_Init+0xca>
 8002798:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800279c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80027a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80027a4:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80027a8:	e7a8      	b.n	80026fc <HAL_I2C_Init+0x58>
 80027aa:	2001      	movs	r0, #1
 80027ac:	e7a6      	b.n	80026fc <HAL_I2C_Init+0x58>
    return HAL_ERROR;
 80027ae:	2001      	movs	r0, #1
}
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	431bde83 	.word	0x431bde83
 80027b8:	000186a0 	.word	0x000186a0
 80027bc:	10624dd3 	.word	0x10624dd3

080027c0 <HAL_I2C_Master_Transmit>:
{
 80027c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027c4:	b085      	sub	sp, #20
 80027c6:	4604      	mov	r4, r0
 80027c8:	460f      	mov	r7, r1
 80027ca:	4691      	mov	r9, r2
 80027cc:	4698      	mov	r8, r3
 80027ce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 80027d0:	f7ff fbde 	bl	8001f90 <HAL_GetTick>
 80027d4:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80027d6:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 80027da:	b2c0      	uxtb	r0, r0
 80027dc:	2820      	cmp	r0, #32
 80027de:	d004      	beq.n	80027ea <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 80027e0:	2702      	movs	r7, #2
}
 80027e2:	4638      	mov	r0, r7
 80027e4:	b005      	add	sp, #20
 80027e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027ea:	9500      	str	r5, [sp, #0]
 80027ec:	2319      	movs	r3, #25
 80027ee:	2201      	movs	r2, #1
 80027f0:	4955      	ldr	r1, [pc, #340]	; (8002948 <HAL_I2C_Master_Transmit+0x188>)
 80027f2:	4620      	mov	r0, r4
 80027f4:	f7ff fd6b 	bl	80022ce <I2C_WaitOnFlagUntilTimeout>
 80027f8:	2800      	cmp	r0, #0
 80027fa:	f040 80a0 	bne.w	800293e <HAL_I2C_Master_Transmit+0x17e>
    __HAL_LOCK(hi2c);
 80027fe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002802:	2b01      	cmp	r3, #1
 8002804:	f000 809d 	beq.w	8002942 <HAL_I2C_Master_Transmit+0x182>
 8002808:	2301      	movs	r3, #1
 800280a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800280e:	6823      	ldr	r3, [r4, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	f012 0f01 	tst.w	r2, #1
 8002816:	d103      	bne.n	8002820 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002820:	6822      	ldr	r2, [r4, #0]
 8002822:	6813      	ldr	r3, [r2, #0]
 8002824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002828:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800282a:	2321      	movs	r3, #33	; 0x21
 800282c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002830:	2310      	movs	r3, #16
 8002832:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002836:	2300      	movs	r3, #0
 8002838:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800283a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800283e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002842:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8002846:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002848:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800284a:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800284c:	462b      	mov	r3, r5
 800284e:	4632      	mov	r2, r6
 8002850:	4639      	mov	r1, r7
 8002852:	4620      	mov	r0, r4
 8002854:	f7ff fdc0 	bl	80023d8 <I2C_MasterRequestWrite>
 8002858:	4607      	mov	r7, r0
 800285a:	b160      	cbz	r0, 8002876 <HAL_I2C_Master_Transmit+0xb6>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800285c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800285e:	2b04      	cmp	r3, #4
 8002860:	d004      	beq.n	800286c <HAL_I2C_Master_Transmit+0xac>
        __HAL_UNLOCK(hi2c);
 8002862:	2300      	movs	r3, #0
 8002864:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8002868:	2703      	movs	r7, #3
 800286a:	e7ba      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x22>
        __HAL_UNLOCK(hi2c);
 800286c:	2300      	movs	r3, #0
 800286e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002872:	2701      	movs	r7, #1
 8002874:	e7b5      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x22>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002876:	2300      	movs	r3, #0
 8002878:	9303      	str	r3, [sp, #12]
 800287a:	6823      	ldr	r3, [r4, #0]
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	9203      	str	r2, [sp, #12]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	9303      	str	r3, [sp, #12]
 8002884:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8002886:	e012      	b.n	80028ae <HAL_I2C_Master_Transmit+0xee>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002888:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800288a:	2b04      	cmp	r3, #4
 800288c:	d001      	beq.n	8002892 <HAL_I2C_Master_Transmit+0xd2>
          return HAL_TIMEOUT;
 800288e:	2703      	movs	r7, #3
 8002890:	e7a7      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x22>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002892:	6822      	ldr	r2, [r4, #0]
 8002894:	6813      	ldr	r3, [r2, #0]
 8002896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800289a:	6013      	str	r3, [r2, #0]
          return HAL_ERROR;
 800289c:	2701      	movs	r7, #1
 800289e:	e7a0      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x22>
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a0:	462a      	mov	r2, r5
 80028a2:	4631      	mov	r1, r6
 80028a4:	4620      	mov	r0, r4
 80028a6:	f7ff fea8 	bl	80025fa <I2C_WaitOnBTFFlagUntilTimeout>
 80028aa:	2800      	cmp	r0, #0
 80028ac:	d12d      	bne.n	800290a <HAL_I2C_Master_Transmit+0x14a>
    while(hi2c->XferSize > 0U)
 80028ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d036      	beq.n	8002922 <HAL_I2C_Master_Transmit+0x162>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b4:	462a      	mov	r2, r5
 80028b6:	4631      	mov	r1, r6
 80028b8:	4620      	mov	r0, r4
 80028ba:	f7ff fe77 	bl	80025ac <I2C_WaitOnTXEFlagUntilTimeout>
 80028be:	2800      	cmp	r0, #0
 80028c0:	d1e2      	bne.n	8002888 <HAL_I2C_Master_Transmit+0xc8>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80028c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	6262      	str	r2, [r4, #36]	; 0x24
 80028c8:	6822      	ldr	r2, [r4, #0]
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 80028ce:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80028d0:	b289      	uxth	r1, r1
 80028d2:	3901      	subs	r1, #1
 80028d4:	b289      	uxth	r1, r1
 80028d6:	8561      	strh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80028d8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29b      	uxth	r3, r3
 80028de:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028e0:	6822      	ldr	r2, [r4, #0]
 80028e2:	6951      	ldr	r1, [r2, #20]
 80028e4:	f011 0f04 	tst.w	r1, #4
 80028e8:	d0da      	beq.n	80028a0 <HAL_I2C_Master_Transmit+0xe0>
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0d8      	beq.n	80028a0 <HAL_I2C_Master_Transmit+0xe0>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80028ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028f0:	1c59      	adds	r1, r3, #1
 80028f2:	6261      	str	r1, [r4, #36]	; 0x24
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 80028f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29b      	uxth	r3, r3
 8002900:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002902:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002904:	3b01      	subs	r3, #1
 8002906:	8523      	strh	r3, [r4, #40]	; 0x28
 8002908:	e7ca      	b.n	80028a0 <HAL_I2C_Master_Transmit+0xe0>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800290a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800290c:	2b04      	cmp	r3, #4
 800290e:	d001      	beq.n	8002914 <HAL_I2C_Master_Transmit+0x154>
          return HAL_TIMEOUT;
 8002910:	2703      	movs	r7, #3
 8002912:	e766      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x22>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002914:	6822      	ldr	r2, [r4, #0]
 8002916:	6813      	ldr	r3, [r2, #0]
 8002918:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800291c:	6013      	str	r3, [r2, #0]
          return HAL_ERROR;
 800291e:	2701      	movs	r7, #1
 8002920:	e75f      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x22>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002922:	6822      	ldr	r2, [r4, #0]
 8002924:	6813      	ldr	r3, [r2, #0]
 8002926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800292a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800292c:	2320      	movs	r3, #32
 800292e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002932:	2300      	movs	r3, #0
 8002934:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002938:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800293c:	e751      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 800293e:	2702      	movs	r7, #2
 8002940:	e74f      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8002942:	2702      	movs	r7, #2
 8002944:	e74d      	b.n	80027e2 <HAL_I2C_Master_Transmit+0x22>
 8002946:	bf00      	nop
 8002948:	00100002 	.word	0x00100002

0800294c <HAL_I2C_Master_Receive>:
{
 800294c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002950:	b087      	sub	sp, #28
 8002952:	4604      	mov	r4, r0
 8002954:	460f      	mov	r7, r1
 8002956:	4691      	mov	r9, r2
 8002958:	4698      	mov	r8, r3
 800295a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  tickstart = HAL_GetTick();
 800295c:	f7ff fb18 	bl	8001f90 <HAL_GetTick>
 8002960:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8002962:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8002966:	b2c0      	uxtb	r0, r0
 8002968:	2820      	cmp	r0, #32
 800296a:	d004      	beq.n	8002976 <HAL_I2C_Master_Receive+0x2a>
    return HAL_BUSY;
 800296c:	2702      	movs	r7, #2
}
 800296e:	4638      	mov	r0, r7
 8002970:	b007      	add	sp, #28
 8002972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002976:	9500      	str	r5, [sp, #0]
 8002978:	2319      	movs	r3, #25
 800297a:	2201      	movs	r2, #1
 800297c:	498f      	ldr	r1, [pc, #572]	; (8002bbc <HAL_I2C_Master_Receive+0x270>)
 800297e:	4620      	mov	r0, r4
 8002980:	f7ff fca5 	bl	80022ce <I2C_WaitOnFlagUntilTimeout>
 8002984:	2800      	cmp	r0, #0
 8002986:	f040 8154 	bne.w	8002c32 <HAL_I2C_Master_Receive+0x2e6>
    __HAL_LOCK(hi2c);
 800298a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800298e:	2b01      	cmp	r3, #1
 8002990:	f000 8151 	beq.w	8002c36 <HAL_I2C_Master_Receive+0x2ea>
 8002994:	2301      	movs	r3, #1
 8002996:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	f012 0f01 	tst.w	r2, #1
 80029a2:	d103      	bne.n	80029ac <HAL_I2C_Master_Receive+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80029ac:	6822      	ldr	r2, [r4, #0]
 80029ae:	6813      	ldr	r3, [r2, #0]
 80029b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029b4:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80029b6:	2322      	movs	r3, #34	; 0x22
 80029b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029bc:	2310      	movs	r3, #16
 80029be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80029c6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029ca:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029ce:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80029d2:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80029d4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029d6:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029d8:	462b      	mov	r3, r5
 80029da:	4632      	mov	r2, r6
 80029dc:	4639      	mov	r1, r7
 80029de:	4620      	mov	r0, r4
 80029e0:	f7ff fd56 	bl	8002490 <I2C_MasterRequestRead>
 80029e4:	4607      	mov	r7, r0
 80029e6:	b160      	cbz	r0, 8002a02 <HAL_I2C_Master_Receive+0xb6>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d004      	beq.n	80029f8 <HAL_I2C_Master_Receive+0xac>
        __HAL_UNLOCK(hi2c);
 80029ee:	2300      	movs	r3, #0
 80029f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 80029f4:	2703      	movs	r7, #3
 80029f6:	e7ba      	b.n	800296e <HAL_I2C_Master_Receive+0x22>
        __HAL_UNLOCK(hi2c);
 80029f8:	2300      	movs	r3, #0
 80029fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80029fe:	2701      	movs	r7, #1
 8002a00:	e7b5      	b.n	800296e <HAL_I2C_Master_Receive+0x22>
    if(hi2c->XferSize == 0U)
 8002a02:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002a04:	b95b      	cbnz	r3, 8002a1e <HAL_I2C_Master_Receive+0xd2>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a06:	9302      	str	r3, [sp, #8]
 8002a08:	6823      	ldr	r3, [r4, #0]
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	9202      	str	r2, [sp, #8]
 8002a0e:	699a      	ldr	r2, [r3, #24]
 8002a10:	9202      	str	r2, [sp, #8]
 8002a12:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	e07d      	b.n	8002b1a <HAL_I2C_Master_Receive+0x1ce>
    else if(hi2c->XferSize == 1U)
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d00f      	beq.n	8002a42 <HAL_I2C_Master_Receive+0xf6>
    else if(hi2c->XferSize == 2U)
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d01f      	beq.n	8002a66 <HAL_I2C_Master_Receive+0x11a>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8002a26:	6822      	ldr	r2, [r4, #0]
 8002a28:	6813      	ldr	r3, [r2, #0]
 8002a2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a2e:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a30:	2300      	movs	r3, #0
 8002a32:	9305      	str	r3, [sp, #20]
 8002a34:	6823      	ldr	r3, [r4, #0]
 8002a36:	695a      	ldr	r2, [r3, #20]
 8002a38:	9205      	str	r2, [sp, #20]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	9305      	str	r3, [sp, #20]
 8002a3e:	9b05      	ldr	r3, [sp, #20]
 8002a40:	e06b      	b.n	8002b1a <HAL_I2C_Master_Receive+0x1ce>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002a42:	6822      	ldr	r2, [r4, #0]
 8002a44:	6813      	ldr	r3, [r2, #0]
 8002a46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a4a:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	9303      	str	r3, [sp, #12]
 8002a50:	6823      	ldr	r3, [r4, #0]
 8002a52:	695a      	ldr	r2, [r3, #20]
 8002a54:	9203      	str	r2, [sp, #12]
 8002a56:	699a      	ldr	r2, [r3, #24]
 8002a58:	9203      	str	r2, [sp, #12]
 8002a5a:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	e059      	b.n	8002b1a <HAL_I2C_Master_Receive+0x1ce>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002a66:	6822      	ldr	r2, [r4, #0]
 8002a68:	6813      	ldr	r3, [r2, #0]
 8002a6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a6e:	6013      	str	r3, [r2, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8002a70:	6822      	ldr	r2, [r4, #0]
 8002a72:	6813      	ldr	r3, [r2, #0]
 8002a74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a78:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	9304      	str	r3, [sp, #16]
 8002a7e:	6823      	ldr	r3, [r4, #0]
 8002a80:	695a      	ldr	r2, [r3, #20]
 8002a82:	9204      	str	r2, [sp, #16]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	9304      	str	r3, [sp, #16]
 8002a88:	9b04      	ldr	r3, [sp, #16]
 8002a8a:	e046      	b.n	8002b1a <HAL_I2C_Master_Receive+0x1ce>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002a8c:	462a      	mov	r2, r5
 8002a8e:	4631      	mov	r1, r6
 8002a90:	4620      	mov	r0, r4
 8002a92:	f7ff fdd9 	bl	8002648 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a96:	b970      	cbnz	r0, 8002ab6 <HAL_I2C_Master_Receive+0x16a>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002a98:	6823      	ldr	r3, [r4, #0]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a9e:	1c59      	adds	r1, r3, #1
 8002aa0:	6261      	str	r1, [r4, #36]	; 0x24
 8002aa2:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002aa4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002aaa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002ab4:	e031      	b.n	8002b1a <HAL_I2C_Master_Receive+0x1ce>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002ab6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d001      	beq.n	8002ac0 <HAL_I2C_Master_Receive+0x174>
              return HAL_ERROR;
 8002abc:	2701      	movs	r7, #1
 8002abe:	e756      	b.n	800296e <HAL_I2C_Master_Receive+0x22>
              return HAL_TIMEOUT;
 8002ac0:	2703      	movs	r7, #3
 8002ac2:	e754      	b.n	800296e <HAL_I2C_Master_Receive+0x22>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ac4:	9500      	str	r5, [sp, #0]
 8002ac6:	4633      	mov	r3, r6
 8002ac8:	2200      	movs	r2, #0
 8002aca:	493d      	ldr	r1, [pc, #244]	; (8002bc0 <HAL_I2C_Master_Receive+0x274>)
 8002acc:	4620      	mov	r0, r4
 8002ace:	f7ff fbfe 	bl	80022ce <I2C_WaitOnFlagUntilTimeout>
 8002ad2:	2800      	cmp	r0, #0
 8002ad4:	f040 80b1 	bne.w	8002c3a <HAL_I2C_Master_Receive+0x2ee>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002ad8:	6822      	ldr	r2, [r4, #0]
 8002ada:	6813      	ldr	r3, [r2, #0]
 8002adc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ae0:	6013      	str	r3, [r2, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002ae2:	6823      	ldr	r3, [r4, #0]
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ae8:	1c59      	adds	r1, r3, #1
 8002aea:	6261      	str	r1, [r4, #36]	; 0x24
 8002aec:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002aee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002af0:	3b01      	subs	r3, #1
 8002af2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002af4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002afe:	6823      	ldr	r3, [r4, #0]
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b04:	1c59      	adds	r1, r3, #1
 8002b06:	6261      	str	r1, [r4, #36]	; 0x24
 8002b08:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002b0a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002b10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8002b1a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8002b1c:	2900      	cmp	r1, #0
 8002b1e:	d07f      	beq.n	8002c20 <HAL_I2C_Master_Receive+0x2d4>
      if(hi2c->XferSize <= 3U)
 8002b20:	2903      	cmp	r1, #3
 8002b22:	d84f      	bhi.n	8002bc4 <HAL_I2C_Master_Receive+0x278>
        if(hi2c->XferSize == 1U)
 8002b24:	2901      	cmp	r1, #1
 8002b26:	d0b1      	beq.n	8002a8c <HAL_I2C_Master_Receive+0x140>
        else if(hi2c->XferSize == 2U)
 8002b28:	2902      	cmp	r1, #2
 8002b2a:	d0cb      	beq.n	8002ac4 <HAL_I2C_Master_Receive+0x178>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b2c:	9500      	str	r5, [sp, #0]
 8002b2e:	4633      	mov	r3, r6
 8002b30:	2200      	movs	r2, #0
 8002b32:	4923      	ldr	r1, [pc, #140]	; (8002bc0 <HAL_I2C_Master_Receive+0x274>)
 8002b34:	4620      	mov	r0, r4
 8002b36:	f7ff fbca 	bl	80022ce <I2C_WaitOnFlagUntilTimeout>
 8002b3a:	2800      	cmp	r0, #0
 8002b3c:	d17f      	bne.n	8002c3e <HAL_I2C_Master_Receive+0x2f2>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002b3e:	6822      	ldr	r2, [r4, #0]
 8002b40:	6813      	ldr	r3, [r2, #0]
 8002b42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b46:	6013      	str	r3, [r2, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002b48:	6823      	ldr	r3, [r4, #0]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b4e:	1c59      	adds	r1, r3, #1
 8002b50:	6261      	str	r1, [r4, #36]	; 0x24
 8002b52:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002b54:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002b56:	3b01      	subs	r3, #1
 8002b58:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002b5a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8002b5c:	b289      	uxth	r1, r1
 8002b5e:	3901      	subs	r1, #1
 8002b60:	b289      	uxth	r1, r1
 8002b62:	8561      	strh	r1, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b64:	9500      	str	r5, [sp, #0]
 8002b66:	4633      	mov	r3, r6
 8002b68:	2200      	movs	r2, #0
 8002b6a:	4915      	ldr	r1, [pc, #84]	; (8002bc0 <HAL_I2C_Master_Receive+0x274>)
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f7ff fbae 	bl	80022ce <I2C_WaitOnFlagUntilTimeout>
 8002b72:	2800      	cmp	r0, #0
 8002b74:	d165      	bne.n	8002c42 <HAL_I2C_Master_Receive+0x2f6>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8002b76:	6822      	ldr	r2, [r4, #0]
 8002b78:	6813      	ldr	r3, [r2, #0]
 8002b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b7e:	6013      	str	r3, [r2, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b86:	1c59      	adds	r1, r3, #1
 8002b88:	6261      	str	r1, [r4, #36]	; 0x24
 8002b8a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002b8c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002b92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ba2:	1c59      	adds	r1, r3, #1
 8002ba4:	6261      	str	r1, [r4, #36]	; 0x24
 8002ba6:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002ba8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002baa:	3b01      	subs	r3, #1
 8002bac:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002bae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002bb8:	e7af      	b.n	8002b1a <HAL_I2C_Master_Receive+0x1ce>
 8002bba:	bf00      	nop
 8002bbc:	00100002 	.word	0x00100002
 8002bc0:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8002bc4:	462a      	mov	r2, r5
 8002bc6:	4631      	mov	r1, r6
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f7ff fd3d 	bl	8002648 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bce:	bb00      	cbnz	r0, 8002c12 <HAL_I2C_Master_Receive+0x2c6>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bd6:	1c59      	adds	r1, r3, #1
 8002bd8:	6261      	str	r1, [r4, #36]	; 0x24
 8002bda:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8002bdc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002bde:	3b01      	subs	r3, #1
 8002be0:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002be2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bec:	6823      	ldr	r3, [r4, #0]
 8002bee:	695a      	ldr	r2, [r3, #20]
 8002bf0:	f012 0f04 	tst.w	r2, #4
 8002bf4:	d091      	beq.n	8002b1a <HAL_I2C_Master_Receive+0x1ce>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bfa:	1c59      	adds	r1, r3, #1
 8002bfc:	6261      	str	r1, [r4, #36]	; 0x24
 8002bfe:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8002c00:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002c02:	3b01      	subs	r3, #1
 8002c04:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002c06:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002c10:	e783      	b.n	8002b1a <HAL_I2C_Master_Receive+0x1ce>
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8002c12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d001      	beq.n	8002c1c <HAL_I2C_Master_Receive+0x2d0>
            return HAL_ERROR;
 8002c18:	2701      	movs	r7, #1
 8002c1a:	e6a8      	b.n	800296e <HAL_I2C_Master_Receive+0x22>
            return HAL_TIMEOUT;
 8002c1c:	2703      	movs	r7, #3
 8002c1e:	e6a6      	b.n	800296e <HAL_I2C_Master_Receive+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c20:	2320      	movs	r3, #32
 8002c22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002c2c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002c30:	e69d      	b.n	800296e <HAL_I2C_Master_Receive+0x22>
      return HAL_BUSY;
 8002c32:	2702      	movs	r7, #2
 8002c34:	e69b      	b.n	800296e <HAL_I2C_Master_Receive+0x22>
    __HAL_LOCK(hi2c);
 8002c36:	2702      	movs	r7, #2
 8002c38:	e699      	b.n	800296e <HAL_I2C_Master_Receive+0x22>
            return HAL_TIMEOUT;
 8002c3a:	2703      	movs	r7, #3
 8002c3c:	e697      	b.n	800296e <HAL_I2C_Master_Receive+0x22>
            return HAL_TIMEOUT;
 8002c3e:	2703      	movs	r7, #3
 8002c40:	e695      	b.n	800296e <HAL_I2C_Master_Receive+0x22>
            return HAL_TIMEOUT;
 8002c42:	2703      	movs	r7, #3
 8002c44:	e693      	b.n	800296e <HAL_I2C_Master_Receive+0x22>
 8002c46:	bf00      	nop

08002c48 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c48:	2800      	cmp	r0, #0
 8002c4a:	f000 81ba 	beq.w	8002fc2 <HAL_RCC_OscConfig+0x37a>
{
 8002c4e:	b570      	push	{r4, r5, r6, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c54:	6803      	ldr	r3, [r0, #0]
 8002c56:	f013 0f01 	tst.w	r3, #1
 8002c5a:	d03b      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c5c:	4b9f      	ldr	r3, [pc, #636]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 030c 	and.w	r3, r3, #12
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d02c      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c68:	4b9c      	ldr	r3, [pc, #624]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d021      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c74:	6863      	ldr	r3, [r4, #4]
 8002c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7a:	d04f      	beq.n	8002d1c <HAL_RCC_OscConfig+0xd4>
 8002c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c80:	d052      	beq.n	8002d28 <HAL_RCC_OscConfig+0xe0>
 8002c82:	4b96      	ldr	r3, [pc, #600]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c92:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c94:	6863      	ldr	r3, [r4, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d050      	beq.n	8002d3c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9a:	f7ff f979 	bl	8001f90 <HAL_GetTick>
 8002c9e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca0:	4b8e      	ldr	r3, [pc, #568]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002ca8:	d114      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002caa:	f7ff f971 	bl	8001f90 <HAL_GetTick>
 8002cae:	1b40      	subs	r0, r0, r5
 8002cb0:	2864      	cmp	r0, #100	; 0x64
 8002cb2:	d9f5      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002cb4:	2003      	movs	r0, #3
 8002cb6:	e18b      	b.n	8002fd0 <HAL_RCC_OscConfig+0x388>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb8:	4b88      	ldr	r3, [pc, #544]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002cc0:	d0d8      	beq.n	8002c74 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc2:	4b86      	ldr	r3, [pc, #536]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002cca:	d003      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x8c>
 8002ccc:	6863      	ldr	r3, [r4, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 8179 	beq.w	8002fc6 <HAL_RCC_OscConfig+0x37e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	f013 0f02 	tst.w	r3, #2
 8002cda:	d054      	beq.n	8002d86 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cdc:	4b7f      	ldr	r3, [pc, #508]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f013 0f0c 	tst.w	r3, #12
 8002ce4:	d03e      	beq.n	8002d64 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ce6:	4b7d      	ldr	r3, [pc, #500]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d033      	beq.n	8002d5a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cf2:	68e3      	ldr	r3, [r4, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d068      	beq.n	8002dca <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf8:	4b79      	ldr	r3, [pc, #484]	; (8002ee0 <HAL_RCC_OscConfig+0x298>)
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfe:	f7ff f947 	bl	8001f90 <HAL_GetTick>
 8002d02:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d04:	4b75      	ldr	r3, [pc, #468]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f013 0f02 	tst.w	r3, #2
 8002d0c:	d154      	bne.n	8002db8 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d0e:	f7ff f93f 	bl	8001f90 <HAL_GetTick>
 8002d12:	1b40      	subs	r0, r0, r5
 8002d14:	2802      	cmp	r0, #2
 8002d16:	d9f5      	bls.n	8002d04 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002d18:	2003      	movs	r0, #3
 8002d1a:	e159      	b.n	8002fd0 <HAL_RCC_OscConfig+0x388>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d1c:	4a6f      	ldr	r2, [pc, #444]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002d1e:	6813      	ldr	r3, [r2, #0]
 8002d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	e7b5      	b.n	8002c94 <HAL_RCC_OscConfig+0x4c>
 8002d28:	4b6c      	ldr	r3, [pc, #432]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	e7ab      	b.n	8002c94 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002d3c:	f7ff f928 	bl	8001f90 <HAL_GetTick>
 8002d40:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d42:	4b66      	ldr	r3, [pc, #408]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002d4a:	d0c3      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7ff f920 	bl	8001f90 <HAL_GetTick>
 8002d50:	1b40      	subs	r0, r0, r5
 8002d52:	2864      	cmp	r0, #100	; 0x64
 8002d54:	d9f5      	bls.n	8002d42 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002d56:	2003      	movs	r0, #3
 8002d58:	e13a      	b.n	8002fd0 <HAL_RCC_OscConfig+0x388>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d5a:	4b60      	ldr	r3, [pc, #384]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002d62:	d1c6      	bne.n	8002cf2 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d64:	4b5d      	ldr	r3, [pc, #372]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f013 0f02 	tst.w	r3, #2
 8002d6c:	d003      	beq.n	8002d76 <HAL_RCC_OscConfig+0x12e>
 8002d6e:	68e3      	ldr	r3, [r4, #12]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	f040 812a 	bne.w	8002fca <HAL_RCC_OscConfig+0x382>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d76:	4a59      	ldr	r2, [pc, #356]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002d78:	6813      	ldr	r3, [r2, #0]
 8002d7a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d7e:	6921      	ldr	r1, [r4, #16]
 8002d80:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d84:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	f013 0f08 	tst.w	r3, #8
 8002d8c:	d042      	beq.n	8002e14 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d8e:	6963      	ldr	r3, [r4, #20]
 8002d90:	b36b      	cbz	r3, 8002dee <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d92:	4b53      	ldr	r3, [pc, #332]	; (8002ee0 <HAL_RCC_OscConfig+0x298>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9a:	f7ff f8f9 	bl	8001f90 <HAL_GetTick>
 8002d9e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da0:	4b4e      	ldr	r3, [pc, #312]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da4:	f013 0f02 	tst.w	r3, #2
 8002da8:	d134      	bne.n	8002e14 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002daa:	f7ff f8f1 	bl	8001f90 <HAL_GetTick>
 8002dae:	1b40      	subs	r0, r0, r5
 8002db0:	2802      	cmp	r0, #2
 8002db2:	d9f5      	bls.n	8002da0 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002db4:	2003      	movs	r0, #3
 8002db6:	e10b      	b.n	8002fd0 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db8:	4a48      	ldr	r2, [pc, #288]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002dba:	6813      	ldr	r3, [r2, #0]
 8002dbc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002dc0:	6921      	ldr	r1, [r4, #16]
 8002dc2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	e7dd      	b.n	8002d86 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8002dca:	4b45      	ldr	r3, [pc, #276]	; (8002ee0 <HAL_RCC_OscConfig+0x298>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002dd0:	f7ff f8de 	bl	8001f90 <HAL_GetTick>
 8002dd4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd6:	4b41      	ldr	r3, [pc, #260]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f013 0f02 	tst.w	r3, #2
 8002dde:	d0d2      	beq.n	8002d86 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002de0:	f7ff f8d6 	bl	8001f90 <HAL_GetTick>
 8002de4:	1b40      	subs	r0, r0, r5
 8002de6:	2802      	cmp	r0, #2
 8002de8:	d9f5      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8002dea:	2003      	movs	r0, #3
 8002dec:	e0f0      	b.n	8002fd0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dee:	4b3c      	ldr	r3, [pc, #240]	; (8002ee0 <HAL_RCC_OscConfig+0x298>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df6:	f7ff f8cb 	bl	8001f90 <HAL_GetTick>
 8002dfa:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	4b37      	ldr	r3, [pc, #220]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e00:	f013 0f02 	tst.w	r3, #2
 8002e04:	d006      	beq.n	8002e14 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e06:	f7ff f8c3 	bl	8001f90 <HAL_GetTick>
 8002e0a:	1b40      	subs	r0, r0, r5
 8002e0c:	2802      	cmp	r0, #2
 8002e0e:	d9f5      	bls.n	8002dfc <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8002e10:	2003      	movs	r0, #3
 8002e12:	e0dd      	b.n	8002fd0 <HAL_RCC_OscConfig+0x388>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e14:	6823      	ldr	r3, [r4, #0]
 8002e16:	f013 0f04 	tst.w	r3, #4
 8002e1a:	d077      	beq.n	8002f0c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1c:	4b2f      	ldr	r3, [pc, #188]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002e24:	d133      	bne.n	8002e8e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	9301      	str	r3, [sp, #4]
 8002e2a:	4b2c      	ldr	r3, [pc, #176]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002e2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e32:	641a      	str	r2, [r3, #64]	; 0x40
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002e3e:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e40:	4b28      	ldr	r3, [pc, #160]	; (8002ee4 <HAL_RCC_OscConfig+0x29c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002e48:	d023      	beq.n	8002e92 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e4a:	68a3      	ldr	r3, [r4, #8]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d034      	beq.n	8002eba <HAL_RCC_OscConfig+0x272>
 8002e50:	2b05      	cmp	r3, #5
 8002e52:	d038      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x27e>
 8002e54:	4b21      	ldr	r3, [pc, #132]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002e56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e58:	f022 0201 	bic.w	r2, r2, #1
 8002e5c:	671a      	str	r2, [r3, #112]	; 0x70
 8002e5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e60:	f022 0204 	bic.w	r2, r2, #4
 8002e64:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e66:	68a3      	ldr	r3, [r4, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d03d      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6c:	f7ff f890 	bl	8001f90 <HAL_GetTick>
 8002e70:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e72:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	f013 0f02 	tst.w	r3, #2
 8002e7a:	d146      	bne.n	8002f0a <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e7c:	f7ff f888 	bl	8001f90 <HAL_GetTick>
 8002e80:	1b80      	subs	r0, r0, r6
 8002e82:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e86:	4298      	cmp	r0, r3
 8002e88:	d9f3      	bls.n	8002e72 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002e8a:	2003      	movs	r0, #3
 8002e8c:	e0a0      	b.n	8002fd0 <HAL_RCC_OscConfig+0x388>
    FlagStatus       pwrclkchanged = RESET;
 8002e8e:	2500      	movs	r5, #0
 8002e90:	e7d6      	b.n	8002e40 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e92:	4a14      	ldr	r2, [pc, #80]	; (8002ee4 <HAL_RCC_OscConfig+0x29c>)
 8002e94:	6813      	ldr	r3, [r2, #0]
 8002e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002e9c:	f7ff f878 	bl	8001f90 <HAL_GetTick>
 8002ea0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea2:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <HAL_RCC_OscConfig+0x29c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002eaa:	d1ce      	bne.n	8002e4a <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eac:	f7ff f870 	bl	8001f90 <HAL_GetTick>
 8002eb0:	1b80      	subs	r0, r0, r6
 8002eb2:	2802      	cmp	r0, #2
 8002eb4:	d9f5      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8002eb6:	2003      	movs	r0, #3
 8002eb8:	e08a      	b.n	8002fd0 <HAL_RCC_OscConfig+0x388>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eba:	4a08      	ldr	r2, [pc, #32]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002ebc:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec4:	e7cf      	b.n	8002e66 <HAL_RCC_OscConfig+0x21e>
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_RCC_OscConfig+0x294>)
 8002ec8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002eca:	f042 0204 	orr.w	r2, r2, #4
 8002ece:	671a      	str	r2, [r3, #112]	; 0x70
 8002ed0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ed2:	f042 0201 	orr.w	r2, r2, #1
 8002ed6:	671a      	str	r2, [r3, #112]	; 0x70
 8002ed8:	e7c5      	b.n	8002e66 <HAL_RCC_OscConfig+0x21e>
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	42470000 	.word	0x42470000
 8002ee4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee8:	f7ff f852 	bl	8001f90 <HAL_GetTick>
 8002eec:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eee:	4b3a      	ldr	r3, [pc, #232]	; (8002fd8 <HAL_RCC_OscConfig+0x390>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef2:	f013 0f02 	tst.w	r3, #2
 8002ef6:	d008      	beq.n	8002f0a <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef8:	f7ff f84a 	bl	8001f90 <HAL_GetTick>
 8002efc:	1b80      	subs	r0, r0, r6
 8002efe:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f02:	4298      	cmp	r0, r3
 8002f04:	d9f3      	bls.n	8002eee <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002f06:	2003      	movs	r0, #3
 8002f08:	e062      	b.n	8002fd0 <HAL_RCC_OscConfig+0x388>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f0a:	b9e5      	cbnz	r5, 8002f46 <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f0c:	69a3      	ldr	r3, [r4, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d05d      	beq.n	8002fce <HAL_RCC_OscConfig+0x386>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f12:	4a31      	ldr	r2, [pc, #196]	; (8002fd8 <HAL_RCC_OscConfig+0x390>)
 8002f14:	6892      	ldr	r2, [r2, #8]
 8002f16:	f002 020c 	and.w	r2, r2, #12
 8002f1a:	2a08      	cmp	r2, #8
 8002f1c:	d05a      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x38c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d017      	beq.n	8002f52 <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f22:	4b2e      	ldr	r3, [pc, #184]	; (8002fdc <HAL_RCC_OscConfig+0x394>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7ff f832 	bl	8001f90 <HAL_GetTick>
 8002f2c:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2e:	4b2a      	ldr	r3, [pc, #168]	; (8002fd8 <HAL_RCC_OscConfig+0x390>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f36:	d042      	beq.n	8002fbe <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f38:	f7ff f82a 	bl	8001f90 <HAL_GetTick>
 8002f3c:	1b00      	subs	r0, r0, r4
 8002f3e:	2802      	cmp	r0, #2
 8002f40:	d9f5      	bls.n	8002f2e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002f42:	2003      	movs	r0, #3
 8002f44:	e044      	b.n	8002fd0 <HAL_RCC_OscConfig+0x388>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f46:	4a24      	ldr	r2, [pc, #144]	; (8002fd8 <HAL_RCC_OscConfig+0x390>)
 8002f48:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f50:	e7dc      	b.n	8002f0c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002f52:	4b22      	ldr	r3, [pc, #136]	; (8002fdc <HAL_RCC_OscConfig+0x394>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002f58:	f7ff f81a 	bl	8001f90 <HAL_GetTick>
 8002f5c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5e:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <HAL_RCC_OscConfig+0x390>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f66:	d006      	beq.n	8002f76 <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f68:	f7ff f812 	bl	8001f90 <HAL_GetTick>
 8002f6c:	1b40      	subs	r0, r0, r5
 8002f6e:	2802      	cmp	r0, #2
 8002f70:	d9f5      	bls.n	8002f5e <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8002f72:	2003      	movs	r0, #3
 8002f74:	e02c      	b.n	8002fd0 <HAL_RCC_OscConfig+0x388>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f76:	69e3      	ldr	r3, [r4, #28]
 8002f78:	6a22      	ldr	r2, [r4, #32]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002f7e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002f82:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002f84:	0852      	lsrs	r2, r2, #1
 8002f86:	3a01      	subs	r2, #1
 8002f88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f8c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f8e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002f92:	4a11      	ldr	r2, [pc, #68]	; (8002fd8 <HAL_RCC_OscConfig+0x390>)
 8002f94:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002f96:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <HAL_RCC_OscConfig+0x394>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002f9c:	f7fe fff8 	bl	8001f90 <HAL_GetTick>
 8002fa0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	; (8002fd8 <HAL_RCC_OscConfig+0x390>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002faa:	d106      	bne.n	8002fba <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fac:	f7fe fff0 	bl	8001f90 <HAL_GetTick>
 8002fb0:	1b00      	subs	r0, r0, r4
 8002fb2:	2802      	cmp	r0, #2
 8002fb4:	d9f5      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8002fb6:	2003      	movs	r0, #3
 8002fb8:	e00a      	b.n	8002fd0 <HAL_RCC_OscConfig+0x388>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002fba:	2000      	movs	r0, #0
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x388>
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	e006      	b.n	8002fd0 <HAL_RCC_OscConfig+0x388>
    return HAL_ERROR;
 8002fc2:	2001      	movs	r0, #1
}
 8002fc4:	4770      	bx	lr
        return HAL_ERROR;
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	e002      	b.n	8002fd0 <HAL_RCC_OscConfig+0x388>
        return HAL_ERROR;
 8002fca:	2001      	movs	r0, #1
 8002fcc:	e000      	b.n	8002fd0 <HAL_RCC_OscConfig+0x388>
  return HAL_OK;
 8002fce:	2000      	movs	r0, #0
}
 8002fd0:	b002      	add	sp, #8
 8002fd2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	e7fb      	b.n	8002fd0 <HAL_RCC_OscConfig+0x388>
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	42470000 	.word	0x42470000

08002fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe0:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fe2:	4b31      	ldr	r3, [pc, #196]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d057      	beq.n	800309e <HAL_RCC_GetSysClockFreq+0xbe>
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d157      	bne.n	80030a2 <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ff2:	4b2d      	ldr	r3, [pc, #180]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003000:	d02a      	beq.n	8003058 <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003002:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003004:	6859      	ldr	r1, [r3, #4]
 8003006:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 800300a:	ea4f 114c 	mov.w	r1, ip, lsl #5
 800300e:	ebb1 000c 	subs.w	r0, r1, ip
 8003012:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003016:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800301a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800301e:	0181      	lsls	r1, r0, #6
 8003020:	1a09      	subs	r1, r1, r0
 8003022:	eb63 030e 	sbc.w	r3, r3, lr
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800302c:	00c9      	lsls	r1, r1, #3
 800302e:	eb11 0c0c 	adds.w	ip, r1, ip
 8003032:	f143 0300 	adc.w	r3, r3, #0
 8003036:	0259      	lsls	r1, r3, #9
 8003038:	2300      	movs	r3, #0
 800303a:	ea4f 204c 	mov.w	r0, ip, lsl #9
 800303e:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8003042:	f7fd fdd9 	bl	8000bf8 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003046:	4b18      	ldr	r3, [pc, #96]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800304e:	3301      	adds	r3, #1
 8003050:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003052:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003056:	e025      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003058:	4b13      	ldr	r3, [pc, #76]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8003060:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8003064:	ebb1 000c 	subs.w	r0, r1, ip
 8003068:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800306c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003070:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003074:	0181      	lsls	r1, r0, #6
 8003076:	1a09      	subs	r1, r1, r0
 8003078:	eb63 030e 	sbc.w	r3, r3, lr
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003082:	00c9      	lsls	r1, r1, #3
 8003084:	eb11 0c0c 	adds.w	ip, r1, ip
 8003088:	f143 0300 	adc.w	r3, r3, #0
 800308c:	0299      	lsls	r1, r3, #10
 800308e:	2300      	movs	r3, #0
 8003090:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003094:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003098:	f7fd fdae 	bl	8000bf8 <__aeabi_uldivmod>
 800309c:	e7d3      	b.n	8003046 <HAL_RCC_GetSysClockFreq+0x66>
      sysclockfreq = HSE_VALUE;
 800309e:	4803      	ldr	r0, [pc, #12]	; (80030ac <HAL_RCC_GetSysClockFreq+0xcc>)
 80030a0:	e000      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0xc4>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030a2:	4803      	ldr	r0, [pc, #12]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80030a4:	bd08      	pop	{r3, pc}
 80030a6:	bf00      	nop
 80030a8:	40023800 	.word	0x40023800
 80030ac:	007a1200 	.word	0x007a1200
 80030b0:	00f42400 	.word	0x00f42400

080030b4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80030b4:	2800      	cmp	r0, #0
 80030b6:	f000 809a 	beq.w	80031ee <HAL_RCC_ClockConfig+0x13a>
{
 80030ba:	b570      	push	{r4, r5, r6, lr}
 80030bc:	460d      	mov	r5, r1
 80030be:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030c0:	4b4f      	ldr	r3, [pc, #316]	; (8003200 <HAL_RCC_ClockConfig+0x14c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	428b      	cmp	r3, r1
 80030ca:	d208      	bcs.n	80030de <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030cc:	b2cb      	uxtb	r3, r1
 80030ce:	4a4c      	ldr	r2, [pc, #304]	; (8003200 <HAL_RCC_ClockConfig+0x14c>)
 80030d0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d2:	6813      	ldr	r3, [r2, #0]
 80030d4:	f003 030f 	and.w	r3, r3, #15
 80030d8:	428b      	cmp	r3, r1
 80030da:	f040 808a 	bne.w	80031f2 <HAL_RCC_ClockConfig+0x13e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	f013 0f02 	tst.w	r3, #2
 80030e4:	d017      	beq.n	8003116 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e6:	f013 0f04 	tst.w	r3, #4
 80030ea:	d004      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030ec:	4a45      	ldr	r2, [pc, #276]	; (8003204 <HAL_RCC_ClockConfig+0x150>)
 80030ee:	6893      	ldr	r3, [r2, #8]
 80030f0:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030f4:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	f013 0f08 	tst.w	r3, #8
 80030fc:	d004      	beq.n	8003108 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030fe:	4a41      	ldr	r2, [pc, #260]	; (8003204 <HAL_RCC_ClockConfig+0x150>)
 8003100:	6893      	ldr	r3, [r2, #8]
 8003102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003106:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003108:	4a3e      	ldr	r2, [pc, #248]	; (8003204 <HAL_RCC_ClockConfig+0x150>)
 800310a:	6893      	ldr	r3, [r2, #8]
 800310c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003110:	68a1      	ldr	r1, [r4, #8]
 8003112:	430b      	orrs	r3, r1
 8003114:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	f013 0f01 	tst.w	r3, #1
 800311c:	d032      	beq.n	8003184 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800311e:	6863      	ldr	r3, [r4, #4]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d021      	beq.n	8003168 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003124:	1e9a      	subs	r2, r3, #2
 8003126:	2a01      	cmp	r2, #1
 8003128:	d925      	bls.n	8003176 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312a:	4a36      	ldr	r2, [pc, #216]	; (8003204 <HAL_RCC_ClockConfig+0x150>)
 800312c:	6812      	ldr	r2, [r2, #0]
 800312e:	f012 0f02 	tst.w	r2, #2
 8003132:	d060      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x142>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003134:	4933      	ldr	r1, [pc, #204]	; (8003204 <HAL_RCC_ClockConfig+0x150>)
 8003136:	688a      	ldr	r2, [r1, #8]
 8003138:	f022 0203 	bic.w	r2, r2, #3
 800313c:	4313      	orrs	r3, r2
 800313e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003140:	f7fe ff26 	bl	8001f90 <HAL_GetTick>
 8003144:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003146:	4b2f      	ldr	r3, [pc, #188]	; (8003204 <HAL_RCC_ClockConfig+0x150>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	6862      	ldr	r2, [r4, #4]
 8003150:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003154:	d016      	beq.n	8003184 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003156:	f7fe ff1b 	bl	8001f90 <HAL_GetTick>
 800315a:	1b80      	subs	r0, r0, r6
 800315c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003160:	4298      	cmp	r0, r3
 8003162:	d9f0      	bls.n	8003146 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8003164:	2003      	movs	r0, #3
 8003166:	e041      	b.n	80031ec <HAL_RCC_ClockConfig+0x138>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003168:	4a26      	ldr	r2, [pc, #152]	; (8003204 <HAL_RCC_ClockConfig+0x150>)
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003170:	d1e0      	bne.n	8003134 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8003172:	2001      	movs	r0, #1
 8003174:	e03a      	b.n	80031ec <HAL_RCC_ClockConfig+0x138>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003176:	4a23      	ldr	r2, [pc, #140]	; (8003204 <HAL_RCC_ClockConfig+0x150>)
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800317e:	d1d9      	bne.n	8003134 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8003180:	2001      	movs	r0, #1
 8003182:	e033      	b.n	80031ec <HAL_RCC_ClockConfig+0x138>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003184:	4b1e      	ldr	r3, [pc, #120]	; (8003200 <HAL_RCC_ClockConfig+0x14c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	42ab      	cmp	r3, r5
 800318e:	d907      	bls.n	80031a0 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003190:	b2ea      	uxtb	r2, r5
 8003192:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <HAL_RCC_ClockConfig+0x14c>)
 8003194:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	42ab      	cmp	r3, r5
 800319e:	d12c      	bne.n	80031fa <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a0:	6823      	ldr	r3, [r4, #0]
 80031a2:	f013 0f04 	tst.w	r3, #4
 80031a6:	d006      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031a8:	4a16      	ldr	r2, [pc, #88]	; (8003204 <HAL_RCC_ClockConfig+0x150>)
 80031aa:	6893      	ldr	r3, [r2, #8]
 80031ac:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80031b0:	68e1      	ldr	r1, [r4, #12]
 80031b2:	430b      	orrs	r3, r1
 80031b4:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	f013 0f08 	tst.w	r3, #8
 80031bc:	d007      	beq.n	80031ce <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031be:	4a11      	ldr	r2, [pc, #68]	; (8003204 <HAL_RCC_ClockConfig+0x150>)
 80031c0:	6893      	ldr	r3, [r2, #8]
 80031c2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80031c6:	6921      	ldr	r1, [r4, #16]
 80031c8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80031cc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031ce:	f7ff ff07 	bl	8002fe0 <HAL_RCC_GetSysClockFreq>
 80031d2:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <HAL_RCC_ClockConfig+0x150>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80031da:	4a0b      	ldr	r2, [pc, #44]	; (8003208 <HAL_RCC_ClockConfig+0x154>)
 80031dc:	5cd3      	ldrb	r3, [r2, r3]
 80031de:	40d8      	lsrs	r0, r3
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <HAL_RCC_ClockConfig+0x158>)
 80031e2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80031e4:	2000      	movs	r0, #0
 80031e6:	f7fe fe89 	bl	8001efc <HAL_InitTick>
  return HAL_OK;
 80031ea:	2000      	movs	r0, #0
}
 80031ec:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80031ee:	2001      	movs	r0, #1
}
 80031f0:	4770      	bx	lr
      return HAL_ERROR;
 80031f2:	2001      	movs	r0, #1
 80031f4:	e7fa      	b.n	80031ec <HAL_RCC_ClockConfig+0x138>
        return HAL_ERROR;
 80031f6:	2001      	movs	r0, #1
 80031f8:	e7f8      	b.n	80031ec <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 80031fa:	2001      	movs	r0, #1
 80031fc:	e7f6      	b.n	80031ec <HAL_RCC_ClockConfig+0x138>
 80031fe:	bf00      	nop
 8003200:	40023c00 	.word	0x40023c00
 8003204:	40023800 	.word	0x40023800
 8003208:	080063e4 	.word	0x080063e4
 800320c:	20000004 	.word	0x20000004

08003210 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003210:	4b01      	ldr	r3, [pc, #4]	; (8003218 <HAL_RCC_GetHCLKFreq+0x8>)
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	20000004 	.word	0x20000004

0800321c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800321c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800321e:	f7ff fff7 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 8003222:	4b04      	ldr	r3, [pc, #16]	; (8003234 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800322a:	4a03      	ldr	r2, [pc, #12]	; (8003238 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800322c:	5cd3      	ldrb	r3, [r2, r3]
}
 800322e:	40d8      	lsrs	r0, r3
 8003230:	bd08      	pop	{r3, pc}
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800
 8003238:	080063f4 	.word	0x080063f4

0800323c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800323c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800323e:	f7ff ffe7 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 8003242:	4b04      	ldr	r3, [pc, #16]	; (8003254 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800324a:	4a03      	ldr	r2, [pc, #12]	; (8003258 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800324c:	5cd3      	ldrb	r3, [r2, r3]
}
 800324e:	40d8      	lsrs	r0, r3
 8003250:	bd08      	pop	{r3, pc}
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800
 8003258:	080063f4 	.word	0x080063f4

0800325c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800325c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003260:	4604      	mov	r4, r0
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8003262:	6801      	ldr	r1, [r0, #0]
 8003264:	690a      	ldr	r2, [r1, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003266:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800326a:	68c3      	ldr	r3, [r0, #12]
 800326c:	4313      	orrs	r3, r2
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800326e:	610b      	str	r3, [r1, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8003270:	6801      	ldr	r1, [r0, #0]
 8003272:	68ca      	ldr	r2, [r1, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003274:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8003278:	f022 020c 	bic.w	r2, r2, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800327c:	6883      	ldr	r3, [r0, #8]
 800327e:	6900      	ldr	r0, [r0, #16]
 8003280:	4303      	orrs	r3, r0
 8003282:	6960      	ldr	r0, [r4, #20]
 8003284:	4303      	orrs	r3, r0
 8003286:	69e0      	ldr	r0, [r4, #28]
 8003288:	4303      	orrs	r3, r0
 800328a:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800328c:	60cb      	str	r3, [r1, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800328e:	6821      	ldr	r1, [r4, #0]
 8003290:	694a      	ldr	r2, [r1, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8003292:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8003296:	69a3      	ldr	r3, [r4, #24]
 8003298:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800329a:	614b      	str	r3, [r1, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800329c:	69e3      	ldr	r3, [r4, #28]
 800329e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032a2:	d05e      	beq.n	8003362 <UART_SetConfig+0x106>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80032a4:	6823      	ldr	r3, [r4, #0]
 80032a6:	4ab5      	ldr	r2, [pc, #724]	; (800357c <UART_SetConfig+0x320>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	f000 8110 	beq.w	80034ce <UART_SetConfig+0x272>
 80032ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032b2:	4293      	cmp	r3, r2
 80032b4:	f000 810b 	beq.w	80034ce <UART_SetConfig+0x272>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80032b8:	f7ff ffb0 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 80032bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032c4:	6865      	ldr	r5, [r4, #4]
 80032c6:	00ad      	lsls	r5, r5, #2
 80032c8:	fbb0 f5f5 	udiv	r5, r0, r5
 80032cc:	4fac      	ldr	r7, [pc, #688]	; (8003580 <UART_SetConfig+0x324>)
 80032ce:	fba7 3505 	umull	r3, r5, r7, r5
 80032d2:	096d      	lsrs	r5, r5, #5
 80032d4:	012e      	lsls	r6, r5, #4
 80032d6:	f7ff ffa1 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 80032da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032e2:	6865      	ldr	r5, [r4, #4]
 80032e4:	00ad      	lsls	r5, r5, #2
 80032e6:	fbb0 f5f5 	udiv	r5, r0, r5
 80032ea:	f7ff ff97 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 80032ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032f6:	6863      	ldr	r3, [r4, #4]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80032fe:	fba7 2303 	umull	r2, r3, r7, r3
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003308:	fb08 5313 	mls	r3, r8, r3, r5
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	3332      	adds	r3, #50	; 0x32
 8003310:	fba7 2303 	umull	r2, r3, r7, r3
 8003314:	095b      	lsrs	r3, r3, #5
 8003316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800331a:	18f5      	adds	r5, r6, r3
 800331c:	f7ff ff7e 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 8003320:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003324:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003328:	6866      	ldr	r6, [r4, #4]
 800332a:	00b6      	lsls	r6, r6, #2
 800332c:	fbb0 f6f6 	udiv	r6, r0, r6
 8003330:	f7ff ff74 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 8003334:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003338:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800333c:	6863      	ldr	r3, [r4, #4]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	fbb0 f0f3 	udiv	r0, r0, r3
 8003344:	fba7 3000 	umull	r3, r0, r7, r0
 8003348:	0940      	lsrs	r0, r0, #5
 800334a:	fb08 6010 	mls	r0, r8, r0, r6
 800334e:	0100      	lsls	r0, r0, #4
 8003350:	3032      	adds	r0, #50	; 0x32
 8003352:	fba7 3700 	umull	r3, r7, r7, r0
 8003356:	f3c7 1743 	ubfx	r7, r7, #5, #4
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	442f      	add	r7, r5
 800335e:	609f      	str	r7, [r3, #8]
    }
  }
}
 8003360:	e109      	b.n	8003576 <UART_SetConfig+0x31a>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	4a85      	ldr	r2, [pc, #532]	; (800357c <UART_SetConfig+0x320>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d05a      	beq.n	8003420 <UART_SetConfig+0x1c4>
 800336a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800336e:	4293      	cmp	r3, r2
 8003370:	d056      	beq.n	8003420 <UART_SetConfig+0x1c4>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003372:	f7ff ff53 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 8003376:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800337a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800337e:	6865      	ldr	r5, [r4, #4]
 8003380:	006d      	lsls	r5, r5, #1
 8003382:	fbb0 f5f5 	udiv	r5, r0, r5
 8003386:	4f7e      	ldr	r7, [pc, #504]	; (8003580 <UART_SetConfig+0x324>)
 8003388:	fba7 3505 	umull	r3, r5, r7, r5
 800338c:	096d      	lsrs	r5, r5, #5
 800338e:	ea4f 1905 	mov.w	r9, r5, lsl #4
 8003392:	f7ff ff43 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 8003396:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800339a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800339e:	6866      	ldr	r6, [r4, #4]
 80033a0:	0076      	lsls	r6, r6, #1
 80033a2:	fbb0 f6f6 	udiv	r6, r0, r6
 80033a6:	f7ff ff39 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 80033aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80033ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80033b2:	6865      	ldr	r5, [r4, #4]
 80033b4:	006d      	lsls	r5, r5, #1
 80033b6:	fbb0 f5f5 	udiv	r5, r0, r5
 80033ba:	fba7 3505 	umull	r3, r5, r7, r5
 80033be:	096d      	lsrs	r5, r5, #5
 80033c0:	f04f 0864 	mov.w	r8, #100	; 0x64
 80033c4:	fb08 6515 	mls	r5, r8, r5, r6
 80033c8:	00ed      	lsls	r5, r5, #3
 80033ca:	3532      	adds	r5, #50	; 0x32
 80033cc:	fba7 3505 	umull	r3, r5, r7, r5
 80033d0:	096d      	lsrs	r5, r5, #5
 80033d2:	006d      	lsls	r5, r5, #1
 80033d4:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80033d8:	444d      	add	r5, r9
 80033da:	f7ff ff1f 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 80033de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80033e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80033e6:	6866      	ldr	r6, [r4, #4]
 80033e8:	0076      	lsls	r6, r6, #1
 80033ea:	fbb0 f6f6 	udiv	r6, r0, r6
 80033ee:	f7ff ff15 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 80033f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80033f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80033fa:	6863      	ldr	r3, [r4, #4]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003402:	fba7 2303 	umull	r2, r3, r7, r3
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	fb08 6313 	mls	r3, r8, r3, r6
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	3332      	adds	r3, #50	; 0x32
 8003410:	fba7 3703 	umull	r3, r7, r7, r3
 8003414:	f3c7 1742 	ubfx	r7, r7, #5, #3
 8003418:	6823      	ldr	r3, [r4, #0]
 800341a:	442f      	add	r7, r5
 800341c:	609f      	str	r7, [r3, #8]
 800341e:	e0aa      	b.n	8003576 <UART_SetConfig+0x31a>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003420:	f7ff ff0c 	bl	800323c <HAL_RCC_GetPCLK2Freq>
 8003424:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003428:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800342c:	6865      	ldr	r5, [r4, #4]
 800342e:	006d      	lsls	r5, r5, #1
 8003430:	fbb0 f5f5 	udiv	r5, r0, r5
 8003434:	4f52      	ldr	r7, [pc, #328]	; (8003580 <UART_SetConfig+0x324>)
 8003436:	fba7 3505 	umull	r3, r5, r7, r5
 800343a:	096d      	lsrs	r5, r5, #5
 800343c:	ea4f 1905 	mov.w	r9, r5, lsl #4
 8003440:	f7ff fefc 	bl	800323c <HAL_RCC_GetPCLK2Freq>
 8003444:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003448:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800344c:	6866      	ldr	r6, [r4, #4]
 800344e:	0076      	lsls	r6, r6, #1
 8003450:	fbb0 f6f6 	udiv	r6, r0, r6
 8003454:	f7ff fef2 	bl	800323c <HAL_RCC_GetPCLK2Freq>
 8003458:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800345c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003460:	6865      	ldr	r5, [r4, #4]
 8003462:	006d      	lsls	r5, r5, #1
 8003464:	fbb0 f5f5 	udiv	r5, r0, r5
 8003468:	fba7 3505 	umull	r3, r5, r7, r5
 800346c:	096d      	lsrs	r5, r5, #5
 800346e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003472:	fb08 6515 	mls	r5, r8, r5, r6
 8003476:	00ed      	lsls	r5, r5, #3
 8003478:	3532      	adds	r5, #50	; 0x32
 800347a:	fba7 3505 	umull	r3, r5, r7, r5
 800347e:	096d      	lsrs	r5, r5, #5
 8003480:	006d      	lsls	r5, r5, #1
 8003482:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 8003486:	444d      	add	r5, r9
 8003488:	f7ff fed8 	bl	800323c <HAL_RCC_GetPCLK2Freq>
 800348c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003490:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003494:	6866      	ldr	r6, [r4, #4]
 8003496:	0076      	lsls	r6, r6, #1
 8003498:	fbb0 f6f6 	udiv	r6, r0, r6
 800349c:	f7ff fece 	bl	800323c <HAL_RCC_GetPCLK2Freq>
 80034a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80034a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80034a8:	6863      	ldr	r3, [r4, #4]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b0:	fba7 2303 	umull	r2, r3, r7, r3
 80034b4:	095b      	lsrs	r3, r3, #5
 80034b6:	fb08 6313 	mls	r3, r8, r3, r6
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	3332      	adds	r3, #50	; 0x32
 80034be:	fba7 3703 	umull	r3, r7, r7, r3
 80034c2:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80034c6:	6823      	ldr	r3, [r4, #0]
 80034c8:	442f      	add	r7, r5
 80034ca:	609f      	str	r7, [r3, #8]
 80034cc:	e053      	b.n	8003576 <UART_SetConfig+0x31a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80034ce:	f7ff feb5 	bl	800323c <HAL_RCC_GetPCLK2Freq>
 80034d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80034d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80034da:	6865      	ldr	r5, [r4, #4]
 80034dc:	00ad      	lsls	r5, r5, #2
 80034de:	fbb0 f5f5 	udiv	r5, r0, r5
 80034e2:	4f27      	ldr	r7, [pc, #156]	; (8003580 <UART_SetConfig+0x324>)
 80034e4:	fba7 3505 	umull	r3, r5, r7, r5
 80034e8:	096d      	lsrs	r5, r5, #5
 80034ea:	012e      	lsls	r6, r5, #4
 80034ec:	f7ff fea6 	bl	800323c <HAL_RCC_GetPCLK2Freq>
 80034f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80034f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80034f8:	6865      	ldr	r5, [r4, #4]
 80034fa:	00ad      	lsls	r5, r5, #2
 80034fc:	fbb0 f5f5 	udiv	r5, r0, r5
 8003500:	f7ff fe9c 	bl	800323c <HAL_RCC_GetPCLK2Freq>
 8003504:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003508:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800350c:	6863      	ldr	r3, [r4, #4]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	fbb0 f3f3 	udiv	r3, r0, r3
 8003514:	fba7 2303 	umull	r2, r3, r7, r3
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800351e:	fb08 5313 	mls	r3, r8, r3, r5
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	3332      	adds	r3, #50	; 0x32
 8003526:	fba7 2303 	umull	r2, r3, r7, r3
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003530:	18f5      	adds	r5, r6, r3
 8003532:	f7ff fe83 	bl	800323c <HAL_RCC_GetPCLK2Freq>
 8003536:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800353a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800353e:	6866      	ldr	r6, [r4, #4]
 8003540:	00b6      	lsls	r6, r6, #2
 8003542:	fbb0 f6f6 	udiv	r6, r0, r6
 8003546:	f7ff fe79 	bl	800323c <HAL_RCC_GetPCLK2Freq>
 800354a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800354e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003552:	6863      	ldr	r3, [r4, #4]
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	fbb0 f0f3 	udiv	r0, r0, r3
 800355a:	fba7 3000 	umull	r3, r0, r7, r0
 800355e:	0940      	lsrs	r0, r0, #5
 8003560:	fb08 6010 	mls	r0, r8, r0, r6
 8003564:	0100      	lsls	r0, r0, #4
 8003566:	3032      	adds	r0, #50	; 0x32
 8003568:	fba7 3700 	umull	r3, r7, r7, r0
 800356c:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	442f      	add	r7, r5
 8003574:	609f      	str	r7, [r3, #8]
}
 8003576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800357a:	bf00      	nop
 800357c:	40011000 	.word	0x40011000
 8003580:	51eb851f 	.word	0x51eb851f

08003584 <UART_WaitOnFlagUntilTimeout>:
{
 8003584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003588:	4605      	mov	r5, r0
 800358a:	460f      	mov	r7, r1
 800358c:	4616      	mov	r6, r2
 800358e:	4699      	mov	r9, r3
 8003590:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003594:	682c      	ldr	r4, [r5, #0]
 8003596:	6824      	ldr	r4, [r4, #0]
 8003598:	ea37 0304 	bics.w	r3, r7, r4
 800359c:	bf0c      	ite	eq
 800359e:	f04f 0c01 	moveq.w	ip, #1
 80035a2:	f04f 0c00 	movne.w	ip, #0
 80035a6:	45b4      	cmp	ip, r6
 80035a8:	d11f      	bne.n	80035ea <UART_WaitOnFlagUntilTimeout+0x66>
    if(Timeout != HAL_MAX_DELAY)
 80035aa:	f1b8 3fff 	cmp.w	r8, #4294967295
 80035ae:	d0f1      	beq.n	8003594 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80035b0:	f1b8 0f00 	cmp.w	r8, #0
 80035b4:	d005      	beq.n	80035c2 <UART_WaitOnFlagUntilTimeout+0x3e>
 80035b6:	f7fe fceb 	bl	8001f90 <HAL_GetTick>
 80035ba:	eba0 0009 	sub.w	r0, r0, r9
 80035be:	4540      	cmp	r0, r8
 80035c0:	d9e8      	bls.n	8003594 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035c2:	682a      	ldr	r2, [r5, #0]
 80035c4:	68d3      	ldr	r3, [r2, #12]
 80035c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035ca:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035cc:	682a      	ldr	r2, [r5, #0]
 80035ce:	6953      	ldr	r3, [r2, #20]
 80035d0:	f023 0301 	bic.w	r3, r3, #1
 80035d4:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80035d6:	2320      	movs	r3, #32
 80035d8:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80035dc:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80035e0:	2300      	movs	r3, #0
 80035e2:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 80035e6:	2003      	movs	r0, #3
 80035e8:	e000      	b.n	80035ec <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 80035ea:	2000      	movs	r0, #0
}
 80035ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080035f0 <HAL_UART_Init>:
  if(huart == NULL)
 80035f0:	b358      	cbz	r0, 800364a <HAL_UART_Init+0x5a>
{
 80035f2:	b510      	push	{r4, lr}
 80035f4:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80035f6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80035fa:	b30b      	cbz	r3, 8003640 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80035fc:	2324      	movs	r3, #36	; 0x24
 80035fe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003602:	6822      	ldr	r2, [r4, #0]
 8003604:	68d3      	ldr	r3, [r2, #12]
 8003606:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800360a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800360c:	4620      	mov	r0, r4
 800360e:	f7ff fe25 	bl	800325c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003612:	6822      	ldr	r2, [r4, #0]
 8003614:	6913      	ldr	r3, [r2, #16]
 8003616:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800361a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800361c:	6822      	ldr	r2, [r4, #0]
 800361e:	6953      	ldr	r3, [r2, #20]
 8003620:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003624:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003626:	6822      	ldr	r2, [r4, #0]
 8003628:	68d3      	ldr	r3, [r2, #12]
 800362a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800362e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003630:	2000      	movs	r0, #0
 8003632:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003634:	2320      	movs	r3, #32
 8003636:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800363a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800363e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003640:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003644:	f7fd fed0 	bl	80013e8 <HAL_UART_MspInit>
 8003648:	e7d8      	b.n	80035fc <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800364a:	2001      	movs	r0, #1
}
 800364c:	4770      	bx	lr

0800364e <HAL_UART_Transmit>:
{
 800364e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8003656:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b20      	cmp	r3, #32
 800365e:	d155      	bne.n	800370c <HAL_UART_Transmit+0xbe>
 8003660:	4604      	mov	r4, r0
 8003662:	460d      	mov	r5, r1
 8003664:	4690      	mov	r8, r2
    if((pData == NULL ) || (Size == 0)) 
 8003666:	2900      	cmp	r1, #0
 8003668:	d054      	beq.n	8003714 <HAL_UART_Transmit+0xc6>
 800366a:	2a00      	cmp	r2, #0
 800366c:	d054      	beq.n	8003718 <HAL_UART_Transmit+0xca>
    __HAL_LOCK(huart);
 800366e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003672:	2b01      	cmp	r3, #1
 8003674:	d052      	beq.n	800371c <HAL_UART_Transmit+0xce>
 8003676:	2301      	movs	r3, #1
 8003678:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800367c:	2300      	movs	r3, #0
 800367e:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003680:	2321      	movs	r3, #33	; 0x21
 8003682:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003686:	f7fe fc83 	bl	8001f90 <HAL_GetTick>
 800368a:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800368c:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003690:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8003694:	e010      	b.n	80036b8 <HAL_UART_Transmit+0x6a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003696:	9600      	str	r6, [sp, #0]
 8003698:	463b      	mov	r3, r7
 800369a:	2200      	movs	r2, #0
 800369c:	2180      	movs	r1, #128	; 0x80
 800369e:	4620      	mov	r0, r4
 80036a0:	f7ff ff70 	bl	8003584 <UART_WaitOnFlagUntilTimeout>
 80036a4:	2800      	cmp	r0, #0
 80036a6:	d13b      	bne.n	8003720 <HAL_UART_Transmit+0xd2>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80036a8:	882b      	ldrh	r3, [r5, #0]
 80036aa:	6822      	ldr	r2, [r4, #0]
 80036ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b0:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80036b2:	6923      	ldr	r3, [r4, #16]
 80036b4:	b9cb      	cbnz	r3, 80036ea <HAL_UART_Transmit+0x9c>
          pData +=2U;
 80036b6:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0U)
 80036b8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	b1bb      	cbz	r3, 80036ee <HAL_UART_Transmit+0xa0>
      huart->TxXferCount--;
 80036be:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80036c0:	b292      	uxth	r2, r2
 80036c2:	3a01      	subs	r2, #1
 80036c4:	b292      	uxth	r2, r2
 80036c6:	84e2      	strh	r2, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036c8:	68a3      	ldr	r3, [r4, #8]
 80036ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ce:	d0e2      	beq.n	8003696 <HAL_UART_Transmit+0x48>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036d0:	9600      	str	r6, [sp, #0]
 80036d2:	463b      	mov	r3, r7
 80036d4:	2200      	movs	r2, #0
 80036d6:	2180      	movs	r1, #128	; 0x80
 80036d8:	4620      	mov	r0, r4
 80036da:	f7ff ff53 	bl	8003584 <UART_WaitOnFlagUntilTimeout>
 80036de:	bb08      	cbnz	r0, 8003724 <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80036e0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80036e4:	6823      	ldr	r3, [r4, #0]
 80036e6:	605a      	str	r2, [r3, #4]
 80036e8:	e7e6      	b.n	80036b8 <HAL_UART_Transmit+0x6a>
          pData +=1U;
 80036ea:	3501      	adds	r5, #1
 80036ec:	e7e4      	b.n	80036b8 <HAL_UART_Transmit+0x6a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036ee:	9600      	str	r6, [sp, #0]
 80036f0:	463b      	mov	r3, r7
 80036f2:	2200      	movs	r2, #0
 80036f4:	2140      	movs	r1, #64	; 0x40
 80036f6:	4620      	mov	r0, r4
 80036f8:	f7ff ff44 	bl	8003584 <UART_WaitOnFlagUntilTimeout>
 80036fc:	b9a0      	cbnz	r0, 8003728 <HAL_UART_Transmit+0xda>
      huart->gState = HAL_UART_STATE_READY;
 80036fe:	2320      	movs	r3, #32
 8003700:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8003704:	2300      	movs	r3, #0
 8003706:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    return HAL_OK;
 800370a:	e000      	b.n	800370e <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 800370c:	2002      	movs	r0, #2
}
 800370e:	b002      	add	sp, #8
 8003710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8003714:	2001      	movs	r0, #1
 8003716:	e7fa      	b.n	800370e <HAL_UART_Transmit+0xc0>
 8003718:	2001      	movs	r0, #1
 800371a:	e7f8      	b.n	800370e <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 800371c:	2002      	movs	r0, #2
 800371e:	e7f6      	b.n	800370e <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8003720:	2003      	movs	r0, #3
 8003722:	e7f4      	b.n	800370e <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8003724:	2003      	movs	r0, #3
 8003726:	e7f2      	b.n	800370e <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8003728:	2003      	movs	r0, #3
 800372a:	e7f0      	b.n	800370e <HAL_UART_Transmit+0xc0>

0800372c <__libc_init_array>:
 800372c:	b570      	push	{r4, r5, r6, lr}
 800372e:	4d0d      	ldr	r5, [pc, #52]	; (8003764 <__libc_init_array+0x38>)
 8003730:	4c0d      	ldr	r4, [pc, #52]	; (8003768 <__libc_init_array+0x3c>)
 8003732:	1b64      	subs	r4, r4, r5
 8003734:	10a4      	asrs	r4, r4, #2
 8003736:	2600      	movs	r6, #0
 8003738:	42a6      	cmp	r6, r4
 800373a:	d109      	bne.n	8003750 <__libc_init_array+0x24>
 800373c:	4d0b      	ldr	r5, [pc, #44]	; (800376c <__libc_init_array+0x40>)
 800373e:	4c0c      	ldr	r4, [pc, #48]	; (8003770 <__libc_init_array+0x44>)
 8003740:	f002 fe0a 	bl	8006358 <_init>
 8003744:	1b64      	subs	r4, r4, r5
 8003746:	10a4      	asrs	r4, r4, #2
 8003748:	2600      	movs	r6, #0
 800374a:	42a6      	cmp	r6, r4
 800374c:	d105      	bne.n	800375a <__libc_init_array+0x2e>
 800374e:	bd70      	pop	{r4, r5, r6, pc}
 8003750:	f855 3b04 	ldr.w	r3, [r5], #4
 8003754:	4798      	blx	r3
 8003756:	3601      	adds	r6, #1
 8003758:	e7ee      	b.n	8003738 <__libc_init_array+0xc>
 800375a:	f855 3b04 	ldr.w	r3, [r5], #4
 800375e:	4798      	blx	r3
 8003760:	3601      	adds	r6, #1
 8003762:	e7f2      	b.n	800374a <__libc_init_array+0x1e>
 8003764:	08006874 	.word	0x08006874
 8003768:	08006874 	.word	0x08006874
 800376c:	08006874 	.word	0x08006874
 8003770:	08006878 	.word	0x08006878

08003774 <memcpy>:
 8003774:	440a      	add	r2, r1
 8003776:	4291      	cmp	r1, r2
 8003778:	f100 33ff 	add.w	r3, r0, #4294967295
 800377c:	d100      	bne.n	8003780 <memcpy+0xc>
 800377e:	4770      	bx	lr
 8003780:	b510      	push	{r4, lr}
 8003782:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003786:	f803 4f01 	strb.w	r4, [r3, #1]!
 800378a:	4291      	cmp	r1, r2
 800378c:	d1f9      	bne.n	8003782 <memcpy+0xe>
 800378e:	bd10      	pop	{r4, pc}

08003790 <memset>:
 8003790:	4402      	add	r2, r0
 8003792:	4603      	mov	r3, r0
 8003794:	4293      	cmp	r3, r2
 8003796:	d100      	bne.n	800379a <memset+0xa>
 8003798:	4770      	bx	lr
 800379a:	f803 1b01 	strb.w	r1, [r3], #1
 800379e:	e7f9      	b.n	8003794 <memset+0x4>

080037a0 <__cvt>:
 80037a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037a4:	ec55 4b10 	vmov	r4, r5, d0
 80037a8:	2d00      	cmp	r5, #0
 80037aa:	460e      	mov	r6, r1
 80037ac:	4619      	mov	r1, r3
 80037ae:	462b      	mov	r3, r5
 80037b0:	bfbb      	ittet	lt
 80037b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80037b6:	461d      	movlt	r5, r3
 80037b8:	2300      	movge	r3, #0
 80037ba:	232d      	movlt	r3, #45	; 0x2d
 80037bc:	700b      	strb	r3, [r1, #0]
 80037be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80037c4:	4691      	mov	r9, r2
 80037c6:	f023 0820 	bic.w	r8, r3, #32
 80037ca:	bfbc      	itt	lt
 80037cc:	4622      	movlt	r2, r4
 80037ce:	4614      	movlt	r4, r2
 80037d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80037d4:	d005      	beq.n	80037e2 <__cvt+0x42>
 80037d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80037da:	d100      	bne.n	80037de <__cvt+0x3e>
 80037dc:	3601      	adds	r6, #1
 80037de:	2102      	movs	r1, #2
 80037e0:	e000      	b.n	80037e4 <__cvt+0x44>
 80037e2:	2103      	movs	r1, #3
 80037e4:	ab03      	add	r3, sp, #12
 80037e6:	9301      	str	r3, [sp, #4]
 80037e8:	ab02      	add	r3, sp, #8
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	ec45 4b10 	vmov	d0, r4, r5
 80037f0:	4653      	mov	r3, sl
 80037f2:	4632      	mov	r2, r6
 80037f4:	f000 fe18 	bl	8004428 <_dtoa_r>
 80037f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80037fc:	4607      	mov	r7, r0
 80037fe:	d102      	bne.n	8003806 <__cvt+0x66>
 8003800:	f019 0f01 	tst.w	r9, #1
 8003804:	d022      	beq.n	800384c <__cvt+0xac>
 8003806:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800380a:	eb07 0906 	add.w	r9, r7, r6
 800380e:	d110      	bne.n	8003832 <__cvt+0x92>
 8003810:	783b      	ldrb	r3, [r7, #0]
 8003812:	2b30      	cmp	r3, #48	; 0x30
 8003814:	d10a      	bne.n	800382c <__cvt+0x8c>
 8003816:	2200      	movs	r2, #0
 8003818:	2300      	movs	r3, #0
 800381a:	4620      	mov	r0, r4
 800381c:	4629      	mov	r1, r5
 800381e:	f7fd f95b 	bl	8000ad8 <__aeabi_dcmpeq>
 8003822:	b918      	cbnz	r0, 800382c <__cvt+0x8c>
 8003824:	f1c6 0601 	rsb	r6, r6, #1
 8003828:	f8ca 6000 	str.w	r6, [sl]
 800382c:	f8da 3000 	ldr.w	r3, [sl]
 8003830:	4499      	add	r9, r3
 8003832:	2200      	movs	r2, #0
 8003834:	2300      	movs	r3, #0
 8003836:	4620      	mov	r0, r4
 8003838:	4629      	mov	r1, r5
 800383a:	f7fd f94d 	bl	8000ad8 <__aeabi_dcmpeq>
 800383e:	b108      	cbz	r0, 8003844 <__cvt+0xa4>
 8003840:	f8cd 900c 	str.w	r9, [sp, #12]
 8003844:	2230      	movs	r2, #48	; 0x30
 8003846:	9b03      	ldr	r3, [sp, #12]
 8003848:	454b      	cmp	r3, r9
 800384a:	d307      	bcc.n	800385c <__cvt+0xbc>
 800384c:	9b03      	ldr	r3, [sp, #12]
 800384e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003850:	1bdb      	subs	r3, r3, r7
 8003852:	4638      	mov	r0, r7
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	b004      	add	sp, #16
 8003858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800385c:	1c59      	adds	r1, r3, #1
 800385e:	9103      	str	r1, [sp, #12]
 8003860:	701a      	strb	r2, [r3, #0]
 8003862:	e7f0      	b.n	8003846 <__cvt+0xa6>

08003864 <__exponent>:
 8003864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003866:	4603      	mov	r3, r0
 8003868:	2900      	cmp	r1, #0
 800386a:	bfb8      	it	lt
 800386c:	4249      	neglt	r1, r1
 800386e:	f803 2b02 	strb.w	r2, [r3], #2
 8003872:	bfb4      	ite	lt
 8003874:	222d      	movlt	r2, #45	; 0x2d
 8003876:	222b      	movge	r2, #43	; 0x2b
 8003878:	2909      	cmp	r1, #9
 800387a:	7042      	strb	r2, [r0, #1]
 800387c:	dd2a      	ble.n	80038d4 <__exponent+0x70>
 800387e:	f10d 0407 	add.w	r4, sp, #7
 8003882:	46a4      	mov	ip, r4
 8003884:	270a      	movs	r7, #10
 8003886:	46a6      	mov	lr, r4
 8003888:	460a      	mov	r2, r1
 800388a:	fb91 f6f7 	sdiv	r6, r1, r7
 800388e:	fb07 1516 	mls	r5, r7, r6, r1
 8003892:	3530      	adds	r5, #48	; 0x30
 8003894:	2a63      	cmp	r2, #99	; 0x63
 8003896:	f104 34ff 	add.w	r4, r4, #4294967295
 800389a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800389e:	4631      	mov	r1, r6
 80038a0:	dcf1      	bgt.n	8003886 <__exponent+0x22>
 80038a2:	3130      	adds	r1, #48	; 0x30
 80038a4:	f1ae 0502 	sub.w	r5, lr, #2
 80038a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80038ac:	1c44      	adds	r4, r0, #1
 80038ae:	4629      	mov	r1, r5
 80038b0:	4561      	cmp	r1, ip
 80038b2:	d30a      	bcc.n	80038ca <__exponent+0x66>
 80038b4:	f10d 0209 	add.w	r2, sp, #9
 80038b8:	eba2 020e 	sub.w	r2, r2, lr
 80038bc:	4565      	cmp	r5, ip
 80038be:	bf88      	it	hi
 80038c0:	2200      	movhi	r2, #0
 80038c2:	4413      	add	r3, r2
 80038c4:	1a18      	subs	r0, r3, r0
 80038c6:	b003      	add	sp, #12
 80038c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 80038d2:	e7ed      	b.n	80038b0 <__exponent+0x4c>
 80038d4:	2330      	movs	r3, #48	; 0x30
 80038d6:	3130      	adds	r1, #48	; 0x30
 80038d8:	7083      	strb	r3, [r0, #2]
 80038da:	70c1      	strb	r1, [r0, #3]
 80038dc:	1d03      	adds	r3, r0, #4
 80038de:	e7f1      	b.n	80038c4 <__exponent+0x60>

080038e0 <_printf_float>:
 80038e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e4:	ed2d 8b02 	vpush	{d8}
 80038e8:	b08d      	sub	sp, #52	; 0x34
 80038ea:	460c      	mov	r4, r1
 80038ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80038f0:	4616      	mov	r6, r2
 80038f2:	461f      	mov	r7, r3
 80038f4:	4605      	mov	r5, r0
 80038f6:	f001 fd3d 	bl	8005374 <_localeconv_r>
 80038fa:	f8d0 a000 	ldr.w	sl, [r0]
 80038fe:	4650      	mov	r0, sl
 8003900:	f7fc fc6e 	bl	80001e0 <strlen>
 8003904:	2300      	movs	r3, #0
 8003906:	930a      	str	r3, [sp, #40]	; 0x28
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	9305      	str	r3, [sp, #20]
 800390c:	f8d8 3000 	ldr.w	r3, [r8]
 8003910:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003914:	3307      	adds	r3, #7
 8003916:	f023 0307 	bic.w	r3, r3, #7
 800391a:	f103 0208 	add.w	r2, r3, #8
 800391e:	f8c8 2000 	str.w	r2, [r8]
 8003922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003926:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800392a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800392e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003932:	9307      	str	r3, [sp, #28]
 8003934:	f8cd 8018 	str.w	r8, [sp, #24]
 8003938:	ee08 0a10 	vmov	s16, r0
 800393c:	4b9f      	ldr	r3, [pc, #636]	; (8003bbc <_printf_float+0x2dc>)
 800393e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003942:	f04f 32ff 	mov.w	r2, #4294967295
 8003946:	f7fd f8f9 	bl	8000b3c <__aeabi_dcmpun>
 800394a:	bb88      	cbnz	r0, 80039b0 <_printf_float+0xd0>
 800394c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003950:	4b9a      	ldr	r3, [pc, #616]	; (8003bbc <_printf_float+0x2dc>)
 8003952:	f04f 32ff 	mov.w	r2, #4294967295
 8003956:	f7fd f8d3 	bl	8000b00 <__aeabi_dcmple>
 800395a:	bb48      	cbnz	r0, 80039b0 <_printf_float+0xd0>
 800395c:	2200      	movs	r2, #0
 800395e:	2300      	movs	r3, #0
 8003960:	4640      	mov	r0, r8
 8003962:	4649      	mov	r1, r9
 8003964:	f7fd f8c2 	bl	8000aec <__aeabi_dcmplt>
 8003968:	b110      	cbz	r0, 8003970 <_printf_float+0x90>
 800396a:	232d      	movs	r3, #45	; 0x2d
 800396c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003970:	4b93      	ldr	r3, [pc, #588]	; (8003bc0 <_printf_float+0x2e0>)
 8003972:	4894      	ldr	r0, [pc, #592]	; (8003bc4 <_printf_float+0x2e4>)
 8003974:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003978:	bf94      	ite	ls
 800397a:	4698      	movls	r8, r3
 800397c:	4680      	movhi	r8, r0
 800397e:	2303      	movs	r3, #3
 8003980:	6123      	str	r3, [r4, #16]
 8003982:	9b05      	ldr	r3, [sp, #20]
 8003984:	f023 0204 	bic.w	r2, r3, #4
 8003988:	6022      	str	r2, [r4, #0]
 800398a:	f04f 0900 	mov.w	r9, #0
 800398e:	9700      	str	r7, [sp, #0]
 8003990:	4633      	mov	r3, r6
 8003992:	aa0b      	add	r2, sp, #44	; 0x2c
 8003994:	4621      	mov	r1, r4
 8003996:	4628      	mov	r0, r5
 8003998:	f000 f9d8 	bl	8003d4c <_printf_common>
 800399c:	3001      	adds	r0, #1
 800399e:	f040 8090 	bne.w	8003ac2 <_printf_float+0x1e2>
 80039a2:	f04f 30ff 	mov.w	r0, #4294967295
 80039a6:	b00d      	add	sp, #52	; 0x34
 80039a8:	ecbd 8b02 	vpop	{d8}
 80039ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039b0:	4642      	mov	r2, r8
 80039b2:	464b      	mov	r3, r9
 80039b4:	4640      	mov	r0, r8
 80039b6:	4649      	mov	r1, r9
 80039b8:	f7fd f8c0 	bl	8000b3c <__aeabi_dcmpun>
 80039bc:	b140      	cbz	r0, 80039d0 <_printf_float+0xf0>
 80039be:	464b      	mov	r3, r9
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bfbc      	itt	lt
 80039c4:	232d      	movlt	r3, #45	; 0x2d
 80039c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80039ca:	487f      	ldr	r0, [pc, #508]	; (8003bc8 <_printf_float+0x2e8>)
 80039cc:	4b7f      	ldr	r3, [pc, #508]	; (8003bcc <_printf_float+0x2ec>)
 80039ce:	e7d1      	b.n	8003974 <_printf_float+0x94>
 80039d0:	6863      	ldr	r3, [r4, #4]
 80039d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80039d6:	9206      	str	r2, [sp, #24]
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	d13f      	bne.n	8003a5c <_printf_float+0x17c>
 80039dc:	2306      	movs	r3, #6
 80039de:	6063      	str	r3, [r4, #4]
 80039e0:	9b05      	ldr	r3, [sp, #20]
 80039e2:	6861      	ldr	r1, [r4, #4]
 80039e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80039e8:	2300      	movs	r3, #0
 80039ea:	9303      	str	r3, [sp, #12]
 80039ec:	ab0a      	add	r3, sp, #40	; 0x28
 80039ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 80039f2:	ab09      	add	r3, sp, #36	; 0x24
 80039f4:	ec49 8b10 	vmov	d0, r8, r9
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	6022      	str	r2, [r4, #0]
 80039fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003a00:	4628      	mov	r0, r5
 8003a02:	f7ff fecd 	bl	80037a0 <__cvt>
 8003a06:	9b06      	ldr	r3, [sp, #24]
 8003a08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a0a:	2b47      	cmp	r3, #71	; 0x47
 8003a0c:	4680      	mov	r8, r0
 8003a0e:	d108      	bne.n	8003a22 <_printf_float+0x142>
 8003a10:	1cc8      	adds	r0, r1, #3
 8003a12:	db02      	blt.n	8003a1a <_printf_float+0x13a>
 8003a14:	6863      	ldr	r3, [r4, #4]
 8003a16:	4299      	cmp	r1, r3
 8003a18:	dd41      	ble.n	8003a9e <_printf_float+0x1be>
 8003a1a:	f1ab 0b02 	sub.w	fp, fp, #2
 8003a1e:	fa5f fb8b 	uxtb.w	fp, fp
 8003a22:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003a26:	d820      	bhi.n	8003a6a <_printf_float+0x18a>
 8003a28:	3901      	subs	r1, #1
 8003a2a:	465a      	mov	r2, fp
 8003a2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a30:	9109      	str	r1, [sp, #36]	; 0x24
 8003a32:	f7ff ff17 	bl	8003864 <__exponent>
 8003a36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a38:	1813      	adds	r3, r2, r0
 8003a3a:	2a01      	cmp	r2, #1
 8003a3c:	4681      	mov	r9, r0
 8003a3e:	6123      	str	r3, [r4, #16]
 8003a40:	dc02      	bgt.n	8003a48 <_printf_float+0x168>
 8003a42:	6822      	ldr	r2, [r4, #0]
 8003a44:	07d2      	lsls	r2, r2, #31
 8003a46:	d501      	bpl.n	8003a4c <_printf_float+0x16c>
 8003a48:	3301      	adds	r3, #1
 8003a4a:	6123      	str	r3, [r4, #16]
 8003a4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d09c      	beq.n	800398e <_printf_float+0xae>
 8003a54:	232d      	movs	r3, #45	; 0x2d
 8003a56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a5a:	e798      	b.n	800398e <_printf_float+0xae>
 8003a5c:	9a06      	ldr	r2, [sp, #24]
 8003a5e:	2a47      	cmp	r2, #71	; 0x47
 8003a60:	d1be      	bne.n	80039e0 <_printf_float+0x100>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1bc      	bne.n	80039e0 <_printf_float+0x100>
 8003a66:	2301      	movs	r3, #1
 8003a68:	e7b9      	b.n	80039de <_printf_float+0xfe>
 8003a6a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003a6e:	d118      	bne.n	8003aa2 <_printf_float+0x1c2>
 8003a70:	2900      	cmp	r1, #0
 8003a72:	6863      	ldr	r3, [r4, #4]
 8003a74:	dd0b      	ble.n	8003a8e <_printf_float+0x1ae>
 8003a76:	6121      	str	r1, [r4, #16]
 8003a78:	b913      	cbnz	r3, 8003a80 <_printf_float+0x1a0>
 8003a7a:	6822      	ldr	r2, [r4, #0]
 8003a7c:	07d0      	lsls	r0, r2, #31
 8003a7e:	d502      	bpl.n	8003a86 <_printf_float+0x1a6>
 8003a80:	3301      	adds	r3, #1
 8003a82:	440b      	add	r3, r1
 8003a84:	6123      	str	r3, [r4, #16]
 8003a86:	65a1      	str	r1, [r4, #88]	; 0x58
 8003a88:	f04f 0900 	mov.w	r9, #0
 8003a8c:	e7de      	b.n	8003a4c <_printf_float+0x16c>
 8003a8e:	b913      	cbnz	r3, 8003a96 <_printf_float+0x1b6>
 8003a90:	6822      	ldr	r2, [r4, #0]
 8003a92:	07d2      	lsls	r2, r2, #31
 8003a94:	d501      	bpl.n	8003a9a <_printf_float+0x1ba>
 8003a96:	3302      	adds	r3, #2
 8003a98:	e7f4      	b.n	8003a84 <_printf_float+0x1a4>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e7f2      	b.n	8003a84 <_printf_float+0x1a4>
 8003a9e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003aa4:	4299      	cmp	r1, r3
 8003aa6:	db05      	blt.n	8003ab4 <_printf_float+0x1d4>
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	6121      	str	r1, [r4, #16]
 8003aac:	07d8      	lsls	r0, r3, #31
 8003aae:	d5ea      	bpl.n	8003a86 <_printf_float+0x1a6>
 8003ab0:	1c4b      	adds	r3, r1, #1
 8003ab2:	e7e7      	b.n	8003a84 <_printf_float+0x1a4>
 8003ab4:	2900      	cmp	r1, #0
 8003ab6:	bfd4      	ite	le
 8003ab8:	f1c1 0202 	rsble	r2, r1, #2
 8003abc:	2201      	movgt	r2, #1
 8003abe:	4413      	add	r3, r2
 8003ac0:	e7e0      	b.n	8003a84 <_printf_float+0x1a4>
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	055a      	lsls	r2, r3, #21
 8003ac6:	d407      	bmi.n	8003ad8 <_printf_float+0x1f8>
 8003ac8:	6923      	ldr	r3, [r4, #16]
 8003aca:	4642      	mov	r2, r8
 8003acc:	4631      	mov	r1, r6
 8003ace:	4628      	mov	r0, r5
 8003ad0:	47b8      	blx	r7
 8003ad2:	3001      	adds	r0, #1
 8003ad4:	d12c      	bne.n	8003b30 <_printf_float+0x250>
 8003ad6:	e764      	b.n	80039a2 <_printf_float+0xc2>
 8003ad8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003adc:	f240 80e0 	bls.w	8003ca0 <_printf_float+0x3c0>
 8003ae0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f7fc fff6 	bl	8000ad8 <__aeabi_dcmpeq>
 8003aec:	2800      	cmp	r0, #0
 8003aee:	d034      	beq.n	8003b5a <_printf_float+0x27a>
 8003af0:	4a37      	ldr	r2, [pc, #220]	; (8003bd0 <_printf_float+0x2f0>)
 8003af2:	2301      	movs	r3, #1
 8003af4:	4631      	mov	r1, r6
 8003af6:	4628      	mov	r0, r5
 8003af8:	47b8      	blx	r7
 8003afa:	3001      	adds	r0, #1
 8003afc:	f43f af51 	beq.w	80039a2 <_printf_float+0xc2>
 8003b00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b04:	429a      	cmp	r2, r3
 8003b06:	db02      	blt.n	8003b0e <_printf_float+0x22e>
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	07d8      	lsls	r0, r3, #31
 8003b0c:	d510      	bpl.n	8003b30 <_printf_float+0x250>
 8003b0e:	ee18 3a10 	vmov	r3, s16
 8003b12:	4652      	mov	r2, sl
 8003b14:	4631      	mov	r1, r6
 8003b16:	4628      	mov	r0, r5
 8003b18:	47b8      	blx	r7
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	f43f af41 	beq.w	80039a2 <_printf_float+0xc2>
 8003b20:	f04f 0800 	mov.w	r8, #0
 8003b24:	f104 091a 	add.w	r9, r4, #26
 8003b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	4543      	cmp	r3, r8
 8003b2e:	dc09      	bgt.n	8003b44 <_printf_float+0x264>
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	079b      	lsls	r3, r3, #30
 8003b34:	f100 8105 	bmi.w	8003d42 <_printf_float+0x462>
 8003b38:	68e0      	ldr	r0, [r4, #12]
 8003b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b3c:	4298      	cmp	r0, r3
 8003b3e:	bfb8      	it	lt
 8003b40:	4618      	movlt	r0, r3
 8003b42:	e730      	b.n	80039a6 <_printf_float+0xc6>
 8003b44:	2301      	movs	r3, #1
 8003b46:	464a      	mov	r2, r9
 8003b48:	4631      	mov	r1, r6
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	47b8      	blx	r7
 8003b4e:	3001      	adds	r0, #1
 8003b50:	f43f af27 	beq.w	80039a2 <_printf_float+0xc2>
 8003b54:	f108 0801 	add.w	r8, r8, #1
 8003b58:	e7e6      	b.n	8003b28 <_printf_float+0x248>
 8003b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	dc39      	bgt.n	8003bd4 <_printf_float+0x2f4>
 8003b60:	4a1b      	ldr	r2, [pc, #108]	; (8003bd0 <_printf_float+0x2f0>)
 8003b62:	2301      	movs	r3, #1
 8003b64:	4631      	mov	r1, r6
 8003b66:	4628      	mov	r0, r5
 8003b68:	47b8      	blx	r7
 8003b6a:	3001      	adds	r0, #1
 8003b6c:	f43f af19 	beq.w	80039a2 <_printf_float+0xc2>
 8003b70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b74:	4313      	orrs	r3, r2
 8003b76:	d102      	bne.n	8003b7e <_printf_float+0x29e>
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	07d9      	lsls	r1, r3, #31
 8003b7c:	d5d8      	bpl.n	8003b30 <_printf_float+0x250>
 8003b7e:	ee18 3a10 	vmov	r3, s16
 8003b82:	4652      	mov	r2, sl
 8003b84:	4631      	mov	r1, r6
 8003b86:	4628      	mov	r0, r5
 8003b88:	47b8      	blx	r7
 8003b8a:	3001      	adds	r0, #1
 8003b8c:	f43f af09 	beq.w	80039a2 <_printf_float+0xc2>
 8003b90:	f04f 0900 	mov.w	r9, #0
 8003b94:	f104 0a1a 	add.w	sl, r4, #26
 8003b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b9a:	425b      	negs	r3, r3
 8003b9c:	454b      	cmp	r3, r9
 8003b9e:	dc01      	bgt.n	8003ba4 <_printf_float+0x2c4>
 8003ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ba2:	e792      	b.n	8003aca <_printf_float+0x1ea>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	4652      	mov	r2, sl
 8003ba8:	4631      	mov	r1, r6
 8003baa:	4628      	mov	r0, r5
 8003bac:	47b8      	blx	r7
 8003bae:	3001      	adds	r0, #1
 8003bb0:	f43f aef7 	beq.w	80039a2 <_printf_float+0xc2>
 8003bb4:	f109 0901 	add.w	r9, r9, #1
 8003bb8:	e7ee      	b.n	8003b98 <_printf_float+0x2b8>
 8003bba:	bf00      	nop
 8003bbc:	7fefffff 	.word	0x7fefffff
 8003bc0:	08006494 	.word	0x08006494
 8003bc4:	08006498 	.word	0x08006498
 8003bc8:	080064a0 	.word	0x080064a0
 8003bcc:	0800649c 	.word	0x0800649c
 8003bd0:	080064a4 	.word	0x080064a4
 8003bd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003bd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	bfa8      	it	ge
 8003bdc:	461a      	movge	r2, r3
 8003bde:	2a00      	cmp	r2, #0
 8003be0:	4691      	mov	r9, r2
 8003be2:	dc37      	bgt.n	8003c54 <_printf_float+0x374>
 8003be4:	f04f 0b00 	mov.w	fp, #0
 8003be8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003bec:	f104 021a 	add.w	r2, r4, #26
 8003bf0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003bf2:	9305      	str	r3, [sp, #20]
 8003bf4:	eba3 0309 	sub.w	r3, r3, r9
 8003bf8:	455b      	cmp	r3, fp
 8003bfa:	dc33      	bgt.n	8003c64 <_printf_float+0x384>
 8003bfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c00:	429a      	cmp	r2, r3
 8003c02:	db3b      	blt.n	8003c7c <_printf_float+0x39c>
 8003c04:	6823      	ldr	r3, [r4, #0]
 8003c06:	07da      	lsls	r2, r3, #31
 8003c08:	d438      	bmi.n	8003c7c <_printf_float+0x39c>
 8003c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c0c:	9a05      	ldr	r2, [sp, #20]
 8003c0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003c10:	1a9a      	subs	r2, r3, r2
 8003c12:	eba3 0901 	sub.w	r9, r3, r1
 8003c16:	4591      	cmp	r9, r2
 8003c18:	bfa8      	it	ge
 8003c1a:	4691      	movge	r9, r2
 8003c1c:	f1b9 0f00 	cmp.w	r9, #0
 8003c20:	dc35      	bgt.n	8003c8e <_printf_float+0x3ae>
 8003c22:	f04f 0800 	mov.w	r8, #0
 8003c26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c2a:	f104 0a1a 	add.w	sl, r4, #26
 8003c2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c32:	1a9b      	subs	r3, r3, r2
 8003c34:	eba3 0309 	sub.w	r3, r3, r9
 8003c38:	4543      	cmp	r3, r8
 8003c3a:	f77f af79 	ble.w	8003b30 <_printf_float+0x250>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	4652      	mov	r2, sl
 8003c42:	4631      	mov	r1, r6
 8003c44:	4628      	mov	r0, r5
 8003c46:	47b8      	blx	r7
 8003c48:	3001      	adds	r0, #1
 8003c4a:	f43f aeaa 	beq.w	80039a2 <_printf_float+0xc2>
 8003c4e:	f108 0801 	add.w	r8, r8, #1
 8003c52:	e7ec      	b.n	8003c2e <_printf_float+0x34e>
 8003c54:	4613      	mov	r3, r2
 8003c56:	4631      	mov	r1, r6
 8003c58:	4642      	mov	r2, r8
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	47b8      	blx	r7
 8003c5e:	3001      	adds	r0, #1
 8003c60:	d1c0      	bne.n	8003be4 <_printf_float+0x304>
 8003c62:	e69e      	b.n	80039a2 <_printf_float+0xc2>
 8003c64:	2301      	movs	r3, #1
 8003c66:	4631      	mov	r1, r6
 8003c68:	4628      	mov	r0, r5
 8003c6a:	9205      	str	r2, [sp, #20]
 8003c6c:	47b8      	blx	r7
 8003c6e:	3001      	adds	r0, #1
 8003c70:	f43f ae97 	beq.w	80039a2 <_printf_float+0xc2>
 8003c74:	9a05      	ldr	r2, [sp, #20]
 8003c76:	f10b 0b01 	add.w	fp, fp, #1
 8003c7a:	e7b9      	b.n	8003bf0 <_printf_float+0x310>
 8003c7c:	ee18 3a10 	vmov	r3, s16
 8003c80:	4652      	mov	r2, sl
 8003c82:	4631      	mov	r1, r6
 8003c84:	4628      	mov	r0, r5
 8003c86:	47b8      	blx	r7
 8003c88:	3001      	adds	r0, #1
 8003c8a:	d1be      	bne.n	8003c0a <_printf_float+0x32a>
 8003c8c:	e689      	b.n	80039a2 <_printf_float+0xc2>
 8003c8e:	9a05      	ldr	r2, [sp, #20]
 8003c90:	464b      	mov	r3, r9
 8003c92:	4442      	add	r2, r8
 8003c94:	4631      	mov	r1, r6
 8003c96:	4628      	mov	r0, r5
 8003c98:	47b8      	blx	r7
 8003c9a:	3001      	adds	r0, #1
 8003c9c:	d1c1      	bne.n	8003c22 <_printf_float+0x342>
 8003c9e:	e680      	b.n	80039a2 <_printf_float+0xc2>
 8003ca0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ca2:	2a01      	cmp	r2, #1
 8003ca4:	dc01      	bgt.n	8003caa <_printf_float+0x3ca>
 8003ca6:	07db      	lsls	r3, r3, #31
 8003ca8:	d538      	bpl.n	8003d1c <_printf_float+0x43c>
 8003caa:	2301      	movs	r3, #1
 8003cac:	4642      	mov	r2, r8
 8003cae:	4631      	mov	r1, r6
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	47b8      	blx	r7
 8003cb4:	3001      	adds	r0, #1
 8003cb6:	f43f ae74 	beq.w	80039a2 <_printf_float+0xc2>
 8003cba:	ee18 3a10 	vmov	r3, s16
 8003cbe:	4652      	mov	r2, sl
 8003cc0:	4631      	mov	r1, r6
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	47b8      	blx	r7
 8003cc6:	3001      	adds	r0, #1
 8003cc8:	f43f ae6b 	beq.w	80039a2 <_printf_float+0xc2>
 8003ccc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f7fc ff00 	bl	8000ad8 <__aeabi_dcmpeq>
 8003cd8:	b9d8      	cbnz	r0, 8003d12 <_printf_float+0x432>
 8003cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cdc:	f108 0201 	add.w	r2, r8, #1
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	4631      	mov	r1, r6
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	47b8      	blx	r7
 8003ce8:	3001      	adds	r0, #1
 8003cea:	d10e      	bne.n	8003d0a <_printf_float+0x42a>
 8003cec:	e659      	b.n	80039a2 <_printf_float+0xc2>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	4652      	mov	r2, sl
 8003cf2:	4631      	mov	r1, r6
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	47b8      	blx	r7
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	f43f ae52 	beq.w	80039a2 <_printf_float+0xc2>
 8003cfe:	f108 0801 	add.w	r8, r8, #1
 8003d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d04:	3b01      	subs	r3, #1
 8003d06:	4543      	cmp	r3, r8
 8003d08:	dcf1      	bgt.n	8003cee <_printf_float+0x40e>
 8003d0a:	464b      	mov	r3, r9
 8003d0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003d10:	e6dc      	b.n	8003acc <_printf_float+0x1ec>
 8003d12:	f04f 0800 	mov.w	r8, #0
 8003d16:	f104 0a1a 	add.w	sl, r4, #26
 8003d1a:	e7f2      	b.n	8003d02 <_printf_float+0x422>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	4642      	mov	r2, r8
 8003d20:	e7df      	b.n	8003ce2 <_printf_float+0x402>
 8003d22:	2301      	movs	r3, #1
 8003d24:	464a      	mov	r2, r9
 8003d26:	4631      	mov	r1, r6
 8003d28:	4628      	mov	r0, r5
 8003d2a:	47b8      	blx	r7
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	f43f ae38 	beq.w	80039a2 <_printf_float+0xc2>
 8003d32:	f108 0801 	add.w	r8, r8, #1
 8003d36:	68e3      	ldr	r3, [r4, #12]
 8003d38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003d3a:	1a5b      	subs	r3, r3, r1
 8003d3c:	4543      	cmp	r3, r8
 8003d3e:	dcf0      	bgt.n	8003d22 <_printf_float+0x442>
 8003d40:	e6fa      	b.n	8003b38 <_printf_float+0x258>
 8003d42:	f04f 0800 	mov.w	r8, #0
 8003d46:	f104 0919 	add.w	r9, r4, #25
 8003d4a:	e7f4      	b.n	8003d36 <_printf_float+0x456>

08003d4c <_printf_common>:
 8003d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d50:	4616      	mov	r6, r2
 8003d52:	4699      	mov	r9, r3
 8003d54:	688a      	ldr	r2, [r1, #8]
 8003d56:	690b      	ldr	r3, [r1, #16]
 8003d58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	bfb8      	it	lt
 8003d60:	4613      	movlt	r3, r2
 8003d62:	6033      	str	r3, [r6, #0]
 8003d64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d68:	4607      	mov	r7, r0
 8003d6a:	460c      	mov	r4, r1
 8003d6c:	b10a      	cbz	r2, 8003d72 <_printf_common+0x26>
 8003d6e:	3301      	adds	r3, #1
 8003d70:	6033      	str	r3, [r6, #0]
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	0699      	lsls	r1, r3, #26
 8003d76:	bf42      	ittt	mi
 8003d78:	6833      	ldrmi	r3, [r6, #0]
 8003d7a:	3302      	addmi	r3, #2
 8003d7c:	6033      	strmi	r3, [r6, #0]
 8003d7e:	6825      	ldr	r5, [r4, #0]
 8003d80:	f015 0506 	ands.w	r5, r5, #6
 8003d84:	d106      	bne.n	8003d94 <_printf_common+0x48>
 8003d86:	f104 0a19 	add.w	sl, r4, #25
 8003d8a:	68e3      	ldr	r3, [r4, #12]
 8003d8c:	6832      	ldr	r2, [r6, #0]
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	42ab      	cmp	r3, r5
 8003d92:	dc26      	bgt.n	8003de2 <_printf_common+0x96>
 8003d94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d98:	1e13      	subs	r3, r2, #0
 8003d9a:	6822      	ldr	r2, [r4, #0]
 8003d9c:	bf18      	it	ne
 8003d9e:	2301      	movne	r3, #1
 8003da0:	0692      	lsls	r2, r2, #26
 8003da2:	d42b      	bmi.n	8003dfc <_printf_common+0xb0>
 8003da4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003da8:	4649      	mov	r1, r9
 8003daa:	4638      	mov	r0, r7
 8003dac:	47c0      	blx	r8
 8003dae:	3001      	adds	r0, #1
 8003db0:	d01e      	beq.n	8003df0 <_printf_common+0xa4>
 8003db2:	6823      	ldr	r3, [r4, #0]
 8003db4:	68e5      	ldr	r5, [r4, #12]
 8003db6:	6832      	ldr	r2, [r6, #0]
 8003db8:	f003 0306 	and.w	r3, r3, #6
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	bf08      	it	eq
 8003dc0:	1aad      	subeq	r5, r5, r2
 8003dc2:	68a3      	ldr	r3, [r4, #8]
 8003dc4:	6922      	ldr	r2, [r4, #16]
 8003dc6:	bf0c      	ite	eq
 8003dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003dcc:	2500      	movne	r5, #0
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	bfc4      	itt	gt
 8003dd2:	1a9b      	subgt	r3, r3, r2
 8003dd4:	18ed      	addgt	r5, r5, r3
 8003dd6:	2600      	movs	r6, #0
 8003dd8:	341a      	adds	r4, #26
 8003dda:	42b5      	cmp	r5, r6
 8003ddc:	d11a      	bne.n	8003e14 <_printf_common+0xc8>
 8003dde:	2000      	movs	r0, #0
 8003de0:	e008      	b.n	8003df4 <_printf_common+0xa8>
 8003de2:	2301      	movs	r3, #1
 8003de4:	4652      	mov	r2, sl
 8003de6:	4649      	mov	r1, r9
 8003de8:	4638      	mov	r0, r7
 8003dea:	47c0      	blx	r8
 8003dec:	3001      	adds	r0, #1
 8003dee:	d103      	bne.n	8003df8 <_printf_common+0xac>
 8003df0:	f04f 30ff 	mov.w	r0, #4294967295
 8003df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df8:	3501      	adds	r5, #1
 8003dfa:	e7c6      	b.n	8003d8a <_printf_common+0x3e>
 8003dfc:	18e1      	adds	r1, r4, r3
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	2030      	movs	r0, #48	; 0x30
 8003e02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e06:	4422      	add	r2, r4
 8003e08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e10:	3302      	adds	r3, #2
 8003e12:	e7c7      	b.n	8003da4 <_printf_common+0x58>
 8003e14:	2301      	movs	r3, #1
 8003e16:	4622      	mov	r2, r4
 8003e18:	4649      	mov	r1, r9
 8003e1a:	4638      	mov	r0, r7
 8003e1c:	47c0      	blx	r8
 8003e1e:	3001      	adds	r0, #1
 8003e20:	d0e6      	beq.n	8003df0 <_printf_common+0xa4>
 8003e22:	3601      	adds	r6, #1
 8003e24:	e7d9      	b.n	8003dda <_printf_common+0x8e>
	...

08003e28 <_printf_i>:
 8003e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e2c:	7e0f      	ldrb	r7, [r1, #24]
 8003e2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e30:	2f78      	cmp	r7, #120	; 0x78
 8003e32:	4691      	mov	r9, r2
 8003e34:	4680      	mov	r8, r0
 8003e36:	460c      	mov	r4, r1
 8003e38:	469a      	mov	sl, r3
 8003e3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e3e:	d807      	bhi.n	8003e50 <_printf_i+0x28>
 8003e40:	2f62      	cmp	r7, #98	; 0x62
 8003e42:	d80a      	bhi.n	8003e5a <_printf_i+0x32>
 8003e44:	2f00      	cmp	r7, #0
 8003e46:	f000 80d8 	beq.w	8003ffa <_printf_i+0x1d2>
 8003e4a:	2f58      	cmp	r7, #88	; 0x58
 8003e4c:	f000 80a3 	beq.w	8003f96 <_printf_i+0x16e>
 8003e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e58:	e03a      	b.n	8003ed0 <_printf_i+0xa8>
 8003e5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e5e:	2b15      	cmp	r3, #21
 8003e60:	d8f6      	bhi.n	8003e50 <_printf_i+0x28>
 8003e62:	a101      	add	r1, pc, #4	; (adr r1, 8003e68 <_printf_i+0x40>)
 8003e64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e68:	08003ec1 	.word	0x08003ec1
 8003e6c:	08003ed5 	.word	0x08003ed5
 8003e70:	08003e51 	.word	0x08003e51
 8003e74:	08003e51 	.word	0x08003e51
 8003e78:	08003e51 	.word	0x08003e51
 8003e7c:	08003e51 	.word	0x08003e51
 8003e80:	08003ed5 	.word	0x08003ed5
 8003e84:	08003e51 	.word	0x08003e51
 8003e88:	08003e51 	.word	0x08003e51
 8003e8c:	08003e51 	.word	0x08003e51
 8003e90:	08003e51 	.word	0x08003e51
 8003e94:	08003fe1 	.word	0x08003fe1
 8003e98:	08003f05 	.word	0x08003f05
 8003e9c:	08003fc3 	.word	0x08003fc3
 8003ea0:	08003e51 	.word	0x08003e51
 8003ea4:	08003e51 	.word	0x08003e51
 8003ea8:	08004003 	.word	0x08004003
 8003eac:	08003e51 	.word	0x08003e51
 8003eb0:	08003f05 	.word	0x08003f05
 8003eb4:	08003e51 	.word	0x08003e51
 8003eb8:	08003e51 	.word	0x08003e51
 8003ebc:	08003fcb 	.word	0x08003fcb
 8003ec0:	682b      	ldr	r3, [r5, #0]
 8003ec2:	1d1a      	adds	r2, r3, #4
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	602a      	str	r2, [r5, #0]
 8003ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ecc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0a3      	b.n	800401c <_printf_i+0x1f4>
 8003ed4:	6820      	ldr	r0, [r4, #0]
 8003ed6:	6829      	ldr	r1, [r5, #0]
 8003ed8:	0606      	lsls	r6, r0, #24
 8003eda:	f101 0304 	add.w	r3, r1, #4
 8003ede:	d50a      	bpl.n	8003ef6 <_printf_i+0xce>
 8003ee0:	680e      	ldr	r6, [r1, #0]
 8003ee2:	602b      	str	r3, [r5, #0]
 8003ee4:	2e00      	cmp	r6, #0
 8003ee6:	da03      	bge.n	8003ef0 <_printf_i+0xc8>
 8003ee8:	232d      	movs	r3, #45	; 0x2d
 8003eea:	4276      	negs	r6, r6
 8003eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ef0:	485e      	ldr	r0, [pc, #376]	; (800406c <_printf_i+0x244>)
 8003ef2:	230a      	movs	r3, #10
 8003ef4:	e019      	b.n	8003f2a <_printf_i+0x102>
 8003ef6:	680e      	ldr	r6, [r1, #0]
 8003ef8:	602b      	str	r3, [r5, #0]
 8003efa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003efe:	bf18      	it	ne
 8003f00:	b236      	sxthne	r6, r6
 8003f02:	e7ef      	b.n	8003ee4 <_printf_i+0xbc>
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	6820      	ldr	r0, [r4, #0]
 8003f08:	1d19      	adds	r1, r3, #4
 8003f0a:	6029      	str	r1, [r5, #0]
 8003f0c:	0601      	lsls	r1, r0, #24
 8003f0e:	d501      	bpl.n	8003f14 <_printf_i+0xec>
 8003f10:	681e      	ldr	r6, [r3, #0]
 8003f12:	e002      	b.n	8003f1a <_printf_i+0xf2>
 8003f14:	0646      	lsls	r6, r0, #25
 8003f16:	d5fb      	bpl.n	8003f10 <_printf_i+0xe8>
 8003f18:	881e      	ldrh	r6, [r3, #0]
 8003f1a:	4854      	ldr	r0, [pc, #336]	; (800406c <_printf_i+0x244>)
 8003f1c:	2f6f      	cmp	r7, #111	; 0x6f
 8003f1e:	bf0c      	ite	eq
 8003f20:	2308      	moveq	r3, #8
 8003f22:	230a      	movne	r3, #10
 8003f24:	2100      	movs	r1, #0
 8003f26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f2a:	6865      	ldr	r5, [r4, #4]
 8003f2c:	60a5      	str	r5, [r4, #8]
 8003f2e:	2d00      	cmp	r5, #0
 8003f30:	bfa2      	ittt	ge
 8003f32:	6821      	ldrge	r1, [r4, #0]
 8003f34:	f021 0104 	bicge.w	r1, r1, #4
 8003f38:	6021      	strge	r1, [r4, #0]
 8003f3a:	b90e      	cbnz	r6, 8003f40 <_printf_i+0x118>
 8003f3c:	2d00      	cmp	r5, #0
 8003f3e:	d04d      	beq.n	8003fdc <_printf_i+0x1b4>
 8003f40:	4615      	mov	r5, r2
 8003f42:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f46:	fb03 6711 	mls	r7, r3, r1, r6
 8003f4a:	5dc7      	ldrb	r7, [r0, r7]
 8003f4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f50:	4637      	mov	r7, r6
 8003f52:	42bb      	cmp	r3, r7
 8003f54:	460e      	mov	r6, r1
 8003f56:	d9f4      	bls.n	8003f42 <_printf_i+0x11a>
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d10b      	bne.n	8003f74 <_printf_i+0x14c>
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	07de      	lsls	r6, r3, #31
 8003f60:	d508      	bpl.n	8003f74 <_printf_i+0x14c>
 8003f62:	6923      	ldr	r3, [r4, #16]
 8003f64:	6861      	ldr	r1, [r4, #4]
 8003f66:	4299      	cmp	r1, r3
 8003f68:	bfde      	ittt	le
 8003f6a:	2330      	movle	r3, #48	; 0x30
 8003f6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f74:	1b52      	subs	r2, r2, r5
 8003f76:	6122      	str	r2, [r4, #16]
 8003f78:	f8cd a000 	str.w	sl, [sp]
 8003f7c:	464b      	mov	r3, r9
 8003f7e:	aa03      	add	r2, sp, #12
 8003f80:	4621      	mov	r1, r4
 8003f82:	4640      	mov	r0, r8
 8003f84:	f7ff fee2 	bl	8003d4c <_printf_common>
 8003f88:	3001      	adds	r0, #1
 8003f8a:	d14c      	bne.n	8004026 <_printf_i+0x1fe>
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f90:	b004      	add	sp, #16
 8003f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f96:	4835      	ldr	r0, [pc, #212]	; (800406c <_printf_i+0x244>)
 8003f98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003f9c:	6829      	ldr	r1, [r5, #0]
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003fa4:	6029      	str	r1, [r5, #0]
 8003fa6:	061d      	lsls	r5, r3, #24
 8003fa8:	d514      	bpl.n	8003fd4 <_printf_i+0x1ac>
 8003faa:	07df      	lsls	r7, r3, #31
 8003fac:	bf44      	itt	mi
 8003fae:	f043 0320 	orrmi.w	r3, r3, #32
 8003fb2:	6023      	strmi	r3, [r4, #0]
 8003fb4:	b91e      	cbnz	r6, 8003fbe <_printf_i+0x196>
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	f023 0320 	bic.w	r3, r3, #32
 8003fbc:	6023      	str	r3, [r4, #0]
 8003fbe:	2310      	movs	r3, #16
 8003fc0:	e7b0      	b.n	8003f24 <_printf_i+0xfc>
 8003fc2:	6823      	ldr	r3, [r4, #0]
 8003fc4:	f043 0320 	orr.w	r3, r3, #32
 8003fc8:	6023      	str	r3, [r4, #0]
 8003fca:	2378      	movs	r3, #120	; 0x78
 8003fcc:	4828      	ldr	r0, [pc, #160]	; (8004070 <_printf_i+0x248>)
 8003fce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fd2:	e7e3      	b.n	8003f9c <_printf_i+0x174>
 8003fd4:	0659      	lsls	r1, r3, #25
 8003fd6:	bf48      	it	mi
 8003fd8:	b2b6      	uxthmi	r6, r6
 8003fda:	e7e6      	b.n	8003faa <_printf_i+0x182>
 8003fdc:	4615      	mov	r5, r2
 8003fde:	e7bb      	b.n	8003f58 <_printf_i+0x130>
 8003fe0:	682b      	ldr	r3, [r5, #0]
 8003fe2:	6826      	ldr	r6, [r4, #0]
 8003fe4:	6961      	ldr	r1, [r4, #20]
 8003fe6:	1d18      	adds	r0, r3, #4
 8003fe8:	6028      	str	r0, [r5, #0]
 8003fea:	0635      	lsls	r5, r6, #24
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	d501      	bpl.n	8003ff4 <_printf_i+0x1cc>
 8003ff0:	6019      	str	r1, [r3, #0]
 8003ff2:	e002      	b.n	8003ffa <_printf_i+0x1d2>
 8003ff4:	0670      	lsls	r0, r6, #25
 8003ff6:	d5fb      	bpl.n	8003ff0 <_printf_i+0x1c8>
 8003ff8:	8019      	strh	r1, [r3, #0]
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	6123      	str	r3, [r4, #16]
 8003ffe:	4615      	mov	r5, r2
 8004000:	e7ba      	b.n	8003f78 <_printf_i+0x150>
 8004002:	682b      	ldr	r3, [r5, #0]
 8004004:	1d1a      	adds	r2, r3, #4
 8004006:	602a      	str	r2, [r5, #0]
 8004008:	681d      	ldr	r5, [r3, #0]
 800400a:	6862      	ldr	r2, [r4, #4]
 800400c:	2100      	movs	r1, #0
 800400e:	4628      	mov	r0, r5
 8004010:	f7fc f8ee 	bl	80001f0 <memchr>
 8004014:	b108      	cbz	r0, 800401a <_printf_i+0x1f2>
 8004016:	1b40      	subs	r0, r0, r5
 8004018:	6060      	str	r0, [r4, #4]
 800401a:	6863      	ldr	r3, [r4, #4]
 800401c:	6123      	str	r3, [r4, #16]
 800401e:	2300      	movs	r3, #0
 8004020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004024:	e7a8      	b.n	8003f78 <_printf_i+0x150>
 8004026:	6923      	ldr	r3, [r4, #16]
 8004028:	462a      	mov	r2, r5
 800402a:	4649      	mov	r1, r9
 800402c:	4640      	mov	r0, r8
 800402e:	47d0      	blx	sl
 8004030:	3001      	adds	r0, #1
 8004032:	d0ab      	beq.n	8003f8c <_printf_i+0x164>
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	079b      	lsls	r3, r3, #30
 8004038:	d413      	bmi.n	8004062 <_printf_i+0x23a>
 800403a:	68e0      	ldr	r0, [r4, #12]
 800403c:	9b03      	ldr	r3, [sp, #12]
 800403e:	4298      	cmp	r0, r3
 8004040:	bfb8      	it	lt
 8004042:	4618      	movlt	r0, r3
 8004044:	e7a4      	b.n	8003f90 <_printf_i+0x168>
 8004046:	2301      	movs	r3, #1
 8004048:	4632      	mov	r2, r6
 800404a:	4649      	mov	r1, r9
 800404c:	4640      	mov	r0, r8
 800404e:	47d0      	blx	sl
 8004050:	3001      	adds	r0, #1
 8004052:	d09b      	beq.n	8003f8c <_printf_i+0x164>
 8004054:	3501      	adds	r5, #1
 8004056:	68e3      	ldr	r3, [r4, #12]
 8004058:	9903      	ldr	r1, [sp, #12]
 800405a:	1a5b      	subs	r3, r3, r1
 800405c:	42ab      	cmp	r3, r5
 800405e:	dcf2      	bgt.n	8004046 <_printf_i+0x21e>
 8004060:	e7eb      	b.n	800403a <_printf_i+0x212>
 8004062:	2500      	movs	r5, #0
 8004064:	f104 0619 	add.w	r6, r4, #25
 8004068:	e7f5      	b.n	8004056 <_printf_i+0x22e>
 800406a:	bf00      	nop
 800406c:	080064a6 	.word	0x080064a6
 8004070:	080064b7 	.word	0x080064b7

08004074 <iprintf>:
 8004074:	b40f      	push	{r0, r1, r2, r3}
 8004076:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <iprintf+0x2c>)
 8004078:	b513      	push	{r0, r1, r4, lr}
 800407a:	681c      	ldr	r4, [r3, #0]
 800407c:	b124      	cbz	r4, 8004088 <iprintf+0x14>
 800407e:	69a3      	ldr	r3, [r4, #24]
 8004080:	b913      	cbnz	r3, 8004088 <iprintf+0x14>
 8004082:	4620      	mov	r0, r4
 8004084:	f001 f8d8 	bl	8005238 <__sinit>
 8004088:	ab05      	add	r3, sp, #20
 800408a:	9a04      	ldr	r2, [sp, #16]
 800408c:	68a1      	ldr	r1, [r4, #8]
 800408e:	9301      	str	r3, [sp, #4]
 8004090:	4620      	mov	r0, r4
 8004092:	f001 fe87 	bl	8005da4 <_vfiprintf_r>
 8004096:	b002      	add	sp, #8
 8004098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800409c:	b004      	add	sp, #16
 800409e:	4770      	bx	lr
 80040a0:	20000010 	.word	0x20000010

080040a4 <_puts_r>:
 80040a4:	b570      	push	{r4, r5, r6, lr}
 80040a6:	460e      	mov	r6, r1
 80040a8:	4605      	mov	r5, r0
 80040aa:	b118      	cbz	r0, 80040b4 <_puts_r+0x10>
 80040ac:	6983      	ldr	r3, [r0, #24]
 80040ae:	b90b      	cbnz	r3, 80040b4 <_puts_r+0x10>
 80040b0:	f001 f8c2 	bl	8005238 <__sinit>
 80040b4:	69ab      	ldr	r3, [r5, #24]
 80040b6:	68ac      	ldr	r4, [r5, #8]
 80040b8:	b913      	cbnz	r3, 80040c0 <_puts_r+0x1c>
 80040ba:	4628      	mov	r0, r5
 80040bc:	f001 f8bc 	bl	8005238 <__sinit>
 80040c0:	4b2c      	ldr	r3, [pc, #176]	; (8004174 <_puts_r+0xd0>)
 80040c2:	429c      	cmp	r4, r3
 80040c4:	d120      	bne.n	8004108 <_puts_r+0x64>
 80040c6:	686c      	ldr	r4, [r5, #4]
 80040c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040ca:	07db      	lsls	r3, r3, #31
 80040cc:	d405      	bmi.n	80040da <_puts_r+0x36>
 80040ce:	89a3      	ldrh	r3, [r4, #12]
 80040d0:	0598      	lsls	r0, r3, #22
 80040d2:	d402      	bmi.n	80040da <_puts_r+0x36>
 80040d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040d6:	f001 f952 	bl	800537e <__retarget_lock_acquire_recursive>
 80040da:	89a3      	ldrh	r3, [r4, #12]
 80040dc:	0719      	lsls	r1, r3, #28
 80040de:	d51d      	bpl.n	800411c <_puts_r+0x78>
 80040e0:	6923      	ldr	r3, [r4, #16]
 80040e2:	b1db      	cbz	r3, 800411c <_puts_r+0x78>
 80040e4:	3e01      	subs	r6, #1
 80040e6:	68a3      	ldr	r3, [r4, #8]
 80040e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040ec:	3b01      	subs	r3, #1
 80040ee:	60a3      	str	r3, [r4, #8]
 80040f0:	bb39      	cbnz	r1, 8004142 <_puts_r+0x9e>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	da38      	bge.n	8004168 <_puts_r+0xc4>
 80040f6:	4622      	mov	r2, r4
 80040f8:	210a      	movs	r1, #10
 80040fa:	4628      	mov	r0, r5
 80040fc:	f000 f848 	bl	8004190 <__swbuf_r>
 8004100:	3001      	adds	r0, #1
 8004102:	d011      	beq.n	8004128 <_puts_r+0x84>
 8004104:	250a      	movs	r5, #10
 8004106:	e011      	b.n	800412c <_puts_r+0x88>
 8004108:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <_puts_r+0xd4>)
 800410a:	429c      	cmp	r4, r3
 800410c:	d101      	bne.n	8004112 <_puts_r+0x6e>
 800410e:	68ac      	ldr	r4, [r5, #8]
 8004110:	e7da      	b.n	80040c8 <_puts_r+0x24>
 8004112:	4b1a      	ldr	r3, [pc, #104]	; (800417c <_puts_r+0xd8>)
 8004114:	429c      	cmp	r4, r3
 8004116:	bf08      	it	eq
 8004118:	68ec      	ldreq	r4, [r5, #12]
 800411a:	e7d5      	b.n	80040c8 <_puts_r+0x24>
 800411c:	4621      	mov	r1, r4
 800411e:	4628      	mov	r0, r5
 8004120:	f000 f888 	bl	8004234 <__swsetup_r>
 8004124:	2800      	cmp	r0, #0
 8004126:	d0dd      	beq.n	80040e4 <_puts_r+0x40>
 8004128:	f04f 35ff 	mov.w	r5, #4294967295
 800412c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800412e:	07da      	lsls	r2, r3, #31
 8004130:	d405      	bmi.n	800413e <_puts_r+0x9a>
 8004132:	89a3      	ldrh	r3, [r4, #12]
 8004134:	059b      	lsls	r3, r3, #22
 8004136:	d402      	bmi.n	800413e <_puts_r+0x9a>
 8004138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800413a:	f001 f921 	bl	8005380 <__retarget_lock_release_recursive>
 800413e:	4628      	mov	r0, r5
 8004140:	bd70      	pop	{r4, r5, r6, pc}
 8004142:	2b00      	cmp	r3, #0
 8004144:	da04      	bge.n	8004150 <_puts_r+0xac>
 8004146:	69a2      	ldr	r2, [r4, #24]
 8004148:	429a      	cmp	r2, r3
 800414a:	dc06      	bgt.n	800415a <_puts_r+0xb6>
 800414c:	290a      	cmp	r1, #10
 800414e:	d004      	beq.n	800415a <_puts_r+0xb6>
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	1c5a      	adds	r2, r3, #1
 8004154:	6022      	str	r2, [r4, #0]
 8004156:	7019      	strb	r1, [r3, #0]
 8004158:	e7c5      	b.n	80040e6 <_puts_r+0x42>
 800415a:	4622      	mov	r2, r4
 800415c:	4628      	mov	r0, r5
 800415e:	f000 f817 	bl	8004190 <__swbuf_r>
 8004162:	3001      	adds	r0, #1
 8004164:	d1bf      	bne.n	80040e6 <_puts_r+0x42>
 8004166:	e7df      	b.n	8004128 <_puts_r+0x84>
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	250a      	movs	r5, #10
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	6022      	str	r2, [r4, #0]
 8004170:	701d      	strb	r5, [r3, #0]
 8004172:	e7db      	b.n	800412c <_puts_r+0x88>
 8004174:	08006578 	.word	0x08006578
 8004178:	08006598 	.word	0x08006598
 800417c:	08006558 	.word	0x08006558

08004180 <puts>:
 8004180:	4b02      	ldr	r3, [pc, #8]	; (800418c <puts+0xc>)
 8004182:	4601      	mov	r1, r0
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	f7ff bf8d 	b.w	80040a4 <_puts_r>
 800418a:	bf00      	nop
 800418c:	20000010 	.word	0x20000010

08004190 <__swbuf_r>:
 8004190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004192:	460e      	mov	r6, r1
 8004194:	4614      	mov	r4, r2
 8004196:	4605      	mov	r5, r0
 8004198:	b118      	cbz	r0, 80041a2 <__swbuf_r+0x12>
 800419a:	6983      	ldr	r3, [r0, #24]
 800419c:	b90b      	cbnz	r3, 80041a2 <__swbuf_r+0x12>
 800419e:	f001 f84b 	bl	8005238 <__sinit>
 80041a2:	4b21      	ldr	r3, [pc, #132]	; (8004228 <__swbuf_r+0x98>)
 80041a4:	429c      	cmp	r4, r3
 80041a6:	d12b      	bne.n	8004200 <__swbuf_r+0x70>
 80041a8:	686c      	ldr	r4, [r5, #4]
 80041aa:	69a3      	ldr	r3, [r4, #24]
 80041ac:	60a3      	str	r3, [r4, #8]
 80041ae:	89a3      	ldrh	r3, [r4, #12]
 80041b0:	071a      	lsls	r2, r3, #28
 80041b2:	d52f      	bpl.n	8004214 <__swbuf_r+0x84>
 80041b4:	6923      	ldr	r3, [r4, #16]
 80041b6:	b36b      	cbz	r3, 8004214 <__swbuf_r+0x84>
 80041b8:	6923      	ldr	r3, [r4, #16]
 80041ba:	6820      	ldr	r0, [r4, #0]
 80041bc:	1ac0      	subs	r0, r0, r3
 80041be:	6963      	ldr	r3, [r4, #20]
 80041c0:	b2f6      	uxtb	r6, r6
 80041c2:	4283      	cmp	r3, r0
 80041c4:	4637      	mov	r7, r6
 80041c6:	dc04      	bgt.n	80041d2 <__swbuf_r+0x42>
 80041c8:	4621      	mov	r1, r4
 80041ca:	4628      	mov	r0, r5
 80041cc:	f000 ffa0 	bl	8005110 <_fflush_r>
 80041d0:	bb30      	cbnz	r0, 8004220 <__swbuf_r+0x90>
 80041d2:	68a3      	ldr	r3, [r4, #8]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	60a3      	str	r3, [r4, #8]
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	6022      	str	r2, [r4, #0]
 80041de:	701e      	strb	r6, [r3, #0]
 80041e0:	6963      	ldr	r3, [r4, #20]
 80041e2:	3001      	adds	r0, #1
 80041e4:	4283      	cmp	r3, r0
 80041e6:	d004      	beq.n	80041f2 <__swbuf_r+0x62>
 80041e8:	89a3      	ldrh	r3, [r4, #12]
 80041ea:	07db      	lsls	r3, r3, #31
 80041ec:	d506      	bpl.n	80041fc <__swbuf_r+0x6c>
 80041ee:	2e0a      	cmp	r6, #10
 80041f0:	d104      	bne.n	80041fc <__swbuf_r+0x6c>
 80041f2:	4621      	mov	r1, r4
 80041f4:	4628      	mov	r0, r5
 80041f6:	f000 ff8b 	bl	8005110 <_fflush_r>
 80041fa:	b988      	cbnz	r0, 8004220 <__swbuf_r+0x90>
 80041fc:	4638      	mov	r0, r7
 80041fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004200:	4b0a      	ldr	r3, [pc, #40]	; (800422c <__swbuf_r+0x9c>)
 8004202:	429c      	cmp	r4, r3
 8004204:	d101      	bne.n	800420a <__swbuf_r+0x7a>
 8004206:	68ac      	ldr	r4, [r5, #8]
 8004208:	e7cf      	b.n	80041aa <__swbuf_r+0x1a>
 800420a:	4b09      	ldr	r3, [pc, #36]	; (8004230 <__swbuf_r+0xa0>)
 800420c:	429c      	cmp	r4, r3
 800420e:	bf08      	it	eq
 8004210:	68ec      	ldreq	r4, [r5, #12]
 8004212:	e7ca      	b.n	80041aa <__swbuf_r+0x1a>
 8004214:	4621      	mov	r1, r4
 8004216:	4628      	mov	r0, r5
 8004218:	f000 f80c 	bl	8004234 <__swsetup_r>
 800421c:	2800      	cmp	r0, #0
 800421e:	d0cb      	beq.n	80041b8 <__swbuf_r+0x28>
 8004220:	f04f 37ff 	mov.w	r7, #4294967295
 8004224:	e7ea      	b.n	80041fc <__swbuf_r+0x6c>
 8004226:	bf00      	nop
 8004228:	08006578 	.word	0x08006578
 800422c:	08006598 	.word	0x08006598
 8004230:	08006558 	.word	0x08006558

08004234 <__swsetup_r>:
 8004234:	4b32      	ldr	r3, [pc, #200]	; (8004300 <__swsetup_r+0xcc>)
 8004236:	b570      	push	{r4, r5, r6, lr}
 8004238:	681d      	ldr	r5, [r3, #0]
 800423a:	4606      	mov	r6, r0
 800423c:	460c      	mov	r4, r1
 800423e:	b125      	cbz	r5, 800424a <__swsetup_r+0x16>
 8004240:	69ab      	ldr	r3, [r5, #24]
 8004242:	b913      	cbnz	r3, 800424a <__swsetup_r+0x16>
 8004244:	4628      	mov	r0, r5
 8004246:	f000 fff7 	bl	8005238 <__sinit>
 800424a:	4b2e      	ldr	r3, [pc, #184]	; (8004304 <__swsetup_r+0xd0>)
 800424c:	429c      	cmp	r4, r3
 800424e:	d10f      	bne.n	8004270 <__swsetup_r+0x3c>
 8004250:	686c      	ldr	r4, [r5, #4]
 8004252:	89a3      	ldrh	r3, [r4, #12]
 8004254:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004258:	0719      	lsls	r1, r3, #28
 800425a:	d42c      	bmi.n	80042b6 <__swsetup_r+0x82>
 800425c:	06dd      	lsls	r5, r3, #27
 800425e:	d411      	bmi.n	8004284 <__swsetup_r+0x50>
 8004260:	2309      	movs	r3, #9
 8004262:	6033      	str	r3, [r6, #0]
 8004264:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004268:	81a3      	strh	r3, [r4, #12]
 800426a:	f04f 30ff 	mov.w	r0, #4294967295
 800426e:	e03e      	b.n	80042ee <__swsetup_r+0xba>
 8004270:	4b25      	ldr	r3, [pc, #148]	; (8004308 <__swsetup_r+0xd4>)
 8004272:	429c      	cmp	r4, r3
 8004274:	d101      	bne.n	800427a <__swsetup_r+0x46>
 8004276:	68ac      	ldr	r4, [r5, #8]
 8004278:	e7eb      	b.n	8004252 <__swsetup_r+0x1e>
 800427a:	4b24      	ldr	r3, [pc, #144]	; (800430c <__swsetup_r+0xd8>)
 800427c:	429c      	cmp	r4, r3
 800427e:	bf08      	it	eq
 8004280:	68ec      	ldreq	r4, [r5, #12]
 8004282:	e7e6      	b.n	8004252 <__swsetup_r+0x1e>
 8004284:	0758      	lsls	r0, r3, #29
 8004286:	d512      	bpl.n	80042ae <__swsetup_r+0x7a>
 8004288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800428a:	b141      	cbz	r1, 800429e <__swsetup_r+0x6a>
 800428c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004290:	4299      	cmp	r1, r3
 8004292:	d002      	beq.n	800429a <__swsetup_r+0x66>
 8004294:	4630      	mov	r0, r6
 8004296:	f001 fc7b 	bl	8005b90 <_free_r>
 800429a:	2300      	movs	r3, #0
 800429c:	6363      	str	r3, [r4, #52]	; 0x34
 800429e:	89a3      	ldrh	r3, [r4, #12]
 80042a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042a4:	81a3      	strh	r3, [r4, #12]
 80042a6:	2300      	movs	r3, #0
 80042a8:	6063      	str	r3, [r4, #4]
 80042aa:	6923      	ldr	r3, [r4, #16]
 80042ac:	6023      	str	r3, [r4, #0]
 80042ae:	89a3      	ldrh	r3, [r4, #12]
 80042b0:	f043 0308 	orr.w	r3, r3, #8
 80042b4:	81a3      	strh	r3, [r4, #12]
 80042b6:	6923      	ldr	r3, [r4, #16]
 80042b8:	b94b      	cbnz	r3, 80042ce <__swsetup_r+0x9a>
 80042ba:	89a3      	ldrh	r3, [r4, #12]
 80042bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c4:	d003      	beq.n	80042ce <__swsetup_r+0x9a>
 80042c6:	4621      	mov	r1, r4
 80042c8:	4630      	mov	r0, r6
 80042ca:	f001 f87f 	bl	80053cc <__smakebuf_r>
 80042ce:	89a0      	ldrh	r0, [r4, #12]
 80042d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042d4:	f010 0301 	ands.w	r3, r0, #1
 80042d8:	d00a      	beq.n	80042f0 <__swsetup_r+0xbc>
 80042da:	2300      	movs	r3, #0
 80042dc:	60a3      	str	r3, [r4, #8]
 80042de:	6963      	ldr	r3, [r4, #20]
 80042e0:	425b      	negs	r3, r3
 80042e2:	61a3      	str	r3, [r4, #24]
 80042e4:	6923      	ldr	r3, [r4, #16]
 80042e6:	b943      	cbnz	r3, 80042fa <__swsetup_r+0xc6>
 80042e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80042ec:	d1ba      	bne.n	8004264 <__swsetup_r+0x30>
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
 80042f0:	0781      	lsls	r1, r0, #30
 80042f2:	bf58      	it	pl
 80042f4:	6963      	ldrpl	r3, [r4, #20]
 80042f6:	60a3      	str	r3, [r4, #8]
 80042f8:	e7f4      	b.n	80042e4 <__swsetup_r+0xb0>
 80042fa:	2000      	movs	r0, #0
 80042fc:	e7f7      	b.n	80042ee <__swsetup_r+0xba>
 80042fe:	bf00      	nop
 8004300:	20000010 	.word	0x20000010
 8004304:	08006578 	.word	0x08006578
 8004308:	08006598 	.word	0x08006598
 800430c:	08006558 	.word	0x08006558

08004310 <quorem>:
 8004310:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004314:	6903      	ldr	r3, [r0, #16]
 8004316:	690c      	ldr	r4, [r1, #16]
 8004318:	42a3      	cmp	r3, r4
 800431a:	4607      	mov	r7, r0
 800431c:	f2c0 8081 	blt.w	8004422 <quorem+0x112>
 8004320:	3c01      	subs	r4, #1
 8004322:	f101 0814 	add.w	r8, r1, #20
 8004326:	f100 0514 	add.w	r5, r0, #20
 800432a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800432e:	9301      	str	r3, [sp, #4]
 8004330:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004334:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004338:	3301      	adds	r3, #1
 800433a:	429a      	cmp	r2, r3
 800433c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004340:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004344:	fbb2 f6f3 	udiv	r6, r2, r3
 8004348:	d331      	bcc.n	80043ae <quorem+0x9e>
 800434a:	f04f 0e00 	mov.w	lr, #0
 800434e:	4640      	mov	r0, r8
 8004350:	46ac      	mov	ip, r5
 8004352:	46f2      	mov	sl, lr
 8004354:	f850 2b04 	ldr.w	r2, [r0], #4
 8004358:	b293      	uxth	r3, r2
 800435a:	fb06 e303 	mla	r3, r6, r3, lr
 800435e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004362:	b29b      	uxth	r3, r3
 8004364:	ebaa 0303 	sub.w	r3, sl, r3
 8004368:	f8dc a000 	ldr.w	sl, [ip]
 800436c:	0c12      	lsrs	r2, r2, #16
 800436e:	fa13 f38a 	uxtah	r3, r3, sl
 8004372:	fb06 e202 	mla	r2, r6, r2, lr
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	9b00      	ldr	r3, [sp, #0]
 800437a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800437e:	b292      	uxth	r2, r2
 8004380:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004384:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004388:	f8bd 3000 	ldrh.w	r3, [sp]
 800438c:	4581      	cmp	r9, r0
 800438e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004392:	f84c 3b04 	str.w	r3, [ip], #4
 8004396:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800439a:	d2db      	bcs.n	8004354 <quorem+0x44>
 800439c:	f855 300b 	ldr.w	r3, [r5, fp]
 80043a0:	b92b      	cbnz	r3, 80043ae <quorem+0x9e>
 80043a2:	9b01      	ldr	r3, [sp, #4]
 80043a4:	3b04      	subs	r3, #4
 80043a6:	429d      	cmp	r5, r3
 80043a8:	461a      	mov	r2, r3
 80043aa:	d32e      	bcc.n	800440a <quorem+0xfa>
 80043ac:	613c      	str	r4, [r7, #16]
 80043ae:	4638      	mov	r0, r7
 80043b0:	f001 fad6 	bl	8005960 <__mcmp>
 80043b4:	2800      	cmp	r0, #0
 80043b6:	db24      	blt.n	8004402 <quorem+0xf2>
 80043b8:	3601      	adds	r6, #1
 80043ba:	4628      	mov	r0, r5
 80043bc:	f04f 0c00 	mov.w	ip, #0
 80043c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80043c4:	f8d0 e000 	ldr.w	lr, [r0]
 80043c8:	b293      	uxth	r3, r2
 80043ca:	ebac 0303 	sub.w	r3, ip, r3
 80043ce:	0c12      	lsrs	r2, r2, #16
 80043d0:	fa13 f38e 	uxtah	r3, r3, lr
 80043d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80043d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80043dc:	b29b      	uxth	r3, r3
 80043de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80043e2:	45c1      	cmp	r9, r8
 80043e4:	f840 3b04 	str.w	r3, [r0], #4
 80043e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80043ec:	d2e8      	bcs.n	80043c0 <quorem+0xb0>
 80043ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043f6:	b922      	cbnz	r2, 8004402 <quorem+0xf2>
 80043f8:	3b04      	subs	r3, #4
 80043fa:	429d      	cmp	r5, r3
 80043fc:	461a      	mov	r2, r3
 80043fe:	d30a      	bcc.n	8004416 <quorem+0x106>
 8004400:	613c      	str	r4, [r7, #16]
 8004402:	4630      	mov	r0, r6
 8004404:	b003      	add	sp, #12
 8004406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800440a:	6812      	ldr	r2, [r2, #0]
 800440c:	3b04      	subs	r3, #4
 800440e:	2a00      	cmp	r2, #0
 8004410:	d1cc      	bne.n	80043ac <quorem+0x9c>
 8004412:	3c01      	subs	r4, #1
 8004414:	e7c7      	b.n	80043a6 <quorem+0x96>
 8004416:	6812      	ldr	r2, [r2, #0]
 8004418:	3b04      	subs	r3, #4
 800441a:	2a00      	cmp	r2, #0
 800441c:	d1f0      	bne.n	8004400 <quorem+0xf0>
 800441e:	3c01      	subs	r4, #1
 8004420:	e7eb      	b.n	80043fa <quorem+0xea>
 8004422:	2000      	movs	r0, #0
 8004424:	e7ee      	b.n	8004404 <quorem+0xf4>
	...

08004428 <_dtoa_r>:
 8004428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800442c:	ed2d 8b04 	vpush	{d8-d9}
 8004430:	ec57 6b10 	vmov	r6, r7, d0
 8004434:	b093      	sub	sp, #76	; 0x4c
 8004436:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004438:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800443c:	9106      	str	r1, [sp, #24]
 800443e:	ee10 aa10 	vmov	sl, s0
 8004442:	4604      	mov	r4, r0
 8004444:	9209      	str	r2, [sp, #36]	; 0x24
 8004446:	930c      	str	r3, [sp, #48]	; 0x30
 8004448:	46bb      	mov	fp, r7
 800444a:	b975      	cbnz	r5, 800446a <_dtoa_r+0x42>
 800444c:	2010      	movs	r0, #16
 800444e:	f000 fffd 	bl	800544c <malloc>
 8004452:	4602      	mov	r2, r0
 8004454:	6260      	str	r0, [r4, #36]	; 0x24
 8004456:	b920      	cbnz	r0, 8004462 <_dtoa_r+0x3a>
 8004458:	4ba7      	ldr	r3, [pc, #668]	; (80046f8 <_dtoa_r+0x2d0>)
 800445a:	21ea      	movs	r1, #234	; 0xea
 800445c:	48a7      	ldr	r0, [pc, #668]	; (80046fc <_dtoa_r+0x2d4>)
 800445e:	f001 fe37 	bl	80060d0 <__assert_func>
 8004462:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004466:	6005      	str	r5, [r0, #0]
 8004468:	60c5      	str	r5, [r0, #12]
 800446a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800446c:	6819      	ldr	r1, [r3, #0]
 800446e:	b151      	cbz	r1, 8004486 <_dtoa_r+0x5e>
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	604a      	str	r2, [r1, #4]
 8004474:	2301      	movs	r3, #1
 8004476:	4093      	lsls	r3, r2
 8004478:	608b      	str	r3, [r1, #8]
 800447a:	4620      	mov	r0, r4
 800447c:	f001 f82e 	bl	80054dc <_Bfree>
 8004480:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	1e3b      	subs	r3, r7, #0
 8004488:	bfaa      	itet	ge
 800448a:	2300      	movge	r3, #0
 800448c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004490:	f8c8 3000 	strge.w	r3, [r8]
 8004494:	4b9a      	ldr	r3, [pc, #616]	; (8004700 <_dtoa_r+0x2d8>)
 8004496:	bfbc      	itt	lt
 8004498:	2201      	movlt	r2, #1
 800449a:	f8c8 2000 	strlt.w	r2, [r8]
 800449e:	ea33 030b 	bics.w	r3, r3, fp
 80044a2:	d11b      	bne.n	80044dc <_dtoa_r+0xb4>
 80044a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80044aa:	6013      	str	r3, [r2, #0]
 80044ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80044b0:	4333      	orrs	r3, r6
 80044b2:	f000 8592 	beq.w	8004fda <_dtoa_r+0xbb2>
 80044b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044b8:	b963      	cbnz	r3, 80044d4 <_dtoa_r+0xac>
 80044ba:	4b92      	ldr	r3, [pc, #584]	; (8004704 <_dtoa_r+0x2dc>)
 80044bc:	e022      	b.n	8004504 <_dtoa_r+0xdc>
 80044be:	4b92      	ldr	r3, [pc, #584]	; (8004708 <_dtoa_r+0x2e0>)
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	3308      	adds	r3, #8
 80044c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	9801      	ldr	r0, [sp, #4]
 80044ca:	b013      	add	sp, #76	; 0x4c
 80044cc:	ecbd 8b04 	vpop	{d8-d9}
 80044d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d4:	4b8b      	ldr	r3, [pc, #556]	; (8004704 <_dtoa_r+0x2dc>)
 80044d6:	9301      	str	r3, [sp, #4]
 80044d8:	3303      	adds	r3, #3
 80044da:	e7f3      	b.n	80044c4 <_dtoa_r+0x9c>
 80044dc:	2200      	movs	r2, #0
 80044de:	2300      	movs	r3, #0
 80044e0:	4650      	mov	r0, sl
 80044e2:	4659      	mov	r1, fp
 80044e4:	f7fc faf8 	bl	8000ad8 <__aeabi_dcmpeq>
 80044e8:	ec4b ab19 	vmov	d9, sl, fp
 80044ec:	4680      	mov	r8, r0
 80044ee:	b158      	cbz	r0, 8004508 <_dtoa_r+0xe0>
 80044f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044f2:	2301      	movs	r3, #1
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 856b 	beq.w	8004fd4 <_dtoa_r+0xbac>
 80044fe:	4883      	ldr	r0, [pc, #524]	; (800470c <_dtoa_r+0x2e4>)
 8004500:	6018      	str	r0, [r3, #0]
 8004502:	1e43      	subs	r3, r0, #1
 8004504:	9301      	str	r3, [sp, #4]
 8004506:	e7df      	b.n	80044c8 <_dtoa_r+0xa0>
 8004508:	ec4b ab10 	vmov	d0, sl, fp
 800450c:	aa10      	add	r2, sp, #64	; 0x40
 800450e:	a911      	add	r1, sp, #68	; 0x44
 8004510:	4620      	mov	r0, r4
 8004512:	f001 facb 	bl	8005aac <__d2b>
 8004516:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800451a:	ee08 0a10 	vmov	s16, r0
 800451e:	2d00      	cmp	r5, #0
 8004520:	f000 8084 	beq.w	800462c <_dtoa_r+0x204>
 8004524:	ee19 3a90 	vmov	r3, s19
 8004528:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800452c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004530:	4656      	mov	r6, sl
 8004532:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004536:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800453a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800453e:	4b74      	ldr	r3, [pc, #464]	; (8004710 <_dtoa_r+0x2e8>)
 8004540:	2200      	movs	r2, #0
 8004542:	4630      	mov	r0, r6
 8004544:	4639      	mov	r1, r7
 8004546:	f7fb fea7 	bl	8000298 <__aeabi_dsub>
 800454a:	a365      	add	r3, pc, #404	; (adr r3, 80046e0 <_dtoa_r+0x2b8>)
 800454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004550:	f7fc f85a 	bl	8000608 <__aeabi_dmul>
 8004554:	a364      	add	r3, pc, #400	; (adr r3, 80046e8 <_dtoa_r+0x2c0>)
 8004556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455a:	f7fb fe9f 	bl	800029c <__adddf3>
 800455e:	4606      	mov	r6, r0
 8004560:	4628      	mov	r0, r5
 8004562:	460f      	mov	r7, r1
 8004564:	f7fb ffe6 	bl	8000534 <__aeabi_i2d>
 8004568:	a361      	add	r3, pc, #388	; (adr r3, 80046f0 <_dtoa_r+0x2c8>)
 800456a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456e:	f7fc f84b 	bl	8000608 <__aeabi_dmul>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4630      	mov	r0, r6
 8004578:	4639      	mov	r1, r7
 800457a:	f7fb fe8f 	bl	800029c <__adddf3>
 800457e:	4606      	mov	r6, r0
 8004580:	460f      	mov	r7, r1
 8004582:	f7fc faf1 	bl	8000b68 <__aeabi_d2iz>
 8004586:	2200      	movs	r2, #0
 8004588:	9000      	str	r0, [sp, #0]
 800458a:	2300      	movs	r3, #0
 800458c:	4630      	mov	r0, r6
 800458e:	4639      	mov	r1, r7
 8004590:	f7fc faac 	bl	8000aec <__aeabi_dcmplt>
 8004594:	b150      	cbz	r0, 80045ac <_dtoa_r+0x184>
 8004596:	9800      	ldr	r0, [sp, #0]
 8004598:	f7fb ffcc 	bl	8000534 <__aeabi_i2d>
 800459c:	4632      	mov	r2, r6
 800459e:	463b      	mov	r3, r7
 80045a0:	f7fc fa9a 	bl	8000ad8 <__aeabi_dcmpeq>
 80045a4:	b910      	cbnz	r0, 80045ac <_dtoa_r+0x184>
 80045a6:	9b00      	ldr	r3, [sp, #0]
 80045a8:	3b01      	subs	r3, #1
 80045aa:	9300      	str	r3, [sp, #0]
 80045ac:	9b00      	ldr	r3, [sp, #0]
 80045ae:	2b16      	cmp	r3, #22
 80045b0:	d85a      	bhi.n	8004668 <_dtoa_r+0x240>
 80045b2:	9a00      	ldr	r2, [sp, #0]
 80045b4:	4b57      	ldr	r3, [pc, #348]	; (8004714 <_dtoa_r+0x2ec>)
 80045b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	ec51 0b19 	vmov	r0, r1, d9
 80045c2:	f7fc fa93 	bl	8000aec <__aeabi_dcmplt>
 80045c6:	2800      	cmp	r0, #0
 80045c8:	d050      	beq.n	800466c <_dtoa_r+0x244>
 80045ca:	9b00      	ldr	r3, [sp, #0]
 80045cc:	3b01      	subs	r3, #1
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	2300      	movs	r3, #0
 80045d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80045d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80045d6:	1b5d      	subs	r5, r3, r5
 80045d8:	1e6b      	subs	r3, r5, #1
 80045da:	9305      	str	r3, [sp, #20]
 80045dc:	bf45      	ittet	mi
 80045de:	f1c5 0301 	rsbmi	r3, r5, #1
 80045e2:	9304      	strmi	r3, [sp, #16]
 80045e4:	2300      	movpl	r3, #0
 80045e6:	2300      	movmi	r3, #0
 80045e8:	bf4c      	ite	mi
 80045ea:	9305      	strmi	r3, [sp, #20]
 80045ec:	9304      	strpl	r3, [sp, #16]
 80045ee:	9b00      	ldr	r3, [sp, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	db3d      	blt.n	8004670 <_dtoa_r+0x248>
 80045f4:	9b05      	ldr	r3, [sp, #20]
 80045f6:	9a00      	ldr	r2, [sp, #0]
 80045f8:	920a      	str	r2, [sp, #40]	; 0x28
 80045fa:	4413      	add	r3, r2
 80045fc:	9305      	str	r3, [sp, #20]
 80045fe:	2300      	movs	r3, #0
 8004600:	9307      	str	r3, [sp, #28]
 8004602:	9b06      	ldr	r3, [sp, #24]
 8004604:	2b09      	cmp	r3, #9
 8004606:	f200 8089 	bhi.w	800471c <_dtoa_r+0x2f4>
 800460a:	2b05      	cmp	r3, #5
 800460c:	bfc4      	itt	gt
 800460e:	3b04      	subgt	r3, #4
 8004610:	9306      	strgt	r3, [sp, #24]
 8004612:	9b06      	ldr	r3, [sp, #24]
 8004614:	f1a3 0302 	sub.w	r3, r3, #2
 8004618:	bfcc      	ite	gt
 800461a:	2500      	movgt	r5, #0
 800461c:	2501      	movle	r5, #1
 800461e:	2b03      	cmp	r3, #3
 8004620:	f200 8087 	bhi.w	8004732 <_dtoa_r+0x30a>
 8004624:	e8df f003 	tbb	[pc, r3]
 8004628:	59383a2d 	.word	0x59383a2d
 800462c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004630:	441d      	add	r5, r3
 8004632:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004636:	2b20      	cmp	r3, #32
 8004638:	bfc1      	itttt	gt
 800463a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800463e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004642:	fa0b f303 	lslgt.w	r3, fp, r3
 8004646:	fa26 f000 	lsrgt.w	r0, r6, r0
 800464a:	bfda      	itte	le
 800464c:	f1c3 0320 	rsble	r3, r3, #32
 8004650:	fa06 f003 	lslle.w	r0, r6, r3
 8004654:	4318      	orrgt	r0, r3
 8004656:	f7fb ff5d 	bl	8000514 <__aeabi_ui2d>
 800465a:	2301      	movs	r3, #1
 800465c:	4606      	mov	r6, r0
 800465e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004662:	3d01      	subs	r5, #1
 8004664:	930e      	str	r3, [sp, #56]	; 0x38
 8004666:	e76a      	b.n	800453e <_dtoa_r+0x116>
 8004668:	2301      	movs	r3, #1
 800466a:	e7b2      	b.n	80045d2 <_dtoa_r+0x1aa>
 800466c:	900b      	str	r0, [sp, #44]	; 0x2c
 800466e:	e7b1      	b.n	80045d4 <_dtoa_r+0x1ac>
 8004670:	9b04      	ldr	r3, [sp, #16]
 8004672:	9a00      	ldr	r2, [sp, #0]
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	9304      	str	r3, [sp, #16]
 8004678:	4253      	negs	r3, r2
 800467a:	9307      	str	r3, [sp, #28]
 800467c:	2300      	movs	r3, #0
 800467e:	930a      	str	r3, [sp, #40]	; 0x28
 8004680:	e7bf      	b.n	8004602 <_dtoa_r+0x1da>
 8004682:	2300      	movs	r3, #0
 8004684:	9308      	str	r3, [sp, #32]
 8004686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004688:	2b00      	cmp	r3, #0
 800468a:	dc55      	bgt.n	8004738 <_dtoa_r+0x310>
 800468c:	2301      	movs	r3, #1
 800468e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004692:	461a      	mov	r2, r3
 8004694:	9209      	str	r2, [sp, #36]	; 0x24
 8004696:	e00c      	b.n	80046b2 <_dtoa_r+0x28a>
 8004698:	2301      	movs	r3, #1
 800469a:	e7f3      	b.n	8004684 <_dtoa_r+0x25c>
 800469c:	2300      	movs	r3, #0
 800469e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046a0:	9308      	str	r3, [sp, #32]
 80046a2:	9b00      	ldr	r3, [sp, #0]
 80046a4:	4413      	add	r3, r2
 80046a6:	9302      	str	r3, [sp, #8]
 80046a8:	3301      	adds	r3, #1
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	9303      	str	r3, [sp, #12]
 80046ae:	bfb8      	it	lt
 80046b0:	2301      	movlt	r3, #1
 80046b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80046b4:	2200      	movs	r2, #0
 80046b6:	6042      	str	r2, [r0, #4]
 80046b8:	2204      	movs	r2, #4
 80046ba:	f102 0614 	add.w	r6, r2, #20
 80046be:	429e      	cmp	r6, r3
 80046c0:	6841      	ldr	r1, [r0, #4]
 80046c2:	d93d      	bls.n	8004740 <_dtoa_r+0x318>
 80046c4:	4620      	mov	r0, r4
 80046c6:	f000 fec9 	bl	800545c <_Balloc>
 80046ca:	9001      	str	r0, [sp, #4]
 80046cc:	2800      	cmp	r0, #0
 80046ce:	d13b      	bne.n	8004748 <_dtoa_r+0x320>
 80046d0:	4b11      	ldr	r3, [pc, #68]	; (8004718 <_dtoa_r+0x2f0>)
 80046d2:	4602      	mov	r2, r0
 80046d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80046d8:	e6c0      	b.n	800445c <_dtoa_r+0x34>
 80046da:	2301      	movs	r3, #1
 80046dc:	e7df      	b.n	800469e <_dtoa_r+0x276>
 80046de:	bf00      	nop
 80046e0:	636f4361 	.word	0x636f4361
 80046e4:	3fd287a7 	.word	0x3fd287a7
 80046e8:	8b60c8b3 	.word	0x8b60c8b3
 80046ec:	3fc68a28 	.word	0x3fc68a28
 80046f0:	509f79fb 	.word	0x509f79fb
 80046f4:	3fd34413 	.word	0x3fd34413
 80046f8:	080064d5 	.word	0x080064d5
 80046fc:	080064ec 	.word	0x080064ec
 8004700:	7ff00000 	.word	0x7ff00000
 8004704:	080064d1 	.word	0x080064d1
 8004708:	080064c8 	.word	0x080064c8
 800470c:	080064a5 	.word	0x080064a5
 8004710:	3ff80000 	.word	0x3ff80000
 8004714:	08006640 	.word	0x08006640
 8004718:	08006547 	.word	0x08006547
 800471c:	2501      	movs	r5, #1
 800471e:	2300      	movs	r3, #0
 8004720:	9306      	str	r3, [sp, #24]
 8004722:	9508      	str	r5, [sp, #32]
 8004724:	f04f 33ff 	mov.w	r3, #4294967295
 8004728:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800472c:	2200      	movs	r2, #0
 800472e:	2312      	movs	r3, #18
 8004730:	e7b0      	b.n	8004694 <_dtoa_r+0x26c>
 8004732:	2301      	movs	r3, #1
 8004734:	9308      	str	r3, [sp, #32]
 8004736:	e7f5      	b.n	8004724 <_dtoa_r+0x2fc>
 8004738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800473a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800473e:	e7b8      	b.n	80046b2 <_dtoa_r+0x28a>
 8004740:	3101      	adds	r1, #1
 8004742:	6041      	str	r1, [r0, #4]
 8004744:	0052      	lsls	r2, r2, #1
 8004746:	e7b8      	b.n	80046ba <_dtoa_r+0x292>
 8004748:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800474a:	9a01      	ldr	r2, [sp, #4]
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	9b03      	ldr	r3, [sp, #12]
 8004750:	2b0e      	cmp	r3, #14
 8004752:	f200 809d 	bhi.w	8004890 <_dtoa_r+0x468>
 8004756:	2d00      	cmp	r5, #0
 8004758:	f000 809a 	beq.w	8004890 <_dtoa_r+0x468>
 800475c:	9b00      	ldr	r3, [sp, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	dd32      	ble.n	80047c8 <_dtoa_r+0x3a0>
 8004762:	4ab7      	ldr	r2, [pc, #732]	; (8004a40 <_dtoa_r+0x618>)
 8004764:	f003 030f 	and.w	r3, r3, #15
 8004768:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800476c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004770:	9b00      	ldr	r3, [sp, #0]
 8004772:	05d8      	lsls	r0, r3, #23
 8004774:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004778:	d516      	bpl.n	80047a8 <_dtoa_r+0x380>
 800477a:	4bb2      	ldr	r3, [pc, #712]	; (8004a44 <_dtoa_r+0x61c>)
 800477c:	ec51 0b19 	vmov	r0, r1, d9
 8004780:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004784:	f7fc f86a 	bl	800085c <__aeabi_ddiv>
 8004788:	f007 070f 	and.w	r7, r7, #15
 800478c:	4682      	mov	sl, r0
 800478e:	468b      	mov	fp, r1
 8004790:	2503      	movs	r5, #3
 8004792:	4eac      	ldr	r6, [pc, #688]	; (8004a44 <_dtoa_r+0x61c>)
 8004794:	b957      	cbnz	r7, 80047ac <_dtoa_r+0x384>
 8004796:	4642      	mov	r2, r8
 8004798:	464b      	mov	r3, r9
 800479a:	4650      	mov	r0, sl
 800479c:	4659      	mov	r1, fp
 800479e:	f7fc f85d 	bl	800085c <__aeabi_ddiv>
 80047a2:	4682      	mov	sl, r0
 80047a4:	468b      	mov	fp, r1
 80047a6:	e028      	b.n	80047fa <_dtoa_r+0x3d2>
 80047a8:	2502      	movs	r5, #2
 80047aa:	e7f2      	b.n	8004792 <_dtoa_r+0x36a>
 80047ac:	07f9      	lsls	r1, r7, #31
 80047ae:	d508      	bpl.n	80047c2 <_dtoa_r+0x39a>
 80047b0:	4640      	mov	r0, r8
 80047b2:	4649      	mov	r1, r9
 80047b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80047b8:	f7fb ff26 	bl	8000608 <__aeabi_dmul>
 80047bc:	3501      	adds	r5, #1
 80047be:	4680      	mov	r8, r0
 80047c0:	4689      	mov	r9, r1
 80047c2:	107f      	asrs	r7, r7, #1
 80047c4:	3608      	adds	r6, #8
 80047c6:	e7e5      	b.n	8004794 <_dtoa_r+0x36c>
 80047c8:	f000 809b 	beq.w	8004902 <_dtoa_r+0x4da>
 80047cc:	9b00      	ldr	r3, [sp, #0]
 80047ce:	4f9d      	ldr	r7, [pc, #628]	; (8004a44 <_dtoa_r+0x61c>)
 80047d0:	425e      	negs	r6, r3
 80047d2:	4b9b      	ldr	r3, [pc, #620]	; (8004a40 <_dtoa_r+0x618>)
 80047d4:	f006 020f 	and.w	r2, r6, #15
 80047d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e0:	ec51 0b19 	vmov	r0, r1, d9
 80047e4:	f7fb ff10 	bl	8000608 <__aeabi_dmul>
 80047e8:	1136      	asrs	r6, r6, #4
 80047ea:	4682      	mov	sl, r0
 80047ec:	468b      	mov	fp, r1
 80047ee:	2300      	movs	r3, #0
 80047f0:	2502      	movs	r5, #2
 80047f2:	2e00      	cmp	r6, #0
 80047f4:	d17a      	bne.n	80048ec <_dtoa_r+0x4c4>
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1d3      	bne.n	80047a2 <_dtoa_r+0x37a>
 80047fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 8082 	beq.w	8004906 <_dtoa_r+0x4de>
 8004802:	4b91      	ldr	r3, [pc, #580]	; (8004a48 <_dtoa_r+0x620>)
 8004804:	2200      	movs	r2, #0
 8004806:	4650      	mov	r0, sl
 8004808:	4659      	mov	r1, fp
 800480a:	f7fc f96f 	bl	8000aec <__aeabi_dcmplt>
 800480e:	2800      	cmp	r0, #0
 8004810:	d079      	beq.n	8004906 <_dtoa_r+0x4de>
 8004812:	9b03      	ldr	r3, [sp, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d076      	beq.n	8004906 <_dtoa_r+0x4de>
 8004818:	9b02      	ldr	r3, [sp, #8]
 800481a:	2b00      	cmp	r3, #0
 800481c:	dd36      	ble.n	800488c <_dtoa_r+0x464>
 800481e:	9b00      	ldr	r3, [sp, #0]
 8004820:	4650      	mov	r0, sl
 8004822:	4659      	mov	r1, fp
 8004824:	1e5f      	subs	r7, r3, #1
 8004826:	2200      	movs	r2, #0
 8004828:	4b88      	ldr	r3, [pc, #544]	; (8004a4c <_dtoa_r+0x624>)
 800482a:	f7fb feed 	bl	8000608 <__aeabi_dmul>
 800482e:	9e02      	ldr	r6, [sp, #8]
 8004830:	4682      	mov	sl, r0
 8004832:	468b      	mov	fp, r1
 8004834:	3501      	adds	r5, #1
 8004836:	4628      	mov	r0, r5
 8004838:	f7fb fe7c 	bl	8000534 <__aeabi_i2d>
 800483c:	4652      	mov	r2, sl
 800483e:	465b      	mov	r3, fp
 8004840:	f7fb fee2 	bl	8000608 <__aeabi_dmul>
 8004844:	4b82      	ldr	r3, [pc, #520]	; (8004a50 <_dtoa_r+0x628>)
 8004846:	2200      	movs	r2, #0
 8004848:	f7fb fd28 	bl	800029c <__adddf3>
 800484c:	46d0      	mov	r8, sl
 800484e:	46d9      	mov	r9, fp
 8004850:	4682      	mov	sl, r0
 8004852:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004856:	2e00      	cmp	r6, #0
 8004858:	d158      	bne.n	800490c <_dtoa_r+0x4e4>
 800485a:	4b7e      	ldr	r3, [pc, #504]	; (8004a54 <_dtoa_r+0x62c>)
 800485c:	2200      	movs	r2, #0
 800485e:	4640      	mov	r0, r8
 8004860:	4649      	mov	r1, r9
 8004862:	f7fb fd19 	bl	8000298 <__aeabi_dsub>
 8004866:	4652      	mov	r2, sl
 8004868:	465b      	mov	r3, fp
 800486a:	4680      	mov	r8, r0
 800486c:	4689      	mov	r9, r1
 800486e:	f7fc f95b 	bl	8000b28 <__aeabi_dcmpgt>
 8004872:	2800      	cmp	r0, #0
 8004874:	f040 8295 	bne.w	8004da2 <_dtoa_r+0x97a>
 8004878:	4652      	mov	r2, sl
 800487a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800487e:	4640      	mov	r0, r8
 8004880:	4649      	mov	r1, r9
 8004882:	f7fc f933 	bl	8000aec <__aeabi_dcmplt>
 8004886:	2800      	cmp	r0, #0
 8004888:	f040 8289 	bne.w	8004d9e <_dtoa_r+0x976>
 800488c:	ec5b ab19 	vmov	sl, fp, d9
 8004890:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004892:	2b00      	cmp	r3, #0
 8004894:	f2c0 8148 	blt.w	8004b28 <_dtoa_r+0x700>
 8004898:	9a00      	ldr	r2, [sp, #0]
 800489a:	2a0e      	cmp	r2, #14
 800489c:	f300 8144 	bgt.w	8004b28 <_dtoa_r+0x700>
 80048a0:	4b67      	ldr	r3, [pc, #412]	; (8004a40 <_dtoa_r+0x618>)
 80048a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80048a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f280 80d5 	bge.w	8004a5c <_dtoa_r+0x634>
 80048b2:	9b03      	ldr	r3, [sp, #12]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f300 80d1 	bgt.w	8004a5c <_dtoa_r+0x634>
 80048ba:	f040 826f 	bne.w	8004d9c <_dtoa_r+0x974>
 80048be:	4b65      	ldr	r3, [pc, #404]	; (8004a54 <_dtoa_r+0x62c>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	4640      	mov	r0, r8
 80048c4:	4649      	mov	r1, r9
 80048c6:	f7fb fe9f 	bl	8000608 <__aeabi_dmul>
 80048ca:	4652      	mov	r2, sl
 80048cc:	465b      	mov	r3, fp
 80048ce:	f7fc f921 	bl	8000b14 <__aeabi_dcmpge>
 80048d2:	9e03      	ldr	r6, [sp, #12]
 80048d4:	4637      	mov	r7, r6
 80048d6:	2800      	cmp	r0, #0
 80048d8:	f040 8245 	bne.w	8004d66 <_dtoa_r+0x93e>
 80048dc:	9d01      	ldr	r5, [sp, #4]
 80048de:	2331      	movs	r3, #49	; 0x31
 80048e0:	f805 3b01 	strb.w	r3, [r5], #1
 80048e4:	9b00      	ldr	r3, [sp, #0]
 80048e6:	3301      	adds	r3, #1
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	e240      	b.n	8004d6e <_dtoa_r+0x946>
 80048ec:	07f2      	lsls	r2, r6, #31
 80048ee:	d505      	bpl.n	80048fc <_dtoa_r+0x4d4>
 80048f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048f4:	f7fb fe88 	bl	8000608 <__aeabi_dmul>
 80048f8:	3501      	adds	r5, #1
 80048fa:	2301      	movs	r3, #1
 80048fc:	1076      	asrs	r6, r6, #1
 80048fe:	3708      	adds	r7, #8
 8004900:	e777      	b.n	80047f2 <_dtoa_r+0x3ca>
 8004902:	2502      	movs	r5, #2
 8004904:	e779      	b.n	80047fa <_dtoa_r+0x3d2>
 8004906:	9f00      	ldr	r7, [sp, #0]
 8004908:	9e03      	ldr	r6, [sp, #12]
 800490a:	e794      	b.n	8004836 <_dtoa_r+0x40e>
 800490c:	9901      	ldr	r1, [sp, #4]
 800490e:	4b4c      	ldr	r3, [pc, #304]	; (8004a40 <_dtoa_r+0x618>)
 8004910:	4431      	add	r1, r6
 8004912:	910d      	str	r1, [sp, #52]	; 0x34
 8004914:	9908      	ldr	r1, [sp, #32]
 8004916:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800491a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800491e:	2900      	cmp	r1, #0
 8004920:	d043      	beq.n	80049aa <_dtoa_r+0x582>
 8004922:	494d      	ldr	r1, [pc, #308]	; (8004a58 <_dtoa_r+0x630>)
 8004924:	2000      	movs	r0, #0
 8004926:	f7fb ff99 	bl	800085c <__aeabi_ddiv>
 800492a:	4652      	mov	r2, sl
 800492c:	465b      	mov	r3, fp
 800492e:	f7fb fcb3 	bl	8000298 <__aeabi_dsub>
 8004932:	9d01      	ldr	r5, [sp, #4]
 8004934:	4682      	mov	sl, r0
 8004936:	468b      	mov	fp, r1
 8004938:	4649      	mov	r1, r9
 800493a:	4640      	mov	r0, r8
 800493c:	f7fc f914 	bl	8000b68 <__aeabi_d2iz>
 8004940:	4606      	mov	r6, r0
 8004942:	f7fb fdf7 	bl	8000534 <__aeabi_i2d>
 8004946:	4602      	mov	r2, r0
 8004948:	460b      	mov	r3, r1
 800494a:	4640      	mov	r0, r8
 800494c:	4649      	mov	r1, r9
 800494e:	f7fb fca3 	bl	8000298 <__aeabi_dsub>
 8004952:	3630      	adds	r6, #48	; 0x30
 8004954:	f805 6b01 	strb.w	r6, [r5], #1
 8004958:	4652      	mov	r2, sl
 800495a:	465b      	mov	r3, fp
 800495c:	4680      	mov	r8, r0
 800495e:	4689      	mov	r9, r1
 8004960:	f7fc f8c4 	bl	8000aec <__aeabi_dcmplt>
 8004964:	2800      	cmp	r0, #0
 8004966:	d163      	bne.n	8004a30 <_dtoa_r+0x608>
 8004968:	4642      	mov	r2, r8
 800496a:	464b      	mov	r3, r9
 800496c:	4936      	ldr	r1, [pc, #216]	; (8004a48 <_dtoa_r+0x620>)
 800496e:	2000      	movs	r0, #0
 8004970:	f7fb fc92 	bl	8000298 <__aeabi_dsub>
 8004974:	4652      	mov	r2, sl
 8004976:	465b      	mov	r3, fp
 8004978:	f7fc f8b8 	bl	8000aec <__aeabi_dcmplt>
 800497c:	2800      	cmp	r0, #0
 800497e:	f040 80b5 	bne.w	8004aec <_dtoa_r+0x6c4>
 8004982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004984:	429d      	cmp	r5, r3
 8004986:	d081      	beq.n	800488c <_dtoa_r+0x464>
 8004988:	4b30      	ldr	r3, [pc, #192]	; (8004a4c <_dtoa_r+0x624>)
 800498a:	2200      	movs	r2, #0
 800498c:	4650      	mov	r0, sl
 800498e:	4659      	mov	r1, fp
 8004990:	f7fb fe3a 	bl	8000608 <__aeabi_dmul>
 8004994:	4b2d      	ldr	r3, [pc, #180]	; (8004a4c <_dtoa_r+0x624>)
 8004996:	4682      	mov	sl, r0
 8004998:	468b      	mov	fp, r1
 800499a:	4640      	mov	r0, r8
 800499c:	4649      	mov	r1, r9
 800499e:	2200      	movs	r2, #0
 80049a0:	f7fb fe32 	bl	8000608 <__aeabi_dmul>
 80049a4:	4680      	mov	r8, r0
 80049a6:	4689      	mov	r9, r1
 80049a8:	e7c6      	b.n	8004938 <_dtoa_r+0x510>
 80049aa:	4650      	mov	r0, sl
 80049ac:	4659      	mov	r1, fp
 80049ae:	f7fb fe2b 	bl	8000608 <__aeabi_dmul>
 80049b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049b4:	9d01      	ldr	r5, [sp, #4]
 80049b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80049b8:	4682      	mov	sl, r0
 80049ba:	468b      	mov	fp, r1
 80049bc:	4649      	mov	r1, r9
 80049be:	4640      	mov	r0, r8
 80049c0:	f7fc f8d2 	bl	8000b68 <__aeabi_d2iz>
 80049c4:	4606      	mov	r6, r0
 80049c6:	f7fb fdb5 	bl	8000534 <__aeabi_i2d>
 80049ca:	3630      	adds	r6, #48	; 0x30
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4640      	mov	r0, r8
 80049d2:	4649      	mov	r1, r9
 80049d4:	f7fb fc60 	bl	8000298 <__aeabi_dsub>
 80049d8:	f805 6b01 	strb.w	r6, [r5], #1
 80049dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049de:	429d      	cmp	r5, r3
 80049e0:	4680      	mov	r8, r0
 80049e2:	4689      	mov	r9, r1
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	d124      	bne.n	8004a34 <_dtoa_r+0x60c>
 80049ea:	4b1b      	ldr	r3, [pc, #108]	; (8004a58 <_dtoa_r+0x630>)
 80049ec:	4650      	mov	r0, sl
 80049ee:	4659      	mov	r1, fp
 80049f0:	f7fb fc54 	bl	800029c <__adddf3>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4640      	mov	r0, r8
 80049fa:	4649      	mov	r1, r9
 80049fc:	f7fc f894 	bl	8000b28 <__aeabi_dcmpgt>
 8004a00:	2800      	cmp	r0, #0
 8004a02:	d173      	bne.n	8004aec <_dtoa_r+0x6c4>
 8004a04:	4652      	mov	r2, sl
 8004a06:	465b      	mov	r3, fp
 8004a08:	4913      	ldr	r1, [pc, #76]	; (8004a58 <_dtoa_r+0x630>)
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	f7fb fc44 	bl	8000298 <__aeabi_dsub>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4640      	mov	r0, r8
 8004a16:	4649      	mov	r1, r9
 8004a18:	f7fc f868 	bl	8000aec <__aeabi_dcmplt>
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	f43f af35 	beq.w	800488c <_dtoa_r+0x464>
 8004a22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004a24:	1e6b      	subs	r3, r5, #1
 8004a26:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004a2c:	2b30      	cmp	r3, #48	; 0x30
 8004a2e:	d0f8      	beq.n	8004a22 <_dtoa_r+0x5fa>
 8004a30:	9700      	str	r7, [sp, #0]
 8004a32:	e049      	b.n	8004ac8 <_dtoa_r+0x6a0>
 8004a34:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <_dtoa_r+0x624>)
 8004a36:	f7fb fde7 	bl	8000608 <__aeabi_dmul>
 8004a3a:	4680      	mov	r8, r0
 8004a3c:	4689      	mov	r9, r1
 8004a3e:	e7bd      	b.n	80049bc <_dtoa_r+0x594>
 8004a40:	08006640 	.word	0x08006640
 8004a44:	08006618 	.word	0x08006618
 8004a48:	3ff00000 	.word	0x3ff00000
 8004a4c:	40240000 	.word	0x40240000
 8004a50:	401c0000 	.word	0x401c0000
 8004a54:	40140000 	.word	0x40140000
 8004a58:	3fe00000 	.word	0x3fe00000
 8004a5c:	9d01      	ldr	r5, [sp, #4]
 8004a5e:	4656      	mov	r6, sl
 8004a60:	465f      	mov	r7, fp
 8004a62:	4642      	mov	r2, r8
 8004a64:	464b      	mov	r3, r9
 8004a66:	4630      	mov	r0, r6
 8004a68:	4639      	mov	r1, r7
 8004a6a:	f7fb fef7 	bl	800085c <__aeabi_ddiv>
 8004a6e:	f7fc f87b 	bl	8000b68 <__aeabi_d2iz>
 8004a72:	4682      	mov	sl, r0
 8004a74:	f7fb fd5e 	bl	8000534 <__aeabi_i2d>
 8004a78:	4642      	mov	r2, r8
 8004a7a:	464b      	mov	r3, r9
 8004a7c:	f7fb fdc4 	bl	8000608 <__aeabi_dmul>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4630      	mov	r0, r6
 8004a86:	4639      	mov	r1, r7
 8004a88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004a8c:	f7fb fc04 	bl	8000298 <__aeabi_dsub>
 8004a90:	f805 6b01 	strb.w	r6, [r5], #1
 8004a94:	9e01      	ldr	r6, [sp, #4]
 8004a96:	9f03      	ldr	r7, [sp, #12]
 8004a98:	1bae      	subs	r6, r5, r6
 8004a9a:	42b7      	cmp	r7, r6
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	d135      	bne.n	8004b0e <_dtoa_r+0x6e6>
 8004aa2:	f7fb fbfb 	bl	800029c <__adddf3>
 8004aa6:	4642      	mov	r2, r8
 8004aa8:	464b      	mov	r3, r9
 8004aaa:	4606      	mov	r6, r0
 8004aac:	460f      	mov	r7, r1
 8004aae:	f7fc f83b 	bl	8000b28 <__aeabi_dcmpgt>
 8004ab2:	b9d0      	cbnz	r0, 8004aea <_dtoa_r+0x6c2>
 8004ab4:	4642      	mov	r2, r8
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	4630      	mov	r0, r6
 8004aba:	4639      	mov	r1, r7
 8004abc:	f7fc f80c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ac0:	b110      	cbz	r0, 8004ac8 <_dtoa_r+0x6a0>
 8004ac2:	f01a 0f01 	tst.w	sl, #1
 8004ac6:	d110      	bne.n	8004aea <_dtoa_r+0x6c2>
 8004ac8:	4620      	mov	r0, r4
 8004aca:	ee18 1a10 	vmov	r1, s16
 8004ace:	f000 fd05 	bl	80054dc <_Bfree>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	9800      	ldr	r0, [sp, #0]
 8004ad6:	702b      	strb	r3, [r5, #0]
 8004ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ada:	3001      	adds	r0, #1
 8004adc:	6018      	str	r0, [r3, #0]
 8004ade:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f43f acf1 	beq.w	80044c8 <_dtoa_r+0xa0>
 8004ae6:	601d      	str	r5, [r3, #0]
 8004ae8:	e4ee      	b.n	80044c8 <_dtoa_r+0xa0>
 8004aea:	9f00      	ldr	r7, [sp, #0]
 8004aec:	462b      	mov	r3, r5
 8004aee:	461d      	mov	r5, r3
 8004af0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004af4:	2a39      	cmp	r2, #57	; 0x39
 8004af6:	d106      	bne.n	8004b06 <_dtoa_r+0x6de>
 8004af8:	9a01      	ldr	r2, [sp, #4]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d1f7      	bne.n	8004aee <_dtoa_r+0x6c6>
 8004afe:	9901      	ldr	r1, [sp, #4]
 8004b00:	2230      	movs	r2, #48	; 0x30
 8004b02:	3701      	adds	r7, #1
 8004b04:	700a      	strb	r2, [r1, #0]
 8004b06:	781a      	ldrb	r2, [r3, #0]
 8004b08:	3201      	adds	r2, #1
 8004b0a:	701a      	strb	r2, [r3, #0]
 8004b0c:	e790      	b.n	8004a30 <_dtoa_r+0x608>
 8004b0e:	4ba6      	ldr	r3, [pc, #664]	; (8004da8 <_dtoa_r+0x980>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	f7fb fd79 	bl	8000608 <__aeabi_dmul>
 8004b16:	2200      	movs	r2, #0
 8004b18:	2300      	movs	r3, #0
 8004b1a:	4606      	mov	r6, r0
 8004b1c:	460f      	mov	r7, r1
 8004b1e:	f7fb ffdb 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b22:	2800      	cmp	r0, #0
 8004b24:	d09d      	beq.n	8004a62 <_dtoa_r+0x63a>
 8004b26:	e7cf      	b.n	8004ac8 <_dtoa_r+0x6a0>
 8004b28:	9a08      	ldr	r2, [sp, #32]
 8004b2a:	2a00      	cmp	r2, #0
 8004b2c:	f000 80d7 	beq.w	8004cde <_dtoa_r+0x8b6>
 8004b30:	9a06      	ldr	r2, [sp, #24]
 8004b32:	2a01      	cmp	r2, #1
 8004b34:	f300 80ba 	bgt.w	8004cac <_dtoa_r+0x884>
 8004b38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b3a:	2a00      	cmp	r2, #0
 8004b3c:	f000 80b2 	beq.w	8004ca4 <_dtoa_r+0x87c>
 8004b40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004b44:	9e07      	ldr	r6, [sp, #28]
 8004b46:	9d04      	ldr	r5, [sp, #16]
 8004b48:	9a04      	ldr	r2, [sp, #16]
 8004b4a:	441a      	add	r2, r3
 8004b4c:	9204      	str	r2, [sp, #16]
 8004b4e:	9a05      	ldr	r2, [sp, #20]
 8004b50:	2101      	movs	r1, #1
 8004b52:	441a      	add	r2, r3
 8004b54:	4620      	mov	r0, r4
 8004b56:	9205      	str	r2, [sp, #20]
 8004b58:	f000 fd78 	bl	800564c <__i2b>
 8004b5c:	4607      	mov	r7, r0
 8004b5e:	2d00      	cmp	r5, #0
 8004b60:	dd0c      	ble.n	8004b7c <_dtoa_r+0x754>
 8004b62:	9b05      	ldr	r3, [sp, #20]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	dd09      	ble.n	8004b7c <_dtoa_r+0x754>
 8004b68:	42ab      	cmp	r3, r5
 8004b6a:	9a04      	ldr	r2, [sp, #16]
 8004b6c:	bfa8      	it	ge
 8004b6e:	462b      	movge	r3, r5
 8004b70:	1ad2      	subs	r2, r2, r3
 8004b72:	9204      	str	r2, [sp, #16]
 8004b74:	9a05      	ldr	r2, [sp, #20]
 8004b76:	1aed      	subs	r5, r5, r3
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	9305      	str	r3, [sp, #20]
 8004b7c:	9b07      	ldr	r3, [sp, #28]
 8004b7e:	b31b      	cbz	r3, 8004bc8 <_dtoa_r+0x7a0>
 8004b80:	9b08      	ldr	r3, [sp, #32]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 80af 	beq.w	8004ce6 <_dtoa_r+0x8be>
 8004b88:	2e00      	cmp	r6, #0
 8004b8a:	dd13      	ble.n	8004bb4 <_dtoa_r+0x78c>
 8004b8c:	4639      	mov	r1, r7
 8004b8e:	4632      	mov	r2, r6
 8004b90:	4620      	mov	r0, r4
 8004b92:	f000 fe1b 	bl	80057cc <__pow5mult>
 8004b96:	ee18 2a10 	vmov	r2, s16
 8004b9a:	4601      	mov	r1, r0
 8004b9c:	4607      	mov	r7, r0
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	f000 fd6a 	bl	8005678 <__multiply>
 8004ba4:	ee18 1a10 	vmov	r1, s16
 8004ba8:	4680      	mov	r8, r0
 8004baa:	4620      	mov	r0, r4
 8004bac:	f000 fc96 	bl	80054dc <_Bfree>
 8004bb0:	ee08 8a10 	vmov	s16, r8
 8004bb4:	9b07      	ldr	r3, [sp, #28]
 8004bb6:	1b9a      	subs	r2, r3, r6
 8004bb8:	d006      	beq.n	8004bc8 <_dtoa_r+0x7a0>
 8004bba:	ee18 1a10 	vmov	r1, s16
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f000 fe04 	bl	80057cc <__pow5mult>
 8004bc4:	ee08 0a10 	vmov	s16, r0
 8004bc8:	2101      	movs	r1, #1
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f000 fd3e 	bl	800564c <__i2b>
 8004bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	4606      	mov	r6, r0
 8004bd6:	f340 8088 	ble.w	8004cea <_dtoa_r+0x8c2>
 8004bda:	461a      	mov	r2, r3
 8004bdc:	4601      	mov	r1, r0
 8004bde:	4620      	mov	r0, r4
 8004be0:	f000 fdf4 	bl	80057cc <__pow5mult>
 8004be4:	9b06      	ldr	r3, [sp, #24]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	4606      	mov	r6, r0
 8004bea:	f340 8081 	ble.w	8004cf0 <_dtoa_r+0x8c8>
 8004bee:	f04f 0800 	mov.w	r8, #0
 8004bf2:	6933      	ldr	r3, [r6, #16]
 8004bf4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004bf8:	6918      	ldr	r0, [r3, #16]
 8004bfa:	f000 fcd7 	bl	80055ac <__hi0bits>
 8004bfe:	f1c0 0020 	rsb	r0, r0, #32
 8004c02:	9b05      	ldr	r3, [sp, #20]
 8004c04:	4418      	add	r0, r3
 8004c06:	f010 001f 	ands.w	r0, r0, #31
 8004c0a:	f000 8092 	beq.w	8004d32 <_dtoa_r+0x90a>
 8004c0e:	f1c0 0320 	rsb	r3, r0, #32
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	f340 808a 	ble.w	8004d2c <_dtoa_r+0x904>
 8004c18:	f1c0 001c 	rsb	r0, r0, #28
 8004c1c:	9b04      	ldr	r3, [sp, #16]
 8004c1e:	4403      	add	r3, r0
 8004c20:	9304      	str	r3, [sp, #16]
 8004c22:	9b05      	ldr	r3, [sp, #20]
 8004c24:	4403      	add	r3, r0
 8004c26:	4405      	add	r5, r0
 8004c28:	9305      	str	r3, [sp, #20]
 8004c2a:	9b04      	ldr	r3, [sp, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	dd07      	ble.n	8004c40 <_dtoa_r+0x818>
 8004c30:	ee18 1a10 	vmov	r1, s16
 8004c34:	461a      	mov	r2, r3
 8004c36:	4620      	mov	r0, r4
 8004c38:	f000 fe22 	bl	8005880 <__lshift>
 8004c3c:	ee08 0a10 	vmov	s16, r0
 8004c40:	9b05      	ldr	r3, [sp, #20]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	dd05      	ble.n	8004c52 <_dtoa_r+0x82a>
 8004c46:	4631      	mov	r1, r6
 8004c48:	461a      	mov	r2, r3
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	f000 fe18 	bl	8005880 <__lshift>
 8004c50:	4606      	mov	r6, r0
 8004c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d06e      	beq.n	8004d36 <_dtoa_r+0x90e>
 8004c58:	ee18 0a10 	vmov	r0, s16
 8004c5c:	4631      	mov	r1, r6
 8004c5e:	f000 fe7f 	bl	8005960 <__mcmp>
 8004c62:	2800      	cmp	r0, #0
 8004c64:	da67      	bge.n	8004d36 <_dtoa_r+0x90e>
 8004c66:	9b00      	ldr	r3, [sp, #0]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	ee18 1a10 	vmov	r1, s16
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	220a      	movs	r2, #10
 8004c72:	2300      	movs	r3, #0
 8004c74:	4620      	mov	r0, r4
 8004c76:	f000 fc53 	bl	8005520 <__multadd>
 8004c7a:	9b08      	ldr	r3, [sp, #32]
 8004c7c:	ee08 0a10 	vmov	s16, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 81b1 	beq.w	8004fe8 <_dtoa_r+0xbc0>
 8004c86:	2300      	movs	r3, #0
 8004c88:	4639      	mov	r1, r7
 8004c8a:	220a      	movs	r2, #10
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	f000 fc47 	bl	8005520 <__multadd>
 8004c92:	9b02      	ldr	r3, [sp, #8]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	4607      	mov	r7, r0
 8004c98:	f300 808e 	bgt.w	8004db8 <_dtoa_r+0x990>
 8004c9c:	9b06      	ldr	r3, [sp, #24]
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	dc51      	bgt.n	8004d46 <_dtoa_r+0x91e>
 8004ca2:	e089      	b.n	8004db8 <_dtoa_r+0x990>
 8004ca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ca6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004caa:	e74b      	b.n	8004b44 <_dtoa_r+0x71c>
 8004cac:	9b03      	ldr	r3, [sp, #12]
 8004cae:	1e5e      	subs	r6, r3, #1
 8004cb0:	9b07      	ldr	r3, [sp, #28]
 8004cb2:	42b3      	cmp	r3, r6
 8004cb4:	bfbf      	itttt	lt
 8004cb6:	9b07      	ldrlt	r3, [sp, #28]
 8004cb8:	9607      	strlt	r6, [sp, #28]
 8004cba:	1af2      	sublt	r2, r6, r3
 8004cbc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004cbe:	bfb6      	itet	lt
 8004cc0:	189b      	addlt	r3, r3, r2
 8004cc2:	1b9e      	subge	r6, r3, r6
 8004cc4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004cc6:	9b03      	ldr	r3, [sp, #12]
 8004cc8:	bfb8      	it	lt
 8004cca:	2600      	movlt	r6, #0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	bfb7      	itett	lt
 8004cd0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004cd4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004cd8:	1a9d      	sublt	r5, r3, r2
 8004cda:	2300      	movlt	r3, #0
 8004cdc:	e734      	b.n	8004b48 <_dtoa_r+0x720>
 8004cde:	9e07      	ldr	r6, [sp, #28]
 8004ce0:	9d04      	ldr	r5, [sp, #16]
 8004ce2:	9f08      	ldr	r7, [sp, #32]
 8004ce4:	e73b      	b.n	8004b5e <_dtoa_r+0x736>
 8004ce6:	9a07      	ldr	r2, [sp, #28]
 8004ce8:	e767      	b.n	8004bba <_dtoa_r+0x792>
 8004cea:	9b06      	ldr	r3, [sp, #24]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	dc18      	bgt.n	8004d22 <_dtoa_r+0x8fa>
 8004cf0:	f1ba 0f00 	cmp.w	sl, #0
 8004cf4:	d115      	bne.n	8004d22 <_dtoa_r+0x8fa>
 8004cf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004cfa:	b993      	cbnz	r3, 8004d22 <_dtoa_r+0x8fa>
 8004cfc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004d00:	0d1b      	lsrs	r3, r3, #20
 8004d02:	051b      	lsls	r3, r3, #20
 8004d04:	b183      	cbz	r3, 8004d28 <_dtoa_r+0x900>
 8004d06:	9b04      	ldr	r3, [sp, #16]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	9304      	str	r3, [sp, #16]
 8004d0c:	9b05      	ldr	r3, [sp, #20]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	9305      	str	r3, [sp, #20]
 8004d12:	f04f 0801 	mov.w	r8, #1
 8004d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f47f af6a 	bne.w	8004bf2 <_dtoa_r+0x7ca>
 8004d1e:	2001      	movs	r0, #1
 8004d20:	e76f      	b.n	8004c02 <_dtoa_r+0x7da>
 8004d22:	f04f 0800 	mov.w	r8, #0
 8004d26:	e7f6      	b.n	8004d16 <_dtoa_r+0x8ee>
 8004d28:	4698      	mov	r8, r3
 8004d2a:	e7f4      	b.n	8004d16 <_dtoa_r+0x8ee>
 8004d2c:	f43f af7d 	beq.w	8004c2a <_dtoa_r+0x802>
 8004d30:	4618      	mov	r0, r3
 8004d32:	301c      	adds	r0, #28
 8004d34:	e772      	b.n	8004c1c <_dtoa_r+0x7f4>
 8004d36:	9b03      	ldr	r3, [sp, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	dc37      	bgt.n	8004dac <_dtoa_r+0x984>
 8004d3c:	9b06      	ldr	r3, [sp, #24]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	dd34      	ble.n	8004dac <_dtoa_r+0x984>
 8004d42:	9b03      	ldr	r3, [sp, #12]
 8004d44:	9302      	str	r3, [sp, #8]
 8004d46:	9b02      	ldr	r3, [sp, #8]
 8004d48:	b96b      	cbnz	r3, 8004d66 <_dtoa_r+0x93e>
 8004d4a:	4631      	mov	r1, r6
 8004d4c:	2205      	movs	r2, #5
 8004d4e:	4620      	mov	r0, r4
 8004d50:	f000 fbe6 	bl	8005520 <__multadd>
 8004d54:	4601      	mov	r1, r0
 8004d56:	4606      	mov	r6, r0
 8004d58:	ee18 0a10 	vmov	r0, s16
 8004d5c:	f000 fe00 	bl	8005960 <__mcmp>
 8004d60:	2800      	cmp	r0, #0
 8004d62:	f73f adbb 	bgt.w	80048dc <_dtoa_r+0x4b4>
 8004d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d68:	9d01      	ldr	r5, [sp, #4]
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	f04f 0800 	mov.w	r8, #0
 8004d72:	4631      	mov	r1, r6
 8004d74:	4620      	mov	r0, r4
 8004d76:	f000 fbb1 	bl	80054dc <_Bfree>
 8004d7a:	2f00      	cmp	r7, #0
 8004d7c:	f43f aea4 	beq.w	8004ac8 <_dtoa_r+0x6a0>
 8004d80:	f1b8 0f00 	cmp.w	r8, #0
 8004d84:	d005      	beq.n	8004d92 <_dtoa_r+0x96a>
 8004d86:	45b8      	cmp	r8, r7
 8004d88:	d003      	beq.n	8004d92 <_dtoa_r+0x96a>
 8004d8a:	4641      	mov	r1, r8
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	f000 fba5 	bl	80054dc <_Bfree>
 8004d92:	4639      	mov	r1, r7
 8004d94:	4620      	mov	r0, r4
 8004d96:	f000 fba1 	bl	80054dc <_Bfree>
 8004d9a:	e695      	b.n	8004ac8 <_dtoa_r+0x6a0>
 8004d9c:	2600      	movs	r6, #0
 8004d9e:	4637      	mov	r7, r6
 8004da0:	e7e1      	b.n	8004d66 <_dtoa_r+0x93e>
 8004da2:	9700      	str	r7, [sp, #0]
 8004da4:	4637      	mov	r7, r6
 8004da6:	e599      	b.n	80048dc <_dtoa_r+0x4b4>
 8004da8:	40240000 	.word	0x40240000
 8004dac:	9b08      	ldr	r3, [sp, #32]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 80ca 	beq.w	8004f48 <_dtoa_r+0xb20>
 8004db4:	9b03      	ldr	r3, [sp, #12]
 8004db6:	9302      	str	r3, [sp, #8]
 8004db8:	2d00      	cmp	r5, #0
 8004dba:	dd05      	ble.n	8004dc8 <_dtoa_r+0x9a0>
 8004dbc:	4639      	mov	r1, r7
 8004dbe:	462a      	mov	r2, r5
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	f000 fd5d 	bl	8005880 <__lshift>
 8004dc6:	4607      	mov	r7, r0
 8004dc8:	f1b8 0f00 	cmp.w	r8, #0
 8004dcc:	d05b      	beq.n	8004e86 <_dtoa_r+0xa5e>
 8004dce:	6879      	ldr	r1, [r7, #4]
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	f000 fb43 	bl	800545c <_Balloc>
 8004dd6:	4605      	mov	r5, r0
 8004dd8:	b928      	cbnz	r0, 8004de6 <_dtoa_r+0x9be>
 8004dda:	4b87      	ldr	r3, [pc, #540]	; (8004ff8 <_dtoa_r+0xbd0>)
 8004ddc:	4602      	mov	r2, r0
 8004dde:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004de2:	f7ff bb3b 	b.w	800445c <_dtoa_r+0x34>
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	3202      	adds	r2, #2
 8004dea:	0092      	lsls	r2, r2, #2
 8004dec:	f107 010c 	add.w	r1, r7, #12
 8004df0:	300c      	adds	r0, #12
 8004df2:	f7fe fcbf 	bl	8003774 <memcpy>
 8004df6:	2201      	movs	r2, #1
 8004df8:	4629      	mov	r1, r5
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	f000 fd40 	bl	8005880 <__lshift>
 8004e00:	9b01      	ldr	r3, [sp, #4]
 8004e02:	f103 0901 	add.w	r9, r3, #1
 8004e06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	9305      	str	r3, [sp, #20]
 8004e0e:	f00a 0301 	and.w	r3, sl, #1
 8004e12:	46b8      	mov	r8, r7
 8004e14:	9304      	str	r3, [sp, #16]
 8004e16:	4607      	mov	r7, r0
 8004e18:	4631      	mov	r1, r6
 8004e1a:	ee18 0a10 	vmov	r0, s16
 8004e1e:	f7ff fa77 	bl	8004310 <quorem>
 8004e22:	4641      	mov	r1, r8
 8004e24:	9002      	str	r0, [sp, #8]
 8004e26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004e2a:	ee18 0a10 	vmov	r0, s16
 8004e2e:	f000 fd97 	bl	8005960 <__mcmp>
 8004e32:	463a      	mov	r2, r7
 8004e34:	9003      	str	r0, [sp, #12]
 8004e36:	4631      	mov	r1, r6
 8004e38:	4620      	mov	r0, r4
 8004e3a:	f000 fdad 	bl	8005998 <__mdiff>
 8004e3e:	68c2      	ldr	r2, [r0, #12]
 8004e40:	f109 3bff 	add.w	fp, r9, #4294967295
 8004e44:	4605      	mov	r5, r0
 8004e46:	bb02      	cbnz	r2, 8004e8a <_dtoa_r+0xa62>
 8004e48:	4601      	mov	r1, r0
 8004e4a:	ee18 0a10 	vmov	r0, s16
 8004e4e:	f000 fd87 	bl	8005960 <__mcmp>
 8004e52:	4602      	mov	r2, r0
 8004e54:	4629      	mov	r1, r5
 8004e56:	4620      	mov	r0, r4
 8004e58:	9207      	str	r2, [sp, #28]
 8004e5a:	f000 fb3f 	bl	80054dc <_Bfree>
 8004e5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004e62:	ea43 0102 	orr.w	r1, r3, r2
 8004e66:	9b04      	ldr	r3, [sp, #16]
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	464d      	mov	r5, r9
 8004e6c:	d10f      	bne.n	8004e8e <_dtoa_r+0xa66>
 8004e6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004e72:	d02a      	beq.n	8004eca <_dtoa_r+0xaa2>
 8004e74:	9b03      	ldr	r3, [sp, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	dd02      	ble.n	8004e80 <_dtoa_r+0xa58>
 8004e7a:	9b02      	ldr	r3, [sp, #8]
 8004e7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004e80:	f88b a000 	strb.w	sl, [fp]
 8004e84:	e775      	b.n	8004d72 <_dtoa_r+0x94a>
 8004e86:	4638      	mov	r0, r7
 8004e88:	e7ba      	b.n	8004e00 <_dtoa_r+0x9d8>
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	e7e2      	b.n	8004e54 <_dtoa_r+0xa2c>
 8004e8e:	9b03      	ldr	r3, [sp, #12]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	db04      	blt.n	8004e9e <_dtoa_r+0xa76>
 8004e94:	9906      	ldr	r1, [sp, #24]
 8004e96:	430b      	orrs	r3, r1
 8004e98:	9904      	ldr	r1, [sp, #16]
 8004e9a:	430b      	orrs	r3, r1
 8004e9c:	d122      	bne.n	8004ee4 <_dtoa_r+0xabc>
 8004e9e:	2a00      	cmp	r2, #0
 8004ea0:	ddee      	ble.n	8004e80 <_dtoa_r+0xa58>
 8004ea2:	ee18 1a10 	vmov	r1, s16
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	f000 fce9 	bl	8005880 <__lshift>
 8004eae:	4631      	mov	r1, r6
 8004eb0:	ee08 0a10 	vmov	s16, r0
 8004eb4:	f000 fd54 	bl	8005960 <__mcmp>
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	dc03      	bgt.n	8004ec4 <_dtoa_r+0xa9c>
 8004ebc:	d1e0      	bne.n	8004e80 <_dtoa_r+0xa58>
 8004ebe:	f01a 0f01 	tst.w	sl, #1
 8004ec2:	d0dd      	beq.n	8004e80 <_dtoa_r+0xa58>
 8004ec4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004ec8:	d1d7      	bne.n	8004e7a <_dtoa_r+0xa52>
 8004eca:	2339      	movs	r3, #57	; 0x39
 8004ecc:	f88b 3000 	strb.w	r3, [fp]
 8004ed0:	462b      	mov	r3, r5
 8004ed2:	461d      	mov	r5, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004eda:	2a39      	cmp	r2, #57	; 0x39
 8004edc:	d071      	beq.n	8004fc2 <_dtoa_r+0xb9a>
 8004ede:	3201      	adds	r2, #1
 8004ee0:	701a      	strb	r2, [r3, #0]
 8004ee2:	e746      	b.n	8004d72 <_dtoa_r+0x94a>
 8004ee4:	2a00      	cmp	r2, #0
 8004ee6:	dd07      	ble.n	8004ef8 <_dtoa_r+0xad0>
 8004ee8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004eec:	d0ed      	beq.n	8004eca <_dtoa_r+0xaa2>
 8004eee:	f10a 0301 	add.w	r3, sl, #1
 8004ef2:	f88b 3000 	strb.w	r3, [fp]
 8004ef6:	e73c      	b.n	8004d72 <_dtoa_r+0x94a>
 8004ef8:	9b05      	ldr	r3, [sp, #20]
 8004efa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004efe:	4599      	cmp	r9, r3
 8004f00:	d047      	beq.n	8004f92 <_dtoa_r+0xb6a>
 8004f02:	ee18 1a10 	vmov	r1, s16
 8004f06:	2300      	movs	r3, #0
 8004f08:	220a      	movs	r2, #10
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	f000 fb08 	bl	8005520 <__multadd>
 8004f10:	45b8      	cmp	r8, r7
 8004f12:	ee08 0a10 	vmov	s16, r0
 8004f16:	f04f 0300 	mov.w	r3, #0
 8004f1a:	f04f 020a 	mov.w	r2, #10
 8004f1e:	4641      	mov	r1, r8
 8004f20:	4620      	mov	r0, r4
 8004f22:	d106      	bne.n	8004f32 <_dtoa_r+0xb0a>
 8004f24:	f000 fafc 	bl	8005520 <__multadd>
 8004f28:	4680      	mov	r8, r0
 8004f2a:	4607      	mov	r7, r0
 8004f2c:	f109 0901 	add.w	r9, r9, #1
 8004f30:	e772      	b.n	8004e18 <_dtoa_r+0x9f0>
 8004f32:	f000 faf5 	bl	8005520 <__multadd>
 8004f36:	4639      	mov	r1, r7
 8004f38:	4680      	mov	r8, r0
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	220a      	movs	r2, #10
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f000 faee 	bl	8005520 <__multadd>
 8004f44:	4607      	mov	r7, r0
 8004f46:	e7f1      	b.n	8004f2c <_dtoa_r+0xb04>
 8004f48:	9b03      	ldr	r3, [sp, #12]
 8004f4a:	9302      	str	r3, [sp, #8]
 8004f4c:	9d01      	ldr	r5, [sp, #4]
 8004f4e:	ee18 0a10 	vmov	r0, s16
 8004f52:	4631      	mov	r1, r6
 8004f54:	f7ff f9dc 	bl	8004310 <quorem>
 8004f58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004f5c:	9b01      	ldr	r3, [sp, #4]
 8004f5e:	f805 ab01 	strb.w	sl, [r5], #1
 8004f62:	1aea      	subs	r2, r5, r3
 8004f64:	9b02      	ldr	r3, [sp, #8]
 8004f66:	4293      	cmp	r3, r2
 8004f68:	dd09      	ble.n	8004f7e <_dtoa_r+0xb56>
 8004f6a:	ee18 1a10 	vmov	r1, s16
 8004f6e:	2300      	movs	r3, #0
 8004f70:	220a      	movs	r2, #10
 8004f72:	4620      	mov	r0, r4
 8004f74:	f000 fad4 	bl	8005520 <__multadd>
 8004f78:	ee08 0a10 	vmov	s16, r0
 8004f7c:	e7e7      	b.n	8004f4e <_dtoa_r+0xb26>
 8004f7e:	9b02      	ldr	r3, [sp, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	bfc8      	it	gt
 8004f84:	461d      	movgt	r5, r3
 8004f86:	9b01      	ldr	r3, [sp, #4]
 8004f88:	bfd8      	it	le
 8004f8a:	2501      	movle	r5, #1
 8004f8c:	441d      	add	r5, r3
 8004f8e:	f04f 0800 	mov.w	r8, #0
 8004f92:	ee18 1a10 	vmov	r1, s16
 8004f96:	2201      	movs	r2, #1
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f000 fc71 	bl	8005880 <__lshift>
 8004f9e:	4631      	mov	r1, r6
 8004fa0:	ee08 0a10 	vmov	s16, r0
 8004fa4:	f000 fcdc 	bl	8005960 <__mcmp>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	dc91      	bgt.n	8004ed0 <_dtoa_r+0xaa8>
 8004fac:	d102      	bne.n	8004fb4 <_dtoa_r+0xb8c>
 8004fae:	f01a 0f01 	tst.w	sl, #1
 8004fb2:	d18d      	bne.n	8004ed0 <_dtoa_r+0xaa8>
 8004fb4:	462b      	mov	r3, r5
 8004fb6:	461d      	mov	r5, r3
 8004fb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004fbc:	2a30      	cmp	r2, #48	; 0x30
 8004fbe:	d0fa      	beq.n	8004fb6 <_dtoa_r+0xb8e>
 8004fc0:	e6d7      	b.n	8004d72 <_dtoa_r+0x94a>
 8004fc2:	9a01      	ldr	r2, [sp, #4]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d184      	bne.n	8004ed2 <_dtoa_r+0xaaa>
 8004fc8:	9b00      	ldr	r3, [sp, #0]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	9300      	str	r3, [sp, #0]
 8004fce:	2331      	movs	r3, #49	; 0x31
 8004fd0:	7013      	strb	r3, [r2, #0]
 8004fd2:	e6ce      	b.n	8004d72 <_dtoa_r+0x94a>
 8004fd4:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <_dtoa_r+0xbd4>)
 8004fd6:	f7ff ba95 	b.w	8004504 <_dtoa_r+0xdc>
 8004fda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f47f aa6e 	bne.w	80044be <_dtoa_r+0x96>
 8004fe2:	4b07      	ldr	r3, [pc, #28]	; (8005000 <_dtoa_r+0xbd8>)
 8004fe4:	f7ff ba8e 	b.w	8004504 <_dtoa_r+0xdc>
 8004fe8:	9b02      	ldr	r3, [sp, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	dcae      	bgt.n	8004f4c <_dtoa_r+0xb24>
 8004fee:	9b06      	ldr	r3, [sp, #24]
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	f73f aea8 	bgt.w	8004d46 <_dtoa_r+0x91e>
 8004ff6:	e7a9      	b.n	8004f4c <_dtoa_r+0xb24>
 8004ff8:	08006547 	.word	0x08006547
 8004ffc:	080064a4 	.word	0x080064a4
 8005000:	080064c8 	.word	0x080064c8

08005004 <__sflush_r>:
 8005004:	898a      	ldrh	r2, [r1, #12]
 8005006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800500a:	4605      	mov	r5, r0
 800500c:	0710      	lsls	r0, r2, #28
 800500e:	460c      	mov	r4, r1
 8005010:	d458      	bmi.n	80050c4 <__sflush_r+0xc0>
 8005012:	684b      	ldr	r3, [r1, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	dc05      	bgt.n	8005024 <__sflush_r+0x20>
 8005018:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800501a:	2b00      	cmp	r3, #0
 800501c:	dc02      	bgt.n	8005024 <__sflush_r+0x20>
 800501e:	2000      	movs	r0, #0
 8005020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005024:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005026:	2e00      	cmp	r6, #0
 8005028:	d0f9      	beq.n	800501e <__sflush_r+0x1a>
 800502a:	2300      	movs	r3, #0
 800502c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005030:	682f      	ldr	r7, [r5, #0]
 8005032:	602b      	str	r3, [r5, #0]
 8005034:	d032      	beq.n	800509c <__sflush_r+0x98>
 8005036:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005038:	89a3      	ldrh	r3, [r4, #12]
 800503a:	075a      	lsls	r2, r3, #29
 800503c:	d505      	bpl.n	800504a <__sflush_r+0x46>
 800503e:	6863      	ldr	r3, [r4, #4]
 8005040:	1ac0      	subs	r0, r0, r3
 8005042:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005044:	b10b      	cbz	r3, 800504a <__sflush_r+0x46>
 8005046:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005048:	1ac0      	subs	r0, r0, r3
 800504a:	2300      	movs	r3, #0
 800504c:	4602      	mov	r2, r0
 800504e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005050:	6a21      	ldr	r1, [r4, #32]
 8005052:	4628      	mov	r0, r5
 8005054:	47b0      	blx	r6
 8005056:	1c43      	adds	r3, r0, #1
 8005058:	89a3      	ldrh	r3, [r4, #12]
 800505a:	d106      	bne.n	800506a <__sflush_r+0x66>
 800505c:	6829      	ldr	r1, [r5, #0]
 800505e:	291d      	cmp	r1, #29
 8005060:	d82c      	bhi.n	80050bc <__sflush_r+0xb8>
 8005062:	4a2a      	ldr	r2, [pc, #168]	; (800510c <__sflush_r+0x108>)
 8005064:	40ca      	lsrs	r2, r1
 8005066:	07d6      	lsls	r6, r2, #31
 8005068:	d528      	bpl.n	80050bc <__sflush_r+0xb8>
 800506a:	2200      	movs	r2, #0
 800506c:	6062      	str	r2, [r4, #4]
 800506e:	04d9      	lsls	r1, r3, #19
 8005070:	6922      	ldr	r2, [r4, #16]
 8005072:	6022      	str	r2, [r4, #0]
 8005074:	d504      	bpl.n	8005080 <__sflush_r+0x7c>
 8005076:	1c42      	adds	r2, r0, #1
 8005078:	d101      	bne.n	800507e <__sflush_r+0x7a>
 800507a:	682b      	ldr	r3, [r5, #0]
 800507c:	b903      	cbnz	r3, 8005080 <__sflush_r+0x7c>
 800507e:	6560      	str	r0, [r4, #84]	; 0x54
 8005080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005082:	602f      	str	r7, [r5, #0]
 8005084:	2900      	cmp	r1, #0
 8005086:	d0ca      	beq.n	800501e <__sflush_r+0x1a>
 8005088:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800508c:	4299      	cmp	r1, r3
 800508e:	d002      	beq.n	8005096 <__sflush_r+0x92>
 8005090:	4628      	mov	r0, r5
 8005092:	f000 fd7d 	bl	8005b90 <_free_r>
 8005096:	2000      	movs	r0, #0
 8005098:	6360      	str	r0, [r4, #52]	; 0x34
 800509a:	e7c1      	b.n	8005020 <__sflush_r+0x1c>
 800509c:	6a21      	ldr	r1, [r4, #32]
 800509e:	2301      	movs	r3, #1
 80050a0:	4628      	mov	r0, r5
 80050a2:	47b0      	blx	r6
 80050a4:	1c41      	adds	r1, r0, #1
 80050a6:	d1c7      	bne.n	8005038 <__sflush_r+0x34>
 80050a8:	682b      	ldr	r3, [r5, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0c4      	beq.n	8005038 <__sflush_r+0x34>
 80050ae:	2b1d      	cmp	r3, #29
 80050b0:	d001      	beq.n	80050b6 <__sflush_r+0xb2>
 80050b2:	2b16      	cmp	r3, #22
 80050b4:	d101      	bne.n	80050ba <__sflush_r+0xb6>
 80050b6:	602f      	str	r7, [r5, #0]
 80050b8:	e7b1      	b.n	800501e <__sflush_r+0x1a>
 80050ba:	89a3      	ldrh	r3, [r4, #12]
 80050bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050c0:	81a3      	strh	r3, [r4, #12]
 80050c2:	e7ad      	b.n	8005020 <__sflush_r+0x1c>
 80050c4:	690f      	ldr	r7, [r1, #16]
 80050c6:	2f00      	cmp	r7, #0
 80050c8:	d0a9      	beq.n	800501e <__sflush_r+0x1a>
 80050ca:	0793      	lsls	r3, r2, #30
 80050cc:	680e      	ldr	r6, [r1, #0]
 80050ce:	bf08      	it	eq
 80050d0:	694b      	ldreq	r3, [r1, #20]
 80050d2:	600f      	str	r7, [r1, #0]
 80050d4:	bf18      	it	ne
 80050d6:	2300      	movne	r3, #0
 80050d8:	eba6 0807 	sub.w	r8, r6, r7
 80050dc:	608b      	str	r3, [r1, #8]
 80050de:	f1b8 0f00 	cmp.w	r8, #0
 80050e2:	dd9c      	ble.n	800501e <__sflush_r+0x1a>
 80050e4:	6a21      	ldr	r1, [r4, #32]
 80050e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050e8:	4643      	mov	r3, r8
 80050ea:	463a      	mov	r2, r7
 80050ec:	4628      	mov	r0, r5
 80050ee:	47b0      	blx	r6
 80050f0:	2800      	cmp	r0, #0
 80050f2:	dc06      	bgt.n	8005102 <__sflush_r+0xfe>
 80050f4:	89a3      	ldrh	r3, [r4, #12]
 80050f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050fa:	81a3      	strh	r3, [r4, #12]
 80050fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005100:	e78e      	b.n	8005020 <__sflush_r+0x1c>
 8005102:	4407      	add	r7, r0
 8005104:	eba8 0800 	sub.w	r8, r8, r0
 8005108:	e7e9      	b.n	80050de <__sflush_r+0xda>
 800510a:	bf00      	nop
 800510c:	20400001 	.word	0x20400001

08005110 <_fflush_r>:
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	690b      	ldr	r3, [r1, #16]
 8005114:	4605      	mov	r5, r0
 8005116:	460c      	mov	r4, r1
 8005118:	b913      	cbnz	r3, 8005120 <_fflush_r+0x10>
 800511a:	2500      	movs	r5, #0
 800511c:	4628      	mov	r0, r5
 800511e:	bd38      	pop	{r3, r4, r5, pc}
 8005120:	b118      	cbz	r0, 800512a <_fflush_r+0x1a>
 8005122:	6983      	ldr	r3, [r0, #24]
 8005124:	b90b      	cbnz	r3, 800512a <_fflush_r+0x1a>
 8005126:	f000 f887 	bl	8005238 <__sinit>
 800512a:	4b14      	ldr	r3, [pc, #80]	; (800517c <_fflush_r+0x6c>)
 800512c:	429c      	cmp	r4, r3
 800512e:	d11b      	bne.n	8005168 <_fflush_r+0x58>
 8005130:	686c      	ldr	r4, [r5, #4]
 8005132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0ef      	beq.n	800511a <_fflush_r+0xa>
 800513a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800513c:	07d0      	lsls	r0, r2, #31
 800513e:	d404      	bmi.n	800514a <_fflush_r+0x3a>
 8005140:	0599      	lsls	r1, r3, #22
 8005142:	d402      	bmi.n	800514a <_fflush_r+0x3a>
 8005144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005146:	f000 f91a 	bl	800537e <__retarget_lock_acquire_recursive>
 800514a:	4628      	mov	r0, r5
 800514c:	4621      	mov	r1, r4
 800514e:	f7ff ff59 	bl	8005004 <__sflush_r>
 8005152:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005154:	07da      	lsls	r2, r3, #31
 8005156:	4605      	mov	r5, r0
 8005158:	d4e0      	bmi.n	800511c <_fflush_r+0xc>
 800515a:	89a3      	ldrh	r3, [r4, #12]
 800515c:	059b      	lsls	r3, r3, #22
 800515e:	d4dd      	bmi.n	800511c <_fflush_r+0xc>
 8005160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005162:	f000 f90d 	bl	8005380 <__retarget_lock_release_recursive>
 8005166:	e7d9      	b.n	800511c <_fflush_r+0xc>
 8005168:	4b05      	ldr	r3, [pc, #20]	; (8005180 <_fflush_r+0x70>)
 800516a:	429c      	cmp	r4, r3
 800516c:	d101      	bne.n	8005172 <_fflush_r+0x62>
 800516e:	68ac      	ldr	r4, [r5, #8]
 8005170:	e7df      	b.n	8005132 <_fflush_r+0x22>
 8005172:	4b04      	ldr	r3, [pc, #16]	; (8005184 <_fflush_r+0x74>)
 8005174:	429c      	cmp	r4, r3
 8005176:	bf08      	it	eq
 8005178:	68ec      	ldreq	r4, [r5, #12]
 800517a:	e7da      	b.n	8005132 <_fflush_r+0x22>
 800517c:	08006578 	.word	0x08006578
 8005180:	08006598 	.word	0x08006598
 8005184:	08006558 	.word	0x08006558

08005188 <std>:
 8005188:	2300      	movs	r3, #0
 800518a:	b510      	push	{r4, lr}
 800518c:	4604      	mov	r4, r0
 800518e:	e9c0 3300 	strd	r3, r3, [r0]
 8005192:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005196:	6083      	str	r3, [r0, #8]
 8005198:	8181      	strh	r1, [r0, #12]
 800519a:	6643      	str	r3, [r0, #100]	; 0x64
 800519c:	81c2      	strh	r2, [r0, #14]
 800519e:	6183      	str	r3, [r0, #24]
 80051a0:	4619      	mov	r1, r3
 80051a2:	2208      	movs	r2, #8
 80051a4:	305c      	adds	r0, #92	; 0x5c
 80051a6:	f7fe faf3 	bl	8003790 <memset>
 80051aa:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <std+0x38>)
 80051ac:	6263      	str	r3, [r4, #36]	; 0x24
 80051ae:	4b05      	ldr	r3, [pc, #20]	; (80051c4 <std+0x3c>)
 80051b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <std+0x40>)
 80051b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051b6:	4b05      	ldr	r3, [pc, #20]	; (80051cc <std+0x44>)
 80051b8:	6224      	str	r4, [r4, #32]
 80051ba:	6323      	str	r3, [r4, #48]	; 0x30
 80051bc:	bd10      	pop	{r4, pc}
 80051be:	bf00      	nop
 80051c0:	08006025 	.word	0x08006025
 80051c4:	08006047 	.word	0x08006047
 80051c8:	0800607f 	.word	0x0800607f
 80051cc:	080060a3 	.word	0x080060a3

080051d0 <_cleanup_r>:
 80051d0:	4901      	ldr	r1, [pc, #4]	; (80051d8 <_cleanup_r+0x8>)
 80051d2:	f000 b8af 	b.w	8005334 <_fwalk_reent>
 80051d6:	bf00      	nop
 80051d8:	08005111 	.word	0x08005111

080051dc <__sfmoreglue>:
 80051dc:	b570      	push	{r4, r5, r6, lr}
 80051de:	2268      	movs	r2, #104	; 0x68
 80051e0:	1e4d      	subs	r5, r1, #1
 80051e2:	4355      	muls	r5, r2
 80051e4:	460e      	mov	r6, r1
 80051e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80051ea:	f000 fd3d 	bl	8005c68 <_malloc_r>
 80051ee:	4604      	mov	r4, r0
 80051f0:	b140      	cbz	r0, 8005204 <__sfmoreglue+0x28>
 80051f2:	2100      	movs	r1, #0
 80051f4:	e9c0 1600 	strd	r1, r6, [r0]
 80051f8:	300c      	adds	r0, #12
 80051fa:	60a0      	str	r0, [r4, #8]
 80051fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005200:	f7fe fac6 	bl	8003790 <memset>
 8005204:	4620      	mov	r0, r4
 8005206:	bd70      	pop	{r4, r5, r6, pc}

08005208 <__sfp_lock_acquire>:
 8005208:	4801      	ldr	r0, [pc, #4]	; (8005210 <__sfp_lock_acquire+0x8>)
 800520a:	f000 b8b8 	b.w	800537e <__retarget_lock_acquire_recursive>
 800520e:	bf00      	nop
 8005210:	200003f5 	.word	0x200003f5

08005214 <__sfp_lock_release>:
 8005214:	4801      	ldr	r0, [pc, #4]	; (800521c <__sfp_lock_release+0x8>)
 8005216:	f000 b8b3 	b.w	8005380 <__retarget_lock_release_recursive>
 800521a:	bf00      	nop
 800521c:	200003f5 	.word	0x200003f5

08005220 <__sinit_lock_acquire>:
 8005220:	4801      	ldr	r0, [pc, #4]	; (8005228 <__sinit_lock_acquire+0x8>)
 8005222:	f000 b8ac 	b.w	800537e <__retarget_lock_acquire_recursive>
 8005226:	bf00      	nop
 8005228:	200003f6 	.word	0x200003f6

0800522c <__sinit_lock_release>:
 800522c:	4801      	ldr	r0, [pc, #4]	; (8005234 <__sinit_lock_release+0x8>)
 800522e:	f000 b8a7 	b.w	8005380 <__retarget_lock_release_recursive>
 8005232:	bf00      	nop
 8005234:	200003f6 	.word	0x200003f6

08005238 <__sinit>:
 8005238:	b510      	push	{r4, lr}
 800523a:	4604      	mov	r4, r0
 800523c:	f7ff fff0 	bl	8005220 <__sinit_lock_acquire>
 8005240:	69a3      	ldr	r3, [r4, #24]
 8005242:	b11b      	cbz	r3, 800524c <__sinit+0x14>
 8005244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005248:	f7ff bff0 	b.w	800522c <__sinit_lock_release>
 800524c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005250:	6523      	str	r3, [r4, #80]	; 0x50
 8005252:	4b13      	ldr	r3, [pc, #76]	; (80052a0 <__sinit+0x68>)
 8005254:	4a13      	ldr	r2, [pc, #76]	; (80052a4 <__sinit+0x6c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	62a2      	str	r2, [r4, #40]	; 0x28
 800525a:	42a3      	cmp	r3, r4
 800525c:	bf04      	itt	eq
 800525e:	2301      	moveq	r3, #1
 8005260:	61a3      	streq	r3, [r4, #24]
 8005262:	4620      	mov	r0, r4
 8005264:	f000 f820 	bl	80052a8 <__sfp>
 8005268:	6060      	str	r0, [r4, #4]
 800526a:	4620      	mov	r0, r4
 800526c:	f000 f81c 	bl	80052a8 <__sfp>
 8005270:	60a0      	str	r0, [r4, #8]
 8005272:	4620      	mov	r0, r4
 8005274:	f000 f818 	bl	80052a8 <__sfp>
 8005278:	2200      	movs	r2, #0
 800527a:	60e0      	str	r0, [r4, #12]
 800527c:	2104      	movs	r1, #4
 800527e:	6860      	ldr	r0, [r4, #4]
 8005280:	f7ff ff82 	bl	8005188 <std>
 8005284:	68a0      	ldr	r0, [r4, #8]
 8005286:	2201      	movs	r2, #1
 8005288:	2109      	movs	r1, #9
 800528a:	f7ff ff7d 	bl	8005188 <std>
 800528e:	68e0      	ldr	r0, [r4, #12]
 8005290:	2202      	movs	r2, #2
 8005292:	2112      	movs	r1, #18
 8005294:	f7ff ff78 	bl	8005188 <std>
 8005298:	2301      	movs	r3, #1
 800529a:	61a3      	str	r3, [r4, #24]
 800529c:	e7d2      	b.n	8005244 <__sinit+0xc>
 800529e:	bf00      	nop
 80052a0:	08006490 	.word	0x08006490
 80052a4:	080051d1 	.word	0x080051d1

080052a8 <__sfp>:
 80052a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052aa:	4607      	mov	r7, r0
 80052ac:	f7ff ffac 	bl	8005208 <__sfp_lock_acquire>
 80052b0:	4b1e      	ldr	r3, [pc, #120]	; (800532c <__sfp+0x84>)
 80052b2:	681e      	ldr	r6, [r3, #0]
 80052b4:	69b3      	ldr	r3, [r6, #24]
 80052b6:	b913      	cbnz	r3, 80052be <__sfp+0x16>
 80052b8:	4630      	mov	r0, r6
 80052ba:	f7ff ffbd 	bl	8005238 <__sinit>
 80052be:	3648      	adds	r6, #72	; 0x48
 80052c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80052c4:	3b01      	subs	r3, #1
 80052c6:	d503      	bpl.n	80052d0 <__sfp+0x28>
 80052c8:	6833      	ldr	r3, [r6, #0]
 80052ca:	b30b      	cbz	r3, 8005310 <__sfp+0x68>
 80052cc:	6836      	ldr	r6, [r6, #0]
 80052ce:	e7f7      	b.n	80052c0 <__sfp+0x18>
 80052d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80052d4:	b9d5      	cbnz	r5, 800530c <__sfp+0x64>
 80052d6:	4b16      	ldr	r3, [pc, #88]	; (8005330 <__sfp+0x88>)
 80052d8:	60e3      	str	r3, [r4, #12]
 80052da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052de:	6665      	str	r5, [r4, #100]	; 0x64
 80052e0:	f000 f84c 	bl	800537c <__retarget_lock_init_recursive>
 80052e4:	f7ff ff96 	bl	8005214 <__sfp_lock_release>
 80052e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80052ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80052f0:	6025      	str	r5, [r4, #0]
 80052f2:	61a5      	str	r5, [r4, #24]
 80052f4:	2208      	movs	r2, #8
 80052f6:	4629      	mov	r1, r5
 80052f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80052fc:	f7fe fa48 	bl	8003790 <memset>
 8005300:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005304:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005308:	4620      	mov	r0, r4
 800530a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800530c:	3468      	adds	r4, #104	; 0x68
 800530e:	e7d9      	b.n	80052c4 <__sfp+0x1c>
 8005310:	2104      	movs	r1, #4
 8005312:	4638      	mov	r0, r7
 8005314:	f7ff ff62 	bl	80051dc <__sfmoreglue>
 8005318:	4604      	mov	r4, r0
 800531a:	6030      	str	r0, [r6, #0]
 800531c:	2800      	cmp	r0, #0
 800531e:	d1d5      	bne.n	80052cc <__sfp+0x24>
 8005320:	f7ff ff78 	bl	8005214 <__sfp_lock_release>
 8005324:	230c      	movs	r3, #12
 8005326:	603b      	str	r3, [r7, #0]
 8005328:	e7ee      	b.n	8005308 <__sfp+0x60>
 800532a:	bf00      	nop
 800532c:	08006490 	.word	0x08006490
 8005330:	ffff0001 	.word	0xffff0001

08005334 <_fwalk_reent>:
 8005334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005338:	4606      	mov	r6, r0
 800533a:	4688      	mov	r8, r1
 800533c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005340:	2700      	movs	r7, #0
 8005342:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005346:	f1b9 0901 	subs.w	r9, r9, #1
 800534a:	d505      	bpl.n	8005358 <_fwalk_reent+0x24>
 800534c:	6824      	ldr	r4, [r4, #0]
 800534e:	2c00      	cmp	r4, #0
 8005350:	d1f7      	bne.n	8005342 <_fwalk_reent+0xe>
 8005352:	4638      	mov	r0, r7
 8005354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005358:	89ab      	ldrh	r3, [r5, #12]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d907      	bls.n	800536e <_fwalk_reent+0x3a>
 800535e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005362:	3301      	adds	r3, #1
 8005364:	d003      	beq.n	800536e <_fwalk_reent+0x3a>
 8005366:	4629      	mov	r1, r5
 8005368:	4630      	mov	r0, r6
 800536a:	47c0      	blx	r8
 800536c:	4307      	orrs	r7, r0
 800536e:	3568      	adds	r5, #104	; 0x68
 8005370:	e7e9      	b.n	8005346 <_fwalk_reent+0x12>
	...

08005374 <_localeconv_r>:
 8005374:	4800      	ldr	r0, [pc, #0]	; (8005378 <_localeconv_r+0x4>)
 8005376:	4770      	bx	lr
 8005378:	20000164 	.word	0x20000164

0800537c <__retarget_lock_init_recursive>:
 800537c:	4770      	bx	lr

0800537e <__retarget_lock_acquire_recursive>:
 800537e:	4770      	bx	lr

08005380 <__retarget_lock_release_recursive>:
 8005380:	4770      	bx	lr

08005382 <__swhatbuf_r>:
 8005382:	b570      	push	{r4, r5, r6, lr}
 8005384:	460e      	mov	r6, r1
 8005386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800538a:	2900      	cmp	r1, #0
 800538c:	b096      	sub	sp, #88	; 0x58
 800538e:	4614      	mov	r4, r2
 8005390:	461d      	mov	r5, r3
 8005392:	da08      	bge.n	80053a6 <__swhatbuf_r+0x24>
 8005394:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	602a      	str	r2, [r5, #0]
 800539c:	061a      	lsls	r2, r3, #24
 800539e:	d410      	bmi.n	80053c2 <__swhatbuf_r+0x40>
 80053a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053a4:	e00e      	b.n	80053c4 <__swhatbuf_r+0x42>
 80053a6:	466a      	mov	r2, sp
 80053a8:	f000 fed2 	bl	8006150 <_fstat_r>
 80053ac:	2800      	cmp	r0, #0
 80053ae:	dbf1      	blt.n	8005394 <__swhatbuf_r+0x12>
 80053b0:	9a01      	ldr	r2, [sp, #4]
 80053b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80053b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80053ba:	425a      	negs	r2, r3
 80053bc:	415a      	adcs	r2, r3
 80053be:	602a      	str	r2, [r5, #0]
 80053c0:	e7ee      	b.n	80053a0 <__swhatbuf_r+0x1e>
 80053c2:	2340      	movs	r3, #64	; 0x40
 80053c4:	2000      	movs	r0, #0
 80053c6:	6023      	str	r3, [r4, #0]
 80053c8:	b016      	add	sp, #88	; 0x58
 80053ca:	bd70      	pop	{r4, r5, r6, pc}

080053cc <__smakebuf_r>:
 80053cc:	898b      	ldrh	r3, [r1, #12]
 80053ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053d0:	079d      	lsls	r5, r3, #30
 80053d2:	4606      	mov	r6, r0
 80053d4:	460c      	mov	r4, r1
 80053d6:	d507      	bpl.n	80053e8 <__smakebuf_r+0x1c>
 80053d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	6123      	str	r3, [r4, #16]
 80053e0:	2301      	movs	r3, #1
 80053e2:	6163      	str	r3, [r4, #20]
 80053e4:	b002      	add	sp, #8
 80053e6:	bd70      	pop	{r4, r5, r6, pc}
 80053e8:	ab01      	add	r3, sp, #4
 80053ea:	466a      	mov	r2, sp
 80053ec:	f7ff ffc9 	bl	8005382 <__swhatbuf_r>
 80053f0:	9900      	ldr	r1, [sp, #0]
 80053f2:	4605      	mov	r5, r0
 80053f4:	4630      	mov	r0, r6
 80053f6:	f000 fc37 	bl	8005c68 <_malloc_r>
 80053fa:	b948      	cbnz	r0, 8005410 <__smakebuf_r+0x44>
 80053fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005400:	059a      	lsls	r2, r3, #22
 8005402:	d4ef      	bmi.n	80053e4 <__smakebuf_r+0x18>
 8005404:	f023 0303 	bic.w	r3, r3, #3
 8005408:	f043 0302 	orr.w	r3, r3, #2
 800540c:	81a3      	strh	r3, [r4, #12]
 800540e:	e7e3      	b.n	80053d8 <__smakebuf_r+0xc>
 8005410:	4b0d      	ldr	r3, [pc, #52]	; (8005448 <__smakebuf_r+0x7c>)
 8005412:	62b3      	str	r3, [r6, #40]	; 0x28
 8005414:	89a3      	ldrh	r3, [r4, #12]
 8005416:	6020      	str	r0, [r4, #0]
 8005418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800541c:	81a3      	strh	r3, [r4, #12]
 800541e:	9b00      	ldr	r3, [sp, #0]
 8005420:	6163      	str	r3, [r4, #20]
 8005422:	9b01      	ldr	r3, [sp, #4]
 8005424:	6120      	str	r0, [r4, #16]
 8005426:	b15b      	cbz	r3, 8005440 <__smakebuf_r+0x74>
 8005428:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800542c:	4630      	mov	r0, r6
 800542e:	f000 fea1 	bl	8006174 <_isatty_r>
 8005432:	b128      	cbz	r0, 8005440 <__smakebuf_r+0x74>
 8005434:	89a3      	ldrh	r3, [r4, #12]
 8005436:	f023 0303 	bic.w	r3, r3, #3
 800543a:	f043 0301 	orr.w	r3, r3, #1
 800543e:	81a3      	strh	r3, [r4, #12]
 8005440:	89a0      	ldrh	r0, [r4, #12]
 8005442:	4305      	orrs	r5, r0
 8005444:	81a5      	strh	r5, [r4, #12]
 8005446:	e7cd      	b.n	80053e4 <__smakebuf_r+0x18>
 8005448:	080051d1 	.word	0x080051d1

0800544c <malloc>:
 800544c:	4b02      	ldr	r3, [pc, #8]	; (8005458 <malloc+0xc>)
 800544e:	4601      	mov	r1, r0
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	f000 bc09 	b.w	8005c68 <_malloc_r>
 8005456:	bf00      	nop
 8005458:	20000010 	.word	0x20000010

0800545c <_Balloc>:
 800545c:	b570      	push	{r4, r5, r6, lr}
 800545e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005460:	4604      	mov	r4, r0
 8005462:	460d      	mov	r5, r1
 8005464:	b976      	cbnz	r6, 8005484 <_Balloc+0x28>
 8005466:	2010      	movs	r0, #16
 8005468:	f7ff fff0 	bl	800544c <malloc>
 800546c:	4602      	mov	r2, r0
 800546e:	6260      	str	r0, [r4, #36]	; 0x24
 8005470:	b920      	cbnz	r0, 800547c <_Balloc+0x20>
 8005472:	4b18      	ldr	r3, [pc, #96]	; (80054d4 <_Balloc+0x78>)
 8005474:	4818      	ldr	r0, [pc, #96]	; (80054d8 <_Balloc+0x7c>)
 8005476:	2166      	movs	r1, #102	; 0x66
 8005478:	f000 fe2a 	bl	80060d0 <__assert_func>
 800547c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005480:	6006      	str	r6, [r0, #0]
 8005482:	60c6      	str	r6, [r0, #12]
 8005484:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005486:	68f3      	ldr	r3, [r6, #12]
 8005488:	b183      	cbz	r3, 80054ac <_Balloc+0x50>
 800548a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005492:	b9b8      	cbnz	r0, 80054c4 <_Balloc+0x68>
 8005494:	2101      	movs	r1, #1
 8005496:	fa01 f605 	lsl.w	r6, r1, r5
 800549a:	1d72      	adds	r2, r6, #5
 800549c:	0092      	lsls	r2, r2, #2
 800549e:	4620      	mov	r0, r4
 80054a0:	f000 fb60 	bl	8005b64 <_calloc_r>
 80054a4:	b160      	cbz	r0, 80054c0 <_Balloc+0x64>
 80054a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80054aa:	e00e      	b.n	80054ca <_Balloc+0x6e>
 80054ac:	2221      	movs	r2, #33	; 0x21
 80054ae:	2104      	movs	r1, #4
 80054b0:	4620      	mov	r0, r4
 80054b2:	f000 fb57 	bl	8005b64 <_calloc_r>
 80054b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054b8:	60f0      	str	r0, [r6, #12]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1e4      	bne.n	800548a <_Balloc+0x2e>
 80054c0:	2000      	movs	r0, #0
 80054c2:	bd70      	pop	{r4, r5, r6, pc}
 80054c4:	6802      	ldr	r2, [r0, #0]
 80054c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80054ca:	2300      	movs	r3, #0
 80054cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80054d0:	e7f7      	b.n	80054c2 <_Balloc+0x66>
 80054d2:	bf00      	nop
 80054d4:	080064d5 	.word	0x080064d5
 80054d8:	080065b8 	.word	0x080065b8

080054dc <_Bfree>:
 80054dc:	b570      	push	{r4, r5, r6, lr}
 80054de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80054e0:	4605      	mov	r5, r0
 80054e2:	460c      	mov	r4, r1
 80054e4:	b976      	cbnz	r6, 8005504 <_Bfree+0x28>
 80054e6:	2010      	movs	r0, #16
 80054e8:	f7ff ffb0 	bl	800544c <malloc>
 80054ec:	4602      	mov	r2, r0
 80054ee:	6268      	str	r0, [r5, #36]	; 0x24
 80054f0:	b920      	cbnz	r0, 80054fc <_Bfree+0x20>
 80054f2:	4b09      	ldr	r3, [pc, #36]	; (8005518 <_Bfree+0x3c>)
 80054f4:	4809      	ldr	r0, [pc, #36]	; (800551c <_Bfree+0x40>)
 80054f6:	218a      	movs	r1, #138	; 0x8a
 80054f8:	f000 fdea 	bl	80060d0 <__assert_func>
 80054fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005500:	6006      	str	r6, [r0, #0]
 8005502:	60c6      	str	r6, [r0, #12]
 8005504:	b13c      	cbz	r4, 8005516 <_Bfree+0x3a>
 8005506:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005508:	6862      	ldr	r2, [r4, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005510:	6021      	str	r1, [r4, #0]
 8005512:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005516:	bd70      	pop	{r4, r5, r6, pc}
 8005518:	080064d5 	.word	0x080064d5
 800551c:	080065b8 	.word	0x080065b8

08005520 <__multadd>:
 8005520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005524:	690d      	ldr	r5, [r1, #16]
 8005526:	4607      	mov	r7, r0
 8005528:	460c      	mov	r4, r1
 800552a:	461e      	mov	r6, r3
 800552c:	f101 0c14 	add.w	ip, r1, #20
 8005530:	2000      	movs	r0, #0
 8005532:	f8dc 3000 	ldr.w	r3, [ip]
 8005536:	b299      	uxth	r1, r3
 8005538:	fb02 6101 	mla	r1, r2, r1, r6
 800553c:	0c1e      	lsrs	r6, r3, #16
 800553e:	0c0b      	lsrs	r3, r1, #16
 8005540:	fb02 3306 	mla	r3, r2, r6, r3
 8005544:	b289      	uxth	r1, r1
 8005546:	3001      	adds	r0, #1
 8005548:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800554c:	4285      	cmp	r5, r0
 800554e:	f84c 1b04 	str.w	r1, [ip], #4
 8005552:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005556:	dcec      	bgt.n	8005532 <__multadd+0x12>
 8005558:	b30e      	cbz	r6, 800559e <__multadd+0x7e>
 800555a:	68a3      	ldr	r3, [r4, #8]
 800555c:	42ab      	cmp	r3, r5
 800555e:	dc19      	bgt.n	8005594 <__multadd+0x74>
 8005560:	6861      	ldr	r1, [r4, #4]
 8005562:	4638      	mov	r0, r7
 8005564:	3101      	adds	r1, #1
 8005566:	f7ff ff79 	bl	800545c <_Balloc>
 800556a:	4680      	mov	r8, r0
 800556c:	b928      	cbnz	r0, 800557a <__multadd+0x5a>
 800556e:	4602      	mov	r2, r0
 8005570:	4b0c      	ldr	r3, [pc, #48]	; (80055a4 <__multadd+0x84>)
 8005572:	480d      	ldr	r0, [pc, #52]	; (80055a8 <__multadd+0x88>)
 8005574:	21b5      	movs	r1, #181	; 0xb5
 8005576:	f000 fdab 	bl	80060d0 <__assert_func>
 800557a:	6922      	ldr	r2, [r4, #16]
 800557c:	3202      	adds	r2, #2
 800557e:	f104 010c 	add.w	r1, r4, #12
 8005582:	0092      	lsls	r2, r2, #2
 8005584:	300c      	adds	r0, #12
 8005586:	f7fe f8f5 	bl	8003774 <memcpy>
 800558a:	4621      	mov	r1, r4
 800558c:	4638      	mov	r0, r7
 800558e:	f7ff ffa5 	bl	80054dc <_Bfree>
 8005592:	4644      	mov	r4, r8
 8005594:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005598:	3501      	adds	r5, #1
 800559a:	615e      	str	r6, [r3, #20]
 800559c:	6125      	str	r5, [r4, #16]
 800559e:	4620      	mov	r0, r4
 80055a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055a4:	08006547 	.word	0x08006547
 80055a8:	080065b8 	.word	0x080065b8

080055ac <__hi0bits>:
 80055ac:	0c03      	lsrs	r3, r0, #16
 80055ae:	041b      	lsls	r3, r3, #16
 80055b0:	b9d3      	cbnz	r3, 80055e8 <__hi0bits+0x3c>
 80055b2:	0400      	lsls	r0, r0, #16
 80055b4:	2310      	movs	r3, #16
 80055b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80055ba:	bf04      	itt	eq
 80055bc:	0200      	lsleq	r0, r0, #8
 80055be:	3308      	addeq	r3, #8
 80055c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80055c4:	bf04      	itt	eq
 80055c6:	0100      	lsleq	r0, r0, #4
 80055c8:	3304      	addeq	r3, #4
 80055ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80055ce:	bf04      	itt	eq
 80055d0:	0080      	lsleq	r0, r0, #2
 80055d2:	3302      	addeq	r3, #2
 80055d4:	2800      	cmp	r0, #0
 80055d6:	db05      	blt.n	80055e4 <__hi0bits+0x38>
 80055d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80055dc:	f103 0301 	add.w	r3, r3, #1
 80055e0:	bf08      	it	eq
 80055e2:	2320      	moveq	r3, #32
 80055e4:	4618      	mov	r0, r3
 80055e6:	4770      	bx	lr
 80055e8:	2300      	movs	r3, #0
 80055ea:	e7e4      	b.n	80055b6 <__hi0bits+0xa>

080055ec <__lo0bits>:
 80055ec:	6803      	ldr	r3, [r0, #0]
 80055ee:	f013 0207 	ands.w	r2, r3, #7
 80055f2:	4601      	mov	r1, r0
 80055f4:	d00b      	beq.n	800560e <__lo0bits+0x22>
 80055f6:	07da      	lsls	r2, r3, #31
 80055f8:	d423      	bmi.n	8005642 <__lo0bits+0x56>
 80055fa:	0798      	lsls	r0, r3, #30
 80055fc:	bf49      	itett	mi
 80055fe:	085b      	lsrmi	r3, r3, #1
 8005600:	089b      	lsrpl	r3, r3, #2
 8005602:	2001      	movmi	r0, #1
 8005604:	600b      	strmi	r3, [r1, #0]
 8005606:	bf5c      	itt	pl
 8005608:	600b      	strpl	r3, [r1, #0]
 800560a:	2002      	movpl	r0, #2
 800560c:	4770      	bx	lr
 800560e:	b298      	uxth	r0, r3
 8005610:	b9a8      	cbnz	r0, 800563e <__lo0bits+0x52>
 8005612:	0c1b      	lsrs	r3, r3, #16
 8005614:	2010      	movs	r0, #16
 8005616:	b2da      	uxtb	r2, r3
 8005618:	b90a      	cbnz	r2, 800561e <__lo0bits+0x32>
 800561a:	3008      	adds	r0, #8
 800561c:	0a1b      	lsrs	r3, r3, #8
 800561e:	071a      	lsls	r2, r3, #28
 8005620:	bf04      	itt	eq
 8005622:	091b      	lsreq	r3, r3, #4
 8005624:	3004      	addeq	r0, #4
 8005626:	079a      	lsls	r2, r3, #30
 8005628:	bf04      	itt	eq
 800562a:	089b      	lsreq	r3, r3, #2
 800562c:	3002      	addeq	r0, #2
 800562e:	07da      	lsls	r2, r3, #31
 8005630:	d403      	bmi.n	800563a <__lo0bits+0x4e>
 8005632:	085b      	lsrs	r3, r3, #1
 8005634:	f100 0001 	add.w	r0, r0, #1
 8005638:	d005      	beq.n	8005646 <__lo0bits+0x5a>
 800563a:	600b      	str	r3, [r1, #0]
 800563c:	4770      	bx	lr
 800563e:	4610      	mov	r0, r2
 8005640:	e7e9      	b.n	8005616 <__lo0bits+0x2a>
 8005642:	2000      	movs	r0, #0
 8005644:	4770      	bx	lr
 8005646:	2020      	movs	r0, #32
 8005648:	4770      	bx	lr
	...

0800564c <__i2b>:
 800564c:	b510      	push	{r4, lr}
 800564e:	460c      	mov	r4, r1
 8005650:	2101      	movs	r1, #1
 8005652:	f7ff ff03 	bl	800545c <_Balloc>
 8005656:	4602      	mov	r2, r0
 8005658:	b928      	cbnz	r0, 8005666 <__i2b+0x1a>
 800565a:	4b05      	ldr	r3, [pc, #20]	; (8005670 <__i2b+0x24>)
 800565c:	4805      	ldr	r0, [pc, #20]	; (8005674 <__i2b+0x28>)
 800565e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005662:	f000 fd35 	bl	80060d0 <__assert_func>
 8005666:	2301      	movs	r3, #1
 8005668:	6144      	str	r4, [r0, #20]
 800566a:	6103      	str	r3, [r0, #16]
 800566c:	bd10      	pop	{r4, pc}
 800566e:	bf00      	nop
 8005670:	08006547 	.word	0x08006547
 8005674:	080065b8 	.word	0x080065b8

08005678 <__multiply>:
 8005678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567c:	4691      	mov	r9, r2
 800567e:	690a      	ldr	r2, [r1, #16]
 8005680:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005684:	429a      	cmp	r2, r3
 8005686:	bfb8      	it	lt
 8005688:	460b      	movlt	r3, r1
 800568a:	460c      	mov	r4, r1
 800568c:	bfbc      	itt	lt
 800568e:	464c      	movlt	r4, r9
 8005690:	4699      	movlt	r9, r3
 8005692:	6927      	ldr	r7, [r4, #16]
 8005694:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005698:	68a3      	ldr	r3, [r4, #8]
 800569a:	6861      	ldr	r1, [r4, #4]
 800569c:	eb07 060a 	add.w	r6, r7, sl
 80056a0:	42b3      	cmp	r3, r6
 80056a2:	b085      	sub	sp, #20
 80056a4:	bfb8      	it	lt
 80056a6:	3101      	addlt	r1, #1
 80056a8:	f7ff fed8 	bl	800545c <_Balloc>
 80056ac:	b930      	cbnz	r0, 80056bc <__multiply+0x44>
 80056ae:	4602      	mov	r2, r0
 80056b0:	4b44      	ldr	r3, [pc, #272]	; (80057c4 <__multiply+0x14c>)
 80056b2:	4845      	ldr	r0, [pc, #276]	; (80057c8 <__multiply+0x150>)
 80056b4:	f240 115d 	movw	r1, #349	; 0x15d
 80056b8:	f000 fd0a 	bl	80060d0 <__assert_func>
 80056bc:	f100 0514 	add.w	r5, r0, #20
 80056c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80056c4:	462b      	mov	r3, r5
 80056c6:	2200      	movs	r2, #0
 80056c8:	4543      	cmp	r3, r8
 80056ca:	d321      	bcc.n	8005710 <__multiply+0x98>
 80056cc:	f104 0314 	add.w	r3, r4, #20
 80056d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80056d4:	f109 0314 	add.w	r3, r9, #20
 80056d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80056dc:	9202      	str	r2, [sp, #8]
 80056de:	1b3a      	subs	r2, r7, r4
 80056e0:	3a15      	subs	r2, #21
 80056e2:	f022 0203 	bic.w	r2, r2, #3
 80056e6:	3204      	adds	r2, #4
 80056e8:	f104 0115 	add.w	r1, r4, #21
 80056ec:	428f      	cmp	r7, r1
 80056ee:	bf38      	it	cc
 80056f0:	2204      	movcc	r2, #4
 80056f2:	9201      	str	r2, [sp, #4]
 80056f4:	9a02      	ldr	r2, [sp, #8]
 80056f6:	9303      	str	r3, [sp, #12]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d80c      	bhi.n	8005716 <__multiply+0x9e>
 80056fc:	2e00      	cmp	r6, #0
 80056fe:	dd03      	ble.n	8005708 <__multiply+0x90>
 8005700:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005704:	2b00      	cmp	r3, #0
 8005706:	d05a      	beq.n	80057be <__multiply+0x146>
 8005708:	6106      	str	r6, [r0, #16]
 800570a:	b005      	add	sp, #20
 800570c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005710:	f843 2b04 	str.w	r2, [r3], #4
 8005714:	e7d8      	b.n	80056c8 <__multiply+0x50>
 8005716:	f8b3 a000 	ldrh.w	sl, [r3]
 800571a:	f1ba 0f00 	cmp.w	sl, #0
 800571e:	d024      	beq.n	800576a <__multiply+0xf2>
 8005720:	f104 0e14 	add.w	lr, r4, #20
 8005724:	46a9      	mov	r9, r5
 8005726:	f04f 0c00 	mov.w	ip, #0
 800572a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800572e:	f8d9 1000 	ldr.w	r1, [r9]
 8005732:	fa1f fb82 	uxth.w	fp, r2
 8005736:	b289      	uxth	r1, r1
 8005738:	fb0a 110b 	mla	r1, sl, fp, r1
 800573c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005740:	f8d9 2000 	ldr.w	r2, [r9]
 8005744:	4461      	add	r1, ip
 8005746:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800574a:	fb0a c20b 	mla	r2, sl, fp, ip
 800574e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005752:	b289      	uxth	r1, r1
 8005754:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005758:	4577      	cmp	r7, lr
 800575a:	f849 1b04 	str.w	r1, [r9], #4
 800575e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005762:	d8e2      	bhi.n	800572a <__multiply+0xb2>
 8005764:	9a01      	ldr	r2, [sp, #4]
 8005766:	f845 c002 	str.w	ip, [r5, r2]
 800576a:	9a03      	ldr	r2, [sp, #12]
 800576c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005770:	3304      	adds	r3, #4
 8005772:	f1b9 0f00 	cmp.w	r9, #0
 8005776:	d020      	beq.n	80057ba <__multiply+0x142>
 8005778:	6829      	ldr	r1, [r5, #0]
 800577a:	f104 0c14 	add.w	ip, r4, #20
 800577e:	46ae      	mov	lr, r5
 8005780:	f04f 0a00 	mov.w	sl, #0
 8005784:	f8bc b000 	ldrh.w	fp, [ip]
 8005788:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800578c:	fb09 220b 	mla	r2, r9, fp, r2
 8005790:	4492      	add	sl, r2
 8005792:	b289      	uxth	r1, r1
 8005794:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005798:	f84e 1b04 	str.w	r1, [lr], #4
 800579c:	f85c 2b04 	ldr.w	r2, [ip], #4
 80057a0:	f8be 1000 	ldrh.w	r1, [lr]
 80057a4:	0c12      	lsrs	r2, r2, #16
 80057a6:	fb09 1102 	mla	r1, r9, r2, r1
 80057aa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80057ae:	4567      	cmp	r7, ip
 80057b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80057b4:	d8e6      	bhi.n	8005784 <__multiply+0x10c>
 80057b6:	9a01      	ldr	r2, [sp, #4]
 80057b8:	50a9      	str	r1, [r5, r2]
 80057ba:	3504      	adds	r5, #4
 80057bc:	e79a      	b.n	80056f4 <__multiply+0x7c>
 80057be:	3e01      	subs	r6, #1
 80057c0:	e79c      	b.n	80056fc <__multiply+0x84>
 80057c2:	bf00      	nop
 80057c4:	08006547 	.word	0x08006547
 80057c8:	080065b8 	.word	0x080065b8

080057cc <__pow5mult>:
 80057cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057d0:	4615      	mov	r5, r2
 80057d2:	f012 0203 	ands.w	r2, r2, #3
 80057d6:	4606      	mov	r6, r0
 80057d8:	460f      	mov	r7, r1
 80057da:	d007      	beq.n	80057ec <__pow5mult+0x20>
 80057dc:	4c25      	ldr	r4, [pc, #148]	; (8005874 <__pow5mult+0xa8>)
 80057de:	3a01      	subs	r2, #1
 80057e0:	2300      	movs	r3, #0
 80057e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80057e6:	f7ff fe9b 	bl	8005520 <__multadd>
 80057ea:	4607      	mov	r7, r0
 80057ec:	10ad      	asrs	r5, r5, #2
 80057ee:	d03d      	beq.n	800586c <__pow5mult+0xa0>
 80057f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80057f2:	b97c      	cbnz	r4, 8005814 <__pow5mult+0x48>
 80057f4:	2010      	movs	r0, #16
 80057f6:	f7ff fe29 	bl	800544c <malloc>
 80057fa:	4602      	mov	r2, r0
 80057fc:	6270      	str	r0, [r6, #36]	; 0x24
 80057fe:	b928      	cbnz	r0, 800580c <__pow5mult+0x40>
 8005800:	4b1d      	ldr	r3, [pc, #116]	; (8005878 <__pow5mult+0xac>)
 8005802:	481e      	ldr	r0, [pc, #120]	; (800587c <__pow5mult+0xb0>)
 8005804:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005808:	f000 fc62 	bl	80060d0 <__assert_func>
 800580c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005810:	6004      	str	r4, [r0, #0]
 8005812:	60c4      	str	r4, [r0, #12]
 8005814:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005818:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800581c:	b94c      	cbnz	r4, 8005832 <__pow5mult+0x66>
 800581e:	f240 2171 	movw	r1, #625	; 0x271
 8005822:	4630      	mov	r0, r6
 8005824:	f7ff ff12 	bl	800564c <__i2b>
 8005828:	2300      	movs	r3, #0
 800582a:	f8c8 0008 	str.w	r0, [r8, #8]
 800582e:	4604      	mov	r4, r0
 8005830:	6003      	str	r3, [r0, #0]
 8005832:	f04f 0900 	mov.w	r9, #0
 8005836:	07eb      	lsls	r3, r5, #31
 8005838:	d50a      	bpl.n	8005850 <__pow5mult+0x84>
 800583a:	4639      	mov	r1, r7
 800583c:	4622      	mov	r2, r4
 800583e:	4630      	mov	r0, r6
 8005840:	f7ff ff1a 	bl	8005678 <__multiply>
 8005844:	4639      	mov	r1, r7
 8005846:	4680      	mov	r8, r0
 8005848:	4630      	mov	r0, r6
 800584a:	f7ff fe47 	bl	80054dc <_Bfree>
 800584e:	4647      	mov	r7, r8
 8005850:	106d      	asrs	r5, r5, #1
 8005852:	d00b      	beq.n	800586c <__pow5mult+0xa0>
 8005854:	6820      	ldr	r0, [r4, #0]
 8005856:	b938      	cbnz	r0, 8005868 <__pow5mult+0x9c>
 8005858:	4622      	mov	r2, r4
 800585a:	4621      	mov	r1, r4
 800585c:	4630      	mov	r0, r6
 800585e:	f7ff ff0b 	bl	8005678 <__multiply>
 8005862:	6020      	str	r0, [r4, #0]
 8005864:	f8c0 9000 	str.w	r9, [r0]
 8005868:	4604      	mov	r4, r0
 800586a:	e7e4      	b.n	8005836 <__pow5mult+0x6a>
 800586c:	4638      	mov	r0, r7
 800586e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005872:	bf00      	nop
 8005874:	08006708 	.word	0x08006708
 8005878:	080064d5 	.word	0x080064d5
 800587c:	080065b8 	.word	0x080065b8

08005880 <__lshift>:
 8005880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005884:	460c      	mov	r4, r1
 8005886:	6849      	ldr	r1, [r1, #4]
 8005888:	6923      	ldr	r3, [r4, #16]
 800588a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800588e:	68a3      	ldr	r3, [r4, #8]
 8005890:	4607      	mov	r7, r0
 8005892:	4691      	mov	r9, r2
 8005894:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005898:	f108 0601 	add.w	r6, r8, #1
 800589c:	42b3      	cmp	r3, r6
 800589e:	db0b      	blt.n	80058b8 <__lshift+0x38>
 80058a0:	4638      	mov	r0, r7
 80058a2:	f7ff fddb 	bl	800545c <_Balloc>
 80058a6:	4605      	mov	r5, r0
 80058a8:	b948      	cbnz	r0, 80058be <__lshift+0x3e>
 80058aa:	4602      	mov	r2, r0
 80058ac:	4b2a      	ldr	r3, [pc, #168]	; (8005958 <__lshift+0xd8>)
 80058ae:	482b      	ldr	r0, [pc, #172]	; (800595c <__lshift+0xdc>)
 80058b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80058b4:	f000 fc0c 	bl	80060d0 <__assert_func>
 80058b8:	3101      	adds	r1, #1
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	e7ee      	b.n	800589c <__lshift+0x1c>
 80058be:	2300      	movs	r3, #0
 80058c0:	f100 0114 	add.w	r1, r0, #20
 80058c4:	f100 0210 	add.w	r2, r0, #16
 80058c8:	4618      	mov	r0, r3
 80058ca:	4553      	cmp	r3, sl
 80058cc:	db37      	blt.n	800593e <__lshift+0xbe>
 80058ce:	6920      	ldr	r0, [r4, #16]
 80058d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80058d4:	f104 0314 	add.w	r3, r4, #20
 80058d8:	f019 091f 	ands.w	r9, r9, #31
 80058dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80058e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80058e4:	d02f      	beq.n	8005946 <__lshift+0xc6>
 80058e6:	f1c9 0e20 	rsb	lr, r9, #32
 80058ea:	468a      	mov	sl, r1
 80058ec:	f04f 0c00 	mov.w	ip, #0
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	fa02 f209 	lsl.w	r2, r2, r9
 80058f6:	ea42 020c 	orr.w	r2, r2, ip
 80058fa:	f84a 2b04 	str.w	r2, [sl], #4
 80058fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005902:	4298      	cmp	r0, r3
 8005904:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005908:	d8f2      	bhi.n	80058f0 <__lshift+0x70>
 800590a:	1b03      	subs	r3, r0, r4
 800590c:	3b15      	subs	r3, #21
 800590e:	f023 0303 	bic.w	r3, r3, #3
 8005912:	3304      	adds	r3, #4
 8005914:	f104 0215 	add.w	r2, r4, #21
 8005918:	4290      	cmp	r0, r2
 800591a:	bf38      	it	cc
 800591c:	2304      	movcc	r3, #4
 800591e:	f841 c003 	str.w	ip, [r1, r3]
 8005922:	f1bc 0f00 	cmp.w	ip, #0
 8005926:	d001      	beq.n	800592c <__lshift+0xac>
 8005928:	f108 0602 	add.w	r6, r8, #2
 800592c:	3e01      	subs	r6, #1
 800592e:	4638      	mov	r0, r7
 8005930:	612e      	str	r6, [r5, #16]
 8005932:	4621      	mov	r1, r4
 8005934:	f7ff fdd2 	bl	80054dc <_Bfree>
 8005938:	4628      	mov	r0, r5
 800593a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800593e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005942:	3301      	adds	r3, #1
 8005944:	e7c1      	b.n	80058ca <__lshift+0x4a>
 8005946:	3904      	subs	r1, #4
 8005948:	f853 2b04 	ldr.w	r2, [r3], #4
 800594c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005950:	4298      	cmp	r0, r3
 8005952:	d8f9      	bhi.n	8005948 <__lshift+0xc8>
 8005954:	e7ea      	b.n	800592c <__lshift+0xac>
 8005956:	bf00      	nop
 8005958:	08006547 	.word	0x08006547
 800595c:	080065b8 	.word	0x080065b8

08005960 <__mcmp>:
 8005960:	b530      	push	{r4, r5, lr}
 8005962:	6902      	ldr	r2, [r0, #16]
 8005964:	690c      	ldr	r4, [r1, #16]
 8005966:	1b12      	subs	r2, r2, r4
 8005968:	d10e      	bne.n	8005988 <__mcmp+0x28>
 800596a:	f100 0314 	add.w	r3, r0, #20
 800596e:	3114      	adds	r1, #20
 8005970:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005974:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005978:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800597c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005980:	42a5      	cmp	r5, r4
 8005982:	d003      	beq.n	800598c <__mcmp+0x2c>
 8005984:	d305      	bcc.n	8005992 <__mcmp+0x32>
 8005986:	2201      	movs	r2, #1
 8005988:	4610      	mov	r0, r2
 800598a:	bd30      	pop	{r4, r5, pc}
 800598c:	4283      	cmp	r3, r0
 800598e:	d3f3      	bcc.n	8005978 <__mcmp+0x18>
 8005990:	e7fa      	b.n	8005988 <__mcmp+0x28>
 8005992:	f04f 32ff 	mov.w	r2, #4294967295
 8005996:	e7f7      	b.n	8005988 <__mcmp+0x28>

08005998 <__mdiff>:
 8005998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599c:	460c      	mov	r4, r1
 800599e:	4606      	mov	r6, r0
 80059a0:	4611      	mov	r1, r2
 80059a2:	4620      	mov	r0, r4
 80059a4:	4690      	mov	r8, r2
 80059a6:	f7ff ffdb 	bl	8005960 <__mcmp>
 80059aa:	1e05      	subs	r5, r0, #0
 80059ac:	d110      	bne.n	80059d0 <__mdiff+0x38>
 80059ae:	4629      	mov	r1, r5
 80059b0:	4630      	mov	r0, r6
 80059b2:	f7ff fd53 	bl	800545c <_Balloc>
 80059b6:	b930      	cbnz	r0, 80059c6 <__mdiff+0x2e>
 80059b8:	4b3a      	ldr	r3, [pc, #232]	; (8005aa4 <__mdiff+0x10c>)
 80059ba:	4602      	mov	r2, r0
 80059bc:	f240 2132 	movw	r1, #562	; 0x232
 80059c0:	4839      	ldr	r0, [pc, #228]	; (8005aa8 <__mdiff+0x110>)
 80059c2:	f000 fb85 	bl	80060d0 <__assert_func>
 80059c6:	2301      	movs	r3, #1
 80059c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80059cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d0:	bfa4      	itt	ge
 80059d2:	4643      	movge	r3, r8
 80059d4:	46a0      	movge	r8, r4
 80059d6:	4630      	mov	r0, r6
 80059d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80059dc:	bfa6      	itte	ge
 80059de:	461c      	movge	r4, r3
 80059e0:	2500      	movge	r5, #0
 80059e2:	2501      	movlt	r5, #1
 80059e4:	f7ff fd3a 	bl	800545c <_Balloc>
 80059e8:	b920      	cbnz	r0, 80059f4 <__mdiff+0x5c>
 80059ea:	4b2e      	ldr	r3, [pc, #184]	; (8005aa4 <__mdiff+0x10c>)
 80059ec:	4602      	mov	r2, r0
 80059ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 80059f2:	e7e5      	b.n	80059c0 <__mdiff+0x28>
 80059f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80059f8:	6926      	ldr	r6, [r4, #16]
 80059fa:	60c5      	str	r5, [r0, #12]
 80059fc:	f104 0914 	add.w	r9, r4, #20
 8005a00:	f108 0514 	add.w	r5, r8, #20
 8005a04:	f100 0e14 	add.w	lr, r0, #20
 8005a08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005a0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005a10:	f108 0210 	add.w	r2, r8, #16
 8005a14:	46f2      	mov	sl, lr
 8005a16:	2100      	movs	r1, #0
 8005a18:	f859 3b04 	ldr.w	r3, [r9], #4
 8005a1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005a20:	fa1f f883 	uxth.w	r8, r3
 8005a24:	fa11 f18b 	uxtah	r1, r1, fp
 8005a28:	0c1b      	lsrs	r3, r3, #16
 8005a2a:	eba1 0808 	sub.w	r8, r1, r8
 8005a2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005a32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005a36:	fa1f f888 	uxth.w	r8, r8
 8005a3a:	1419      	asrs	r1, r3, #16
 8005a3c:	454e      	cmp	r6, r9
 8005a3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005a42:	f84a 3b04 	str.w	r3, [sl], #4
 8005a46:	d8e7      	bhi.n	8005a18 <__mdiff+0x80>
 8005a48:	1b33      	subs	r3, r6, r4
 8005a4a:	3b15      	subs	r3, #21
 8005a4c:	f023 0303 	bic.w	r3, r3, #3
 8005a50:	3304      	adds	r3, #4
 8005a52:	3415      	adds	r4, #21
 8005a54:	42a6      	cmp	r6, r4
 8005a56:	bf38      	it	cc
 8005a58:	2304      	movcc	r3, #4
 8005a5a:	441d      	add	r5, r3
 8005a5c:	4473      	add	r3, lr
 8005a5e:	469e      	mov	lr, r3
 8005a60:	462e      	mov	r6, r5
 8005a62:	4566      	cmp	r6, ip
 8005a64:	d30e      	bcc.n	8005a84 <__mdiff+0xec>
 8005a66:	f10c 0203 	add.w	r2, ip, #3
 8005a6a:	1b52      	subs	r2, r2, r5
 8005a6c:	f022 0203 	bic.w	r2, r2, #3
 8005a70:	3d03      	subs	r5, #3
 8005a72:	45ac      	cmp	ip, r5
 8005a74:	bf38      	it	cc
 8005a76:	2200      	movcc	r2, #0
 8005a78:	441a      	add	r2, r3
 8005a7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005a7e:	b17b      	cbz	r3, 8005aa0 <__mdiff+0x108>
 8005a80:	6107      	str	r7, [r0, #16]
 8005a82:	e7a3      	b.n	80059cc <__mdiff+0x34>
 8005a84:	f856 8b04 	ldr.w	r8, [r6], #4
 8005a88:	fa11 f288 	uxtah	r2, r1, r8
 8005a8c:	1414      	asrs	r4, r2, #16
 8005a8e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005a92:	b292      	uxth	r2, r2
 8005a94:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005a98:	f84e 2b04 	str.w	r2, [lr], #4
 8005a9c:	1421      	asrs	r1, r4, #16
 8005a9e:	e7e0      	b.n	8005a62 <__mdiff+0xca>
 8005aa0:	3f01      	subs	r7, #1
 8005aa2:	e7ea      	b.n	8005a7a <__mdiff+0xe2>
 8005aa4:	08006547 	.word	0x08006547
 8005aa8:	080065b8 	.word	0x080065b8

08005aac <__d2b>:
 8005aac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ab0:	4689      	mov	r9, r1
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	ec57 6b10 	vmov	r6, r7, d0
 8005ab8:	4690      	mov	r8, r2
 8005aba:	f7ff fccf 	bl	800545c <_Balloc>
 8005abe:	4604      	mov	r4, r0
 8005ac0:	b930      	cbnz	r0, 8005ad0 <__d2b+0x24>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	4b25      	ldr	r3, [pc, #148]	; (8005b5c <__d2b+0xb0>)
 8005ac6:	4826      	ldr	r0, [pc, #152]	; (8005b60 <__d2b+0xb4>)
 8005ac8:	f240 310a 	movw	r1, #778	; 0x30a
 8005acc:	f000 fb00 	bl	80060d0 <__assert_func>
 8005ad0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005ad4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005ad8:	bb35      	cbnz	r5, 8005b28 <__d2b+0x7c>
 8005ada:	2e00      	cmp	r6, #0
 8005adc:	9301      	str	r3, [sp, #4]
 8005ade:	d028      	beq.n	8005b32 <__d2b+0x86>
 8005ae0:	4668      	mov	r0, sp
 8005ae2:	9600      	str	r6, [sp, #0]
 8005ae4:	f7ff fd82 	bl	80055ec <__lo0bits>
 8005ae8:	9900      	ldr	r1, [sp, #0]
 8005aea:	b300      	cbz	r0, 8005b2e <__d2b+0x82>
 8005aec:	9a01      	ldr	r2, [sp, #4]
 8005aee:	f1c0 0320 	rsb	r3, r0, #32
 8005af2:	fa02 f303 	lsl.w	r3, r2, r3
 8005af6:	430b      	orrs	r3, r1
 8005af8:	40c2      	lsrs	r2, r0
 8005afa:	6163      	str	r3, [r4, #20]
 8005afc:	9201      	str	r2, [sp, #4]
 8005afe:	9b01      	ldr	r3, [sp, #4]
 8005b00:	61a3      	str	r3, [r4, #24]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	bf14      	ite	ne
 8005b06:	2202      	movne	r2, #2
 8005b08:	2201      	moveq	r2, #1
 8005b0a:	6122      	str	r2, [r4, #16]
 8005b0c:	b1d5      	cbz	r5, 8005b44 <__d2b+0x98>
 8005b0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005b12:	4405      	add	r5, r0
 8005b14:	f8c9 5000 	str.w	r5, [r9]
 8005b18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005b1c:	f8c8 0000 	str.w	r0, [r8]
 8005b20:	4620      	mov	r0, r4
 8005b22:	b003      	add	sp, #12
 8005b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b2c:	e7d5      	b.n	8005ada <__d2b+0x2e>
 8005b2e:	6161      	str	r1, [r4, #20]
 8005b30:	e7e5      	b.n	8005afe <__d2b+0x52>
 8005b32:	a801      	add	r0, sp, #4
 8005b34:	f7ff fd5a 	bl	80055ec <__lo0bits>
 8005b38:	9b01      	ldr	r3, [sp, #4]
 8005b3a:	6163      	str	r3, [r4, #20]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	6122      	str	r2, [r4, #16]
 8005b40:	3020      	adds	r0, #32
 8005b42:	e7e3      	b.n	8005b0c <__d2b+0x60>
 8005b44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005b48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005b4c:	f8c9 0000 	str.w	r0, [r9]
 8005b50:	6918      	ldr	r0, [r3, #16]
 8005b52:	f7ff fd2b 	bl	80055ac <__hi0bits>
 8005b56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005b5a:	e7df      	b.n	8005b1c <__d2b+0x70>
 8005b5c:	08006547 	.word	0x08006547
 8005b60:	080065b8 	.word	0x080065b8

08005b64 <_calloc_r>:
 8005b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b66:	fba1 2402 	umull	r2, r4, r1, r2
 8005b6a:	b94c      	cbnz	r4, 8005b80 <_calloc_r+0x1c>
 8005b6c:	4611      	mov	r1, r2
 8005b6e:	9201      	str	r2, [sp, #4]
 8005b70:	f000 f87a 	bl	8005c68 <_malloc_r>
 8005b74:	9a01      	ldr	r2, [sp, #4]
 8005b76:	4605      	mov	r5, r0
 8005b78:	b930      	cbnz	r0, 8005b88 <_calloc_r+0x24>
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	b003      	add	sp, #12
 8005b7e:	bd30      	pop	{r4, r5, pc}
 8005b80:	220c      	movs	r2, #12
 8005b82:	6002      	str	r2, [r0, #0]
 8005b84:	2500      	movs	r5, #0
 8005b86:	e7f8      	b.n	8005b7a <_calloc_r+0x16>
 8005b88:	4621      	mov	r1, r4
 8005b8a:	f7fd fe01 	bl	8003790 <memset>
 8005b8e:	e7f4      	b.n	8005b7a <_calloc_r+0x16>

08005b90 <_free_r>:
 8005b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b92:	2900      	cmp	r1, #0
 8005b94:	d044      	beq.n	8005c20 <_free_r+0x90>
 8005b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b9a:	9001      	str	r0, [sp, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f1a1 0404 	sub.w	r4, r1, #4
 8005ba2:	bfb8      	it	lt
 8005ba4:	18e4      	addlt	r4, r4, r3
 8005ba6:	f000 fb19 	bl	80061dc <__malloc_lock>
 8005baa:	4a1e      	ldr	r2, [pc, #120]	; (8005c24 <_free_r+0x94>)
 8005bac:	9801      	ldr	r0, [sp, #4]
 8005bae:	6813      	ldr	r3, [r2, #0]
 8005bb0:	b933      	cbnz	r3, 8005bc0 <_free_r+0x30>
 8005bb2:	6063      	str	r3, [r4, #4]
 8005bb4:	6014      	str	r4, [r2, #0]
 8005bb6:	b003      	add	sp, #12
 8005bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bbc:	f000 bb14 	b.w	80061e8 <__malloc_unlock>
 8005bc0:	42a3      	cmp	r3, r4
 8005bc2:	d908      	bls.n	8005bd6 <_free_r+0x46>
 8005bc4:	6825      	ldr	r5, [r4, #0]
 8005bc6:	1961      	adds	r1, r4, r5
 8005bc8:	428b      	cmp	r3, r1
 8005bca:	bf01      	itttt	eq
 8005bcc:	6819      	ldreq	r1, [r3, #0]
 8005bce:	685b      	ldreq	r3, [r3, #4]
 8005bd0:	1949      	addeq	r1, r1, r5
 8005bd2:	6021      	streq	r1, [r4, #0]
 8005bd4:	e7ed      	b.n	8005bb2 <_free_r+0x22>
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	b10b      	cbz	r3, 8005be0 <_free_r+0x50>
 8005bdc:	42a3      	cmp	r3, r4
 8005bde:	d9fa      	bls.n	8005bd6 <_free_r+0x46>
 8005be0:	6811      	ldr	r1, [r2, #0]
 8005be2:	1855      	adds	r5, r2, r1
 8005be4:	42a5      	cmp	r5, r4
 8005be6:	d10b      	bne.n	8005c00 <_free_r+0x70>
 8005be8:	6824      	ldr	r4, [r4, #0]
 8005bea:	4421      	add	r1, r4
 8005bec:	1854      	adds	r4, r2, r1
 8005bee:	42a3      	cmp	r3, r4
 8005bf0:	6011      	str	r1, [r2, #0]
 8005bf2:	d1e0      	bne.n	8005bb6 <_free_r+0x26>
 8005bf4:	681c      	ldr	r4, [r3, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	6053      	str	r3, [r2, #4]
 8005bfa:	4421      	add	r1, r4
 8005bfc:	6011      	str	r1, [r2, #0]
 8005bfe:	e7da      	b.n	8005bb6 <_free_r+0x26>
 8005c00:	d902      	bls.n	8005c08 <_free_r+0x78>
 8005c02:	230c      	movs	r3, #12
 8005c04:	6003      	str	r3, [r0, #0]
 8005c06:	e7d6      	b.n	8005bb6 <_free_r+0x26>
 8005c08:	6825      	ldr	r5, [r4, #0]
 8005c0a:	1961      	adds	r1, r4, r5
 8005c0c:	428b      	cmp	r3, r1
 8005c0e:	bf04      	itt	eq
 8005c10:	6819      	ldreq	r1, [r3, #0]
 8005c12:	685b      	ldreq	r3, [r3, #4]
 8005c14:	6063      	str	r3, [r4, #4]
 8005c16:	bf04      	itt	eq
 8005c18:	1949      	addeq	r1, r1, r5
 8005c1a:	6021      	streq	r1, [r4, #0]
 8005c1c:	6054      	str	r4, [r2, #4]
 8005c1e:	e7ca      	b.n	8005bb6 <_free_r+0x26>
 8005c20:	b003      	add	sp, #12
 8005c22:	bd30      	pop	{r4, r5, pc}
 8005c24:	200003f8 	.word	0x200003f8

08005c28 <sbrk_aligned>:
 8005c28:	b570      	push	{r4, r5, r6, lr}
 8005c2a:	4e0e      	ldr	r6, [pc, #56]	; (8005c64 <sbrk_aligned+0x3c>)
 8005c2c:	460c      	mov	r4, r1
 8005c2e:	6831      	ldr	r1, [r6, #0]
 8005c30:	4605      	mov	r5, r0
 8005c32:	b911      	cbnz	r1, 8005c3a <sbrk_aligned+0x12>
 8005c34:	f000 f9e6 	bl	8006004 <_sbrk_r>
 8005c38:	6030      	str	r0, [r6, #0]
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	f000 f9e1 	bl	8006004 <_sbrk_r>
 8005c42:	1c43      	adds	r3, r0, #1
 8005c44:	d00a      	beq.n	8005c5c <sbrk_aligned+0x34>
 8005c46:	1cc4      	adds	r4, r0, #3
 8005c48:	f024 0403 	bic.w	r4, r4, #3
 8005c4c:	42a0      	cmp	r0, r4
 8005c4e:	d007      	beq.n	8005c60 <sbrk_aligned+0x38>
 8005c50:	1a21      	subs	r1, r4, r0
 8005c52:	4628      	mov	r0, r5
 8005c54:	f000 f9d6 	bl	8006004 <_sbrk_r>
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d101      	bne.n	8005c60 <sbrk_aligned+0x38>
 8005c5c:	f04f 34ff 	mov.w	r4, #4294967295
 8005c60:	4620      	mov	r0, r4
 8005c62:	bd70      	pop	{r4, r5, r6, pc}
 8005c64:	200003fc 	.word	0x200003fc

08005c68 <_malloc_r>:
 8005c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c6c:	1ccd      	adds	r5, r1, #3
 8005c6e:	f025 0503 	bic.w	r5, r5, #3
 8005c72:	3508      	adds	r5, #8
 8005c74:	2d0c      	cmp	r5, #12
 8005c76:	bf38      	it	cc
 8005c78:	250c      	movcc	r5, #12
 8005c7a:	2d00      	cmp	r5, #0
 8005c7c:	4607      	mov	r7, r0
 8005c7e:	db01      	blt.n	8005c84 <_malloc_r+0x1c>
 8005c80:	42a9      	cmp	r1, r5
 8005c82:	d905      	bls.n	8005c90 <_malloc_r+0x28>
 8005c84:	230c      	movs	r3, #12
 8005c86:	603b      	str	r3, [r7, #0]
 8005c88:	2600      	movs	r6, #0
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c90:	4e2e      	ldr	r6, [pc, #184]	; (8005d4c <_malloc_r+0xe4>)
 8005c92:	f000 faa3 	bl	80061dc <__malloc_lock>
 8005c96:	6833      	ldr	r3, [r6, #0]
 8005c98:	461c      	mov	r4, r3
 8005c9a:	bb34      	cbnz	r4, 8005cea <_malloc_r+0x82>
 8005c9c:	4629      	mov	r1, r5
 8005c9e:	4638      	mov	r0, r7
 8005ca0:	f7ff ffc2 	bl	8005c28 <sbrk_aligned>
 8005ca4:	1c43      	adds	r3, r0, #1
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	d14d      	bne.n	8005d46 <_malloc_r+0xde>
 8005caa:	6834      	ldr	r4, [r6, #0]
 8005cac:	4626      	mov	r6, r4
 8005cae:	2e00      	cmp	r6, #0
 8005cb0:	d140      	bne.n	8005d34 <_malloc_r+0xcc>
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	4631      	mov	r1, r6
 8005cb6:	4638      	mov	r0, r7
 8005cb8:	eb04 0803 	add.w	r8, r4, r3
 8005cbc:	f000 f9a2 	bl	8006004 <_sbrk_r>
 8005cc0:	4580      	cmp	r8, r0
 8005cc2:	d13a      	bne.n	8005d3a <_malloc_r+0xd2>
 8005cc4:	6821      	ldr	r1, [r4, #0]
 8005cc6:	3503      	adds	r5, #3
 8005cc8:	1a6d      	subs	r5, r5, r1
 8005cca:	f025 0503 	bic.w	r5, r5, #3
 8005cce:	3508      	adds	r5, #8
 8005cd0:	2d0c      	cmp	r5, #12
 8005cd2:	bf38      	it	cc
 8005cd4:	250c      	movcc	r5, #12
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	4638      	mov	r0, r7
 8005cda:	f7ff ffa5 	bl	8005c28 <sbrk_aligned>
 8005cde:	3001      	adds	r0, #1
 8005ce0:	d02b      	beq.n	8005d3a <_malloc_r+0xd2>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	442b      	add	r3, r5
 8005ce6:	6023      	str	r3, [r4, #0]
 8005ce8:	e00e      	b.n	8005d08 <_malloc_r+0xa0>
 8005cea:	6822      	ldr	r2, [r4, #0]
 8005cec:	1b52      	subs	r2, r2, r5
 8005cee:	d41e      	bmi.n	8005d2e <_malloc_r+0xc6>
 8005cf0:	2a0b      	cmp	r2, #11
 8005cf2:	d916      	bls.n	8005d22 <_malloc_r+0xba>
 8005cf4:	1961      	adds	r1, r4, r5
 8005cf6:	42a3      	cmp	r3, r4
 8005cf8:	6025      	str	r5, [r4, #0]
 8005cfa:	bf18      	it	ne
 8005cfc:	6059      	strne	r1, [r3, #4]
 8005cfe:	6863      	ldr	r3, [r4, #4]
 8005d00:	bf08      	it	eq
 8005d02:	6031      	streq	r1, [r6, #0]
 8005d04:	5162      	str	r2, [r4, r5]
 8005d06:	604b      	str	r3, [r1, #4]
 8005d08:	4638      	mov	r0, r7
 8005d0a:	f104 060b 	add.w	r6, r4, #11
 8005d0e:	f000 fa6b 	bl	80061e8 <__malloc_unlock>
 8005d12:	f026 0607 	bic.w	r6, r6, #7
 8005d16:	1d23      	adds	r3, r4, #4
 8005d18:	1af2      	subs	r2, r6, r3
 8005d1a:	d0b6      	beq.n	8005c8a <_malloc_r+0x22>
 8005d1c:	1b9b      	subs	r3, r3, r6
 8005d1e:	50a3      	str	r3, [r4, r2]
 8005d20:	e7b3      	b.n	8005c8a <_malloc_r+0x22>
 8005d22:	6862      	ldr	r2, [r4, #4]
 8005d24:	42a3      	cmp	r3, r4
 8005d26:	bf0c      	ite	eq
 8005d28:	6032      	streq	r2, [r6, #0]
 8005d2a:	605a      	strne	r2, [r3, #4]
 8005d2c:	e7ec      	b.n	8005d08 <_malloc_r+0xa0>
 8005d2e:	4623      	mov	r3, r4
 8005d30:	6864      	ldr	r4, [r4, #4]
 8005d32:	e7b2      	b.n	8005c9a <_malloc_r+0x32>
 8005d34:	4634      	mov	r4, r6
 8005d36:	6876      	ldr	r6, [r6, #4]
 8005d38:	e7b9      	b.n	8005cae <_malloc_r+0x46>
 8005d3a:	230c      	movs	r3, #12
 8005d3c:	603b      	str	r3, [r7, #0]
 8005d3e:	4638      	mov	r0, r7
 8005d40:	f000 fa52 	bl	80061e8 <__malloc_unlock>
 8005d44:	e7a1      	b.n	8005c8a <_malloc_r+0x22>
 8005d46:	6025      	str	r5, [r4, #0]
 8005d48:	e7de      	b.n	8005d08 <_malloc_r+0xa0>
 8005d4a:	bf00      	nop
 8005d4c:	200003f8 	.word	0x200003f8

08005d50 <__sfputc_r>:
 8005d50:	6893      	ldr	r3, [r2, #8]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	b410      	push	{r4}
 8005d58:	6093      	str	r3, [r2, #8]
 8005d5a:	da08      	bge.n	8005d6e <__sfputc_r+0x1e>
 8005d5c:	6994      	ldr	r4, [r2, #24]
 8005d5e:	42a3      	cmp	r3, r4
 8005d60:	db01      	blt.n	8005d66 <__sfputc_r+0x16>
 8005d62:	290a      	cmp	r1, #10
 8005d64:	d103      	bne.n	8005d6e <__sfputc_r+0x1e>
 8005d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d6a:	f7fe ba11 	b.w	8004190 <__swbuf_r>
 8005d6e:	6813      	ldr	r3, [r2, #0]
 8005d70:	1c58      	adds	r0, r3, #1
 8005d72:	6010      	str	r0, [r2, #0]
 8005d74:	7019      	strb	r1, [r3, #0]
 8005d76:	4608      	mov	r0, r1
 8005d78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <__sfputs_r>:
 8005d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d80:	4606      	mov	r6, r0
 8005d82:	460f      	mov	r7, r1
 8005d84:	4614      	mov	r4, r2
 8005d86:	18d5      	adds	r5, r2, r3
 8005d88:	42ac      	cmp	r4, r5
 8005d8a:	d101      	bne.n	8005d90 <__sfputs_r+0x12>
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	e007      	b.n	8005da0 <__sfputs_r+0x22>
 8005d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d94:	463a      	mov	r2, r7
 8005d96:	4630      	mov	r0, r6
 8005d98:	f7ff ffda 	bl	8005d50 <__sfputc_r>
 8005d9c:	1c43      	adds	r3, r0, #1
 8005d9e:	d1f3      	bne.n	8005d88 <__sfputs_r+0xa>
 8005da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005da4 <_vfiprintf_r>:
 8005da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da8:	460d      	mov	r5, r1
 8005daa:	b09d      	sub	sp, #116	; 0x74
 8005dac:	4614      	mov	r4, r2
 8005dae:	4698      	mov	r8, r3
 8005db0:	4606      	mov	r6, r0
 8005db2:	b118      	cbz	r0, 8005dbc <_vfiprintf_r+0x18>
 8005db4:	6983      	ldr	r3, [r0, #24]
 8005db6:	b90b      	cbnz	r3, 8005dbc <_vfiprintf_r+0x18>
 8005db8:	f7ff fa3e 	bl	8005238 <__sinit>
 8005dbc:	4b89      	ldr	r3, [pc, #548]	; (8005fe4 <_vfiprintf_r+0x240>)
 8005dbe:	429d      	cmp	r5, r3
 8005dc0:	d11b      	bne.n	8005dfa <_vfiprintf_r+0x56>
 8005dc2:	6875      	ldr	r5, [r6, #4]
 8005dc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dc6:	07d9      	lsls	r1, r3, #31
 8005dc8:	d405      	bmi.n	8005dd6 <_vfiprintf_r+0x32>
 8005dca:	89ab      	ldrh	r3, [r5, #12]
 8005dcc:	059a      	lsls	r2, r3, #22
 8005dce:	d402      	bmi.n	8005dd6 <_vfiprintf_r+0x32>
 8005dd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dd2:	f7ff fad4 	bl	800537e <__retarget_lock_acquire_recursive>
 8005dd6:	89ab      	ldrh	r3, [r5, #12]
 8005dd8:	071b      	lsls	r3, r3, #28
 8005dda:	d501      	bpl.n	8005de0 <_vfiprintf_r+0x3c>
 8005ddc:	692b      	ldr	r3, [r5, #16]
 8005dde:	b9eb      	cbnz	r3, 8005e1c <_vfiprintf_r+0x78>
 8005de0:	4629      	mov	r1, r5
 8005de2:	4630      	mov	r0, r6
 8005de4:	f7fe fa26 	bl	8004234 <__swsetup_r>
 8005de8:	b1c0      	cbz	r0, 8005e1c <_vfiprintf_r+0x78>
 8005dea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dec:	07dc      	lsls	r4, r3, #31
 8005dee:	d50e      	bpl.n	8005e0e <_vfiprintf_r+0x6a>
 8005df0:	f04f 30ff 	mov.w	r0, #4294967295
 8005df4:	b01d      	add	sp, #116	; 0x74
 8005df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfa:	4b7b      	ldr	r3, [pc, #492]	; (8005fe8 <_vfiprintf_r+0x244>)
 8005dfc:	429d      	cmp	r5, r3
 8005dfe:	d101      	bne.n	8005e04 <_vfiprintf_r+0x60>
 8005e00:	68b5      	ldr	r5, [r6, #8]
 8005e02:	e7df      	b.n	8005dc4 <_vfiprintf_r+0x20>
 8005e04:	4b79      	ldr	r3, [pc, #484]	; (8005fec <_vfiprintf_r+0x248>)
 8005e06:	429d      	cmp	r5, r3
 8005e08:	bf08      	it	eq
 8005e0a:	68f5      	ldreq	r5, [r6, #12]
 8005e0c:	e7da      	b.n	8005dc4 <_vfiprintf_r+0x20>
 8005e0e:	89ab      	ldrh	r3, [r5, #12]
 8005e10:	0598      	lsls	r0, r3, #22
 8005e12:	d4ed      	bmi.n	8005df0 <_vfiprintf_r+0x4c>
 8005e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e16:	f7ff fab3 	bl	8005380 <__retarget_lock_release_recursive>
 8005e1a:	e7e9      	b.n	8005df0 <_vfiprintf_r+0x4c>
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e20:	2320      	movs	r3, #32
 8005e22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e26:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e2a:	2330      	movs	r3, #48	; 0x30
 8005e2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005ff0 <_vfiprintf_r+0x24c>
 8005e30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e34:	f04f 0901 	mov.w	r9, #1
 8005e38:	4623      	mov	r3, r4
 8005e3a:	469a      	mov	sl, r3
 8005e3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e40:	b10a      	cbz	r2, 8005e46 <_vfiprintf_r+0xa2>
 8005e42:	2a25      	cmp	r2, #37	; 0x25
 8005e44:	d1f9      	bne.n	8005e3a <_vfiprintf_r+0x96>
 8005e46:	ebba 0b04 	subs.w	fp, sl, r4
 8005e4a:	d00b      	beq.n	8005e64 <_vfiprintf_r+0xc0>
 8005e4c:	465b      	mov	r3, fp
 8005e4e:	4622      	mov	r2, r4
 8005e50:	4629      	mov	r1, r5
 8005e52:	4630      	mov	r0, r6
 8005e54:	f7ff ff93 	bl	8005d7e <__sfputs_r>
 8005e58:	3001      	adds	r0, #1
 8005e5a:	f000 80aa 	beq.w	8005fb2 <_vfiprintf_r+0x20e>
 8005e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e60:	445a      	add	r2, fp
 8005e62:	9209      	str	r2, [sp, #36]	; 0x24
 8005e64:	f89a 3000 	ldrb.w	r3, [sl]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 80a2 	beq.w	8005fb2 <_vfiprintf_r+0x20e>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f04f 32ff 	mov.w	r2, #4294967295
 8005e74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e78:	f10a 0a01 	add.w	sl, sl, #1
 8005e7c:	9304      	str	r3, [sp, #16]
 8005e7e:	9307      	str	r3, [sp, #28]
 8005e80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e84:	931a      	str	r3, [sp, #104]	; 0x68
 8005e86:	4654      	mov	r4, sl
 8005e88:	2205      	movs	r2, #5
 8005e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e8e:	4858      	ldr	r0, [pc, #352]	; (8005ff0 <_vfiprintf_r+0x24c>)
 8005e90:	f7fa f9ae 	bl	80001f0 <memchr>
 8005e94:	9a04      	ldr	r2, [sp, #16]
 8005e96:	b9d8      	cbnz	r0, 8005ed0 <_vfiprintf_r+0x12c>
 8005e98:	06d1      	lsls	r1, r2, #27
 8005e9a:	bf44      	itt	mi
 8005e9c:	2320      	movmi	r3, #32
 8005e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ea2:	0713      	lsls	r3, r2, #28
 8005ea4:	bf44      	itt	mi
 8005ea6:	232b      	movmi	r3, #43	; 0x2b
 8005ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eac:	f89a 3000 	ldrb.w	r3, [sl]
 8005eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8005eb2:	d015      	beq.n	8005ee0 <_vfiprintf_r+0x13c>
 8005eb4:	9a07      	ldr	r2, [sp, #28]
 8005eb6:	4654      	mov	r4, sl
 8005eb8:	2000      	movs	r0, #0
 8005eba:	f04f 0c0a 	mov.w	ip, #10
 8005ebe:	4621      	mov	r1, r4
 8005ec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ec4:	3b30      	subs	r3, #48	; 0x30
 8005ec6:	2b09      	cmp	r3, #9
 8005ec8:	d94e      	bls.n	8005f68 <_vfiprintf_r+0x1c4>
 8005eca:	b1b0      	cbz	r0, 8005efa <_vfiprintf_r+0x156>
 8005ecc:	9207      	str	r2, [sp, #28]
 8005ece:	e014      	b.n	8005efa <_vfiprintf_r+0x156>
 8005ed0:	eba0 0308 	sub.w	r3, r0, r8
 8005ed4:	fa09 f303 	lsl.w	r3, r9, r3
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	9304      	str	r3, [sp, #16]
 8005edc:	46a2      	mov	sl, r4
 8005ede:	e7d2      	b.n	8005e86 <_vfiprintf_r+0xe2>
 8005ee0:	9b03      	ldr	r3, [sp, #12]
 8005ee2:	1d19      	adds	r1, r3, #4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	9103      	str	r1, [sp, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	bfbb      	ittet	lt
 8005eec:	425b      	neglt	r3, r3
 8005eee:	f042 0202 	orrlt.w	r2, r2, #2
 8005ef2:	9307      	strge	r3, [sp, #28]
 8005ef4:	9307      	strlt	r3, [sp, #28]
 8005ef6:	bfb8      	it	lt
 8005ef8:	9204      	strlt	r2, [sp, #16]
 8005efa:	7823      	ldrb	r3, [r4, #0]
 8005efc:	2b2e      	cmp	r3, #46	; 0x2e
 8005efe:	d10c      	bne.n	8005f1a <_vfiprintf_r+0x176>
 8005f00:	7863      	ldrb	r3, [r4, #1]
 8005f02:	2b2a      	cmp	r3, #42	; 0x2a
 8005f04:	d135      	bne.n	8005f72 <_vfiprintf_r+0x1ce>
 8005f06:	9b03      	ldr	r3, [sp, #12]
 8005f08:	1d1a      	adds	r2, r3, #4
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	9203      	str	r2, [sp, #12]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	bfb8      	it	lt
 8005f12:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f16:	3402      	adds	r4, #2
 8005f18:	9305      	str	r3, [sp, #20]
 8005f1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006000 <_vfiprintf_r+0x25c>
 8005f1e:	7821      	ldrb	r1, [r4, #0]
 8005f20:	2203      	movs	r2, #3
 8005f22:	4650      	mov	r0, sl
 8005f24:	f7fa f964 	bl	80001f0 <memchr>
 8005f28:	b140      	cbz	r0, 8005f3c <_vfiprintf_r+0x198>
 8005f2a:	2340      	movs	r3, #64	; 0x40
 8005f2c:	eba0 000a 	sub.w	r0, r0, sl
 8005f30:	fa03 f000 	lsl.w	r0, r3, r0
 8005f34:	9b04      	ldr	r3, [sp, #16]
 8005f36:	4303      	orrs	r3, r0
 8005f38:	3401      	adds	r4, #1
 8005f3a:	9304      	str	r3, [sp, #16]
 8005f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f40:	482c      	ldr	r0, [pc, #176]	; (8005ff4 <_vfiprintf_r+0x250>)
 8005f42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f46:	2206      	movs	r2, #6
 8005f48:	f7fa f952 	bl	80001f0 <memchr>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	d03f      	beq.n	8005fd0 <_vfiprintf_r+0x22c>
 8005f50:	4b29      	ldr	r3, [pc, #164]	; (8005ff8 <_vfiprintf_r+0x254>)
 8005f52:	bb1b      	cbnz	r3, 8005f9c <_vfiprintf_r+0x1f8>
 8005f54:	9b03      	ldr	r3, [sp, #12]
 8005f56:	3307      	adds	r3, #7
 8005f58:	f023 0307 	bic.w	r3, r3, #7
 8005f5c:	3308      	adds	r3, #8
 8005f5e:	9303      	str	r3, [sp, #12]
 8005f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f62:	443b      	add	r3, r7
 8005f64:	9309      	str	r3, [sp, #36]	; 0x24
 8005f66:	e767      	b.n	8005e38 <_vfiprintf_r+0x94>
 8005f68:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f6c:	460c      	mov	r4, r1
 8005f6e:	2001      	movs	r0, #1
 8005f70:	e7a5      	b.n	8005ebe <_vfiprintf_r+0x11a>
 8005f72:	2300      	movs	r3, #0
 8005f74:	3401      	adds	r4, #1
 8005f76:	9305      	str	r3, [sp, #20]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	f04f 0c0a 	mov.w	ip, #10
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f84:	3a30      	subs	r2, #48	; 0x30
 8005f86:	2a09      	cmp	r2, #9
 8005f88:	d903      	bls.n	8005f92 <_vfiprintf_r+0x1ee>
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0c5      	beq.n	8005f1a <_vfiprintf_r+0x176>
 8005f8e:	9105      	str	r1, [sp, #20]
 8005f90:	e7c3      	b.n	8005f1a <_vfiprintf_r+0x176>
 8005f92:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f96:	4604      	mov	r4, r0
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e7f0      	b.n	8005f7e <_vfiprintf_r+0x1da>
 8005f9c:	ab03      	add	r3, sp, #12
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	462a      	mov	r2, r5
 8005fa2:	4b16      	ldr	r3, [pc, #88]	; (8005ffc <_vfiprintf_r+0x258>)
 8005fa4:	a904      	add	r1, sp, #16
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	f7fd fc9a 	bl	80038e0 <_printf_float>
 8005fac:	4607      	mov	r7, r0
 8005fae:	1c78      	adds	r0, r7, #1
 8005fb0:	d1d6      	bne.n	8005f60 <_vfiprintf_r+0x1bc>
 8005fb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fb4:	07d9      	lsls	r1, r3, #31
 8005fb6:	d405      	bmi.n	8005fc4 <_vfiprintf_r+0x220>
 8005fb8:	89ab      	ldrh	r3, [r5, #12]
 8005fba:	059a      	lsls	r2, r3, #22
 8005fbc:	d402      	bmi.n	8005fc4 <_vfiprintf_r+0x220>
 8005fbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fc0:	f7ff f9de 	bl	8005380 <__retarget_lock_release_recursive>
 8005fc4:	89ab      	ldrh	r3, [r5, #12]
 8005fc6:	065b      	lsls	r3, r3, #25
 8005fc8:	f53f af12 	bmi.w	8005df0 <_vfiprintf_r+0x4c>
 8005fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fce:	e711      	b.n	8005df4 <_vfiprintf_r+0x50>
 8005fd0:	ab03      	add	r3, sp, #12
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	462a      	mov	r2, r5
 8005fd6:	4b09      	ldr	r3, [pc, #36]	; (8005ffc <_vfiprintf_r+0x258>)
 8005fd8:	a904      	add	r1, sp, #16
 8005fda:	4630      	mov	r0, r6
 8005fdc:	f7fd ff24 	bl	8003e28 <_printf_i>
 8005fe0:	e7e4      	b.n	8005fac <_vfiprintf_r+0x208>
 8005fe2:	bf00      	nop
 8005fe4:	08006578 	.word	0x08006578
 8005fe8:	08006598 	.word	0x08006598
 8005fec:	08006558 	.word	0x08006558
 8005ff0:	08006714 	.word	0x08006714
 8005ff4:	0800671e 	.word	0x0800671e
 8005ff8:	080038e1 	.word	0x080038e1
 8005ffc:	08005d7f 	.word	0x08005d7f
 8006000:	0800671a 	.word	0x0800671a

08006004 <_sbrk_r>:
 8006004:	b538      	push	{r3, r4, r5, lr}
 8006006:	4d06      	ldr	r5, [pc, #24]	; (8006020 <_sbrk_r+0x1c>)
 8006008:	2300      	movs	r3, #0
 800600a:	4604      	mov	r4, r0
 800600c:	4608      	mov	r0, r1
 800600e:	602b      	str	r3, [r5, #0]
 8006010:	f000 f992 	bl	8006338 <_sbrk>
 8006014:	1c43      	adds	r3, r0, #1
 8006016:	d102      	bne.n	800601e <_sbrk_r+0x1a>
 8006018:	682b      	ldr	r3, [r5, #0]
 800601a:	b103      	cbz	r3, 800601e <_sbrk_r+0x1a>
 800601c:	6023      	str	r3, [r4, #0]
 800601e:	bd38      	pop	{r3, r4, r5, pc}
 8006020:	20000400 	.word	0x20000400

08006024 <__sread>:
 8006024:	b510      	push	{r4, lr}
 8006026:	460c      	mov	r4, r1
 8006028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800602c:	f000 f8e2 	bl	80061f4 <_read_r>
 8006030:	2800      	cmp	r0, #0
 8006032:	bfab      	itete	ge
 8006034:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006036:	89a3      	ldrhlt	r3, [r4, #12]
 8006038:	181b      	addge	r3, r3, r0
 800603a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800603e:	bfac      	ite	ge
 8006040:	6563      	strge	r3, [r4, #84]	; 0x54
 8006042:	81a3      	strhlt	r3, [r4, #12]
 8006044:	bd10      	pop	{r4, pc}

08006046 <__swrite>:
 8006046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800604a:	461f      	mov	r7, r3
 800604c:	898b      	ldrh	r3, [r1, #12]
 800604e:	05db      	lsls	r3, r3, #23
 8006050:	4605      	mov	r5, r0
 8006052:	460c      	mov	r4, r1
 8006054:	4616      	mov	r6, r2
 8006056:	d505      	bpl.n	8006064 <__swrite+0x1e>
 8006058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800605c:	2302      	movs	r3, #2
 800605e:	2200      	movs	r2, #0
 8006060:	f000 f898 	bl	8006194 <_lseek_r>
 8006064:	89a3      	ldrh	r3, [r4, #12]
 8006066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800606a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800606e:	81a3      	strh	r3, [r4, #12]
 8006070:	4632      	mov	r2, r6
 8006072:	463b      	mov	r3, r7
 8006074:	4628      	mov	r0, r5
 8006076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800607a:	f000 b817 	b.w	80060ac <_write_r>

0800607e <__sseek>:
 800607e:	b510      	push	{r4, lr}
 8006080:	460c      	mov	r4, r1
 8006082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006086:	f000 f885 	bl	8006194 <_lseek_r>
 800608a:	1c43      	adds	r3, r0, #1
 800608c:	89a3      	ldrh	r3, [r4, #12]
 800608e:	bf15      	itete	ne
 8006090:	6560      	strne	r0, [r4, #84]	; 0x54
 8006092:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006096:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800609a:	81a3      	strheq	r3, [r4, #12]
 800609c:	bf18      	it	ne
 800609e:	81a3      	strhne	r3, [r4, #12]
 80060a0:	bd10      	pop	{r4, pc}

080060a2 <__sclose>:
 80060a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060a6:	f000 b831 	b.w	800610c <_close_r>
	...

080060ac <_write_r>:
 80060ac:	b538      	push	{r3, r4, r5, lr}
 80060ae:	4d07      	ldr	r5, [pc, #28]	; (80060cc <_write_r+0x20>)
 80060b0:	4604      	mov	r4, r0
 80060b2:	4608      	mov	r0, r1
 80060b4:	4611      	mov	r1, r2
 80060b6:	2200      	movs	r2, #0
 80060b8:	602a      	str	r2, [r5, #0]
 80060ba:	461a      	mov	r2, r3
 80060bc:	f7fb f9c7 	bl	800144e <_write>
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	d102      	bne.n	80060ca <_write_r+0x1e>
 80060c4:	682b      	ldr	r3, [r5, #0]
 80060c6:	b103      	cbz	r3, 80060ca <_write_r+0x1e>
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	bd38      	pop	{r3, r4, r5, pc}
 80060cc:	20000400 	.word	0x20000400

080060d0 <__assert_func>:
 80060d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060d2:	4614      	mov	r4, r2
 80060d4:	461a      	mov	r2, r3
 80060d6:	4b09      	ldr	r3, [pc, #36]	; (80060fc <__assert_func+0x2c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4605      	mov	r5, r0
 80060dc:	68d8      	ldr	r0, [r3, #12]
 80060de:	b14c      	cbz	r4, 80060f4 <__assert_func+0x24>
 80060e0:	4b07      	ldr	r3, [pc, #28]	; (8006100 <__assert_func+0x30>)
 80060e2:	9100      	str	r1, [sp, #0]
 80060e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80060e8:	4906      	ldr	r1, [pc, #24]	; (8006104 <__assert_func+0x34>)
 80060ea:	462b      	mov	r3, r5
 80060ec:	f000 f81e 	bl	800612c <fiprintf>
 80060f0:	f000 f89f 	bl	8006232 <abort>
 80060f4:	4b04      	ldr	r3, [pc, #16]	; (8006108 <__assert_func+0x38>)
 80060f6:	461c      	mov	r4, r3
 80060f8:	e7f3      	b.n	80060e2 <__assert_func+0x12>
 80060fa:	bf00      	nop
 80060fc:	20000010 	.word	0x20000010
 8006100:	08006725 	.word	0x08006725
 8006104:	08006732 	.word	0x08006732
 8006108:	08006760 	.word	0x08006760

0800610c <_close_r>:
 800610c:	b538      	push	{r3, r4, r5, lr}
 800610e:	4d06      	ldr	r5, [pc, #24]	; (8006128 <_close_r+0x1c>)
 8006110:	2300      	movs	r3, #0
 8006112:	4604      	mov	r4, r0
 8006114:	4608      	mov	r0, r1
 8006116:	602b      	str	r3, [r5, #0]
 8006118:	f000 f8d6 	bl	80062c8 <_close>
 800611c:	1c43      	adds	r3, r0, #1
 800611e:	d102      	bne.n	8006126 <_close_r+0x1a>
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	b103      	cbz	r3, 8006126 <_close_r+0x1a>
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	bd38      	pop	{r3, r4, r5, pc}
 8006128:	20000400 	.word	0x20000400

0800612c <fiprintf>:
 800612c:	b40e      	push	{r1, r2, r3}
 800612e:	b503      	push	{r0, r1, lr}
 8006130:	4601      	mov	r1, r0
 8006132:	ab03      	add	r3, sp, #12
 8006134:	4805      	ldr	r0, [pc, #20]	; (800614c <fiprintf+0x20>)
 8006136:	f853 2b04 	ldr.w	r2, [r3], #4
 800613a:	6800      	ldr	r0, [r0, #0]
 800613c:	9301      	str	r3, [sp, #4]
 800613e:	f7ff fe31 	bl	8005da4 <_vfiprintf_r>
 8006142:	b002      	add	sp, #8
 8006144:	f85d eb04 	ldr.w	lr, [sp], #4
 8006148:	b003      	add	sp, #12
 800614a:	4770      	bx	lr
 800614c:	20000010 	.word	0x20000010

08006150 <_fstat_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4d07      	ldr	r5, [pc, #28]	; (8006170 <_fstat_r+0x20>)
 8006154:	2300      	movs	r3, #0
 8006156:	4604      	mov	r4, r0
 8006158:	4608      	mov	r0, r1
 800615a:	4611      	mov	r1, r2
 800615c:	602b      	str	r3, [r5, #0]
 800615e:	f000 f8bb 	bl	80062d8 <_fstat>
 8006162:	1c43      	adds	r3, r0, #1
 8006164:	d102      	bne.n	800616c <_fstat_r+0x1c>
 8006166:	682b      	ldr	r3, [r5, #0]
 8006168:	b103      	cbz	r3, 800616c <_fstat_r+0x1c>
 800616a:	6023      	str	r3, [r4, #0]
 800616c:	bd38      	pop	{r3, r4, r5, pc}
 800616e:	bf00      	nop
 8006170:	20000400 	.word	0x20000400

08006174 <_isatty_r>:
 8006174:	b538      	push	{r3, r4, r5, lr}
 8006176:	4d06      	ldr	r5, [pc, #24]	; (8006190 <_isatty_r+0x1c>)
 8006178:	2300      	movs	r3, #0
 800617a:	4604      	mov	r4, r0
 800617c:	4608      	mov	r0, r1
 800617e:	602b      	str	r3, [r5, #0]
 8006180:	f000 f8ba 	bl	80062f8 <_isatty>
 8006184:	1c43      	adds	r3, r0, #1
 8006186:	d102      	bne.n	800618e <_isatty_r+0x1a>
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	b103      	cbz	r3, 800618e <_isatty_r+0x1a>
 800618c:	6023      	str	r3, [r4, #0]
 800618e:	bd38      	pop	{r3, r4, r5, pc}
 8006190:	20000400 	.word	0x20000400

08006194 <_lseek_r>:
 8006194:	b538      	push	{r3, r4, r5, lr}
 8006196:	4d07      	ldr	r5, [pc, #28]	; (80061b4 <_lseek_r+0x20>)
 8006198:	4604      	mov	r4, r0
 800619a:	4608      	mov	r0, r1
 800619c:	4611      	mov	r1, r2
 800619e:	2200      	movs	r2, #0
 80061a0:	602a      	str	r2, [r5, #0]
 80061a2:	461a      	mov	r2, r3
 80061a4:	f000 f8b8 	bl	8006318 <_lseek>
 80061a8:	1c43      	adds	r3, r0, #1
 80061aa:	d102      	bne.n	80061b2 <_lseek_r+0x1e>
 80061ac:	682b      	ldr	r3, [r5, #0]
 80061ae:	b103      	cbz	r3, 80061b2 <_lseek_r+0x1e>
 80061b0:	6023      	str	r3, [r4, #0]
 80061b2:	bd38      	pop	{r3, r4, r5, pc}
 80061b4:	20000400 	.word	0x20000400

080061b8 <__ascii_mbtowc>:
 80061b8:	b082      	sub	sp, #8
 80061ba:	b901      	cbnz	r1, 80061be <__ascii_mbtowc+0x6>
 80061bc:	a901      	add	r1, sp, #4
 80061be:	b142      	cbz	r2, 80061d2 <__ascii_mbtowc+0x1a>
 80061c0:	b14b      	cbz	r3, 80061d6 <__ascii_mbtowc+0x1e>
 80061c2:	7813      	ldrb	r3, [r2, #0]
 80061c4:	600b      	str	r3, [r1, #0]
 80061c6:	7812      	ldrb	r2, [r2, #0]
 80061c8:	1e10      	subs	r0, r2, #0
 80061ca:	bf18      	it	ne
 80061cc:	2001      	movne	r0, #1
 80061ce:	b002      	add	sp, #8
 80061d0:	4770      	bx	lr
 80061d2:	4610      	mov	r0, r2
 80061d4:	e7fb      	b.n	80061ce <__ascii_mbtowc+0x16>
 80061d6:	f06f 0001 	mvn.w	r0, #1
 80061da:	e7f8      	b.n	80061ce <__ascii_mbtowc+0x16>

080061dc <__malloc_lock>:
 80061dc:	4801      	ldr	r0, [pc, #4]	; (80061e4 <__malloc_lock+0x8>)
 80061de:	f7ff b8ce 	b.w	800537e <__retarget_lock_acquire_recursive>
 80061e2:	bf00      	nop
 80061e4:	200003f4 	.word	0x200003f4

080061e8 <__malloc_unlock>:
 80061e8:	4801      	ldr	r0, [pc, #4]	; (80061f0 <__malloc_unlock+0x8>)
 80061ea:	f7ff b8c9 	b.w	8005380 <__retarget_lock_release_recursive>
 80061ee:	bf00      	nop
 80061f0:	200003f4 	.word	0x200003f4

080061f4 <_read_r>:
 80061f4:	b538      	push	{r3, r4, r5, lr}
 80061f6:	4d07      	ldr	r5, [pc, #28]	; (8006214 <_read_r+0x20>)
 80061f8:	4604      	mov	r4, r0
 80061fa:	4608      	mov	r0, r1
 80061fc:	4611      	mov	r1, r2
 80061fe:	2200      	movs	r2, #0
 8006200:	602a      	str	r2, [r5, #0]
 8006202:	461a      	mov	r2, r3
 8006204:	f000 f890 	bl	8006328 <_read>
 8006208:	1c43      	adds	r3, r0, #1
 800620a:	d102      	bne.n	8006212 <_read_r+0x1e>
 800620c:	682b      	ldr	r3, [r5, #0]
 800620e:	b103      	cbz	r3, 8006212 <_read_r+0x1e>
 8006210:	6023      	str	r3, [r4, #0]
 8006212:	bd38      	pop	{r3, r4, r5, pc}
 8006214:	20000400 	.word	0x20000400

08006218 <__ascii_wctomb>:
 8006218:	b149      	cbz	r1, 800622e <__ascii_wctomb+0x16>
 800621a:	2aff      	cmp	r2, #255	; 0xff
 800621c:	bf85      	ittet	hi
 800621e:	238a      	movhi	r3, #138	; 0x8a
 8006220:	6003      	strhi	r3, [r0, #0]
 8006222:	700a      	strbls	r2, [r1, #0]
 8006224:	f04f 30ff 	movhi.w	r0, #4294967295
 8006228:	bf98      	it	ls
 800622a:	2001      	movls	r0, #1
 800622c:	4770      	bx	lr
 800622e:	4608      	mov	r0, r1
 8006230:	4770      	bx	lr

08006232 <abort>:
 8006232:	b508      	push	{r3, lr}
 8006234:	2006      	movs	r0, #6
 8006236:	f000 f82b 	bl	8006290 <raise>
 800623a:	2001      	movs	r0, #1
 800623c:	f000 f88a 	bl	8006354 <_exit>

08006240 <_raise_r>:
 8006240:	291f      	cmp	r1, #31
 8006242:	b538      	push	{r3, r4, r5, lr}
 8006244:	4604      	mov	r4, r0
 8006246:	460d      	mov	r5, r1
 8006248:	d904      	bls.n	8006254 <_raise_r+0x14>
 800624a:	2316      	movs	r3, #22
 800624c:	6003      	str	r3, [r0, #0]
 800624e:	f04f 30ff 	mov.w	r0, #4294967295
 8006252:	bd38      	pop	{r3, r4, r5, pc}
 8006254:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006256:	b112      	cbz	r2, 800625e <_raise_r+0x1e>
 8006258:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800625c:	b94b      	cbnz	r3, 8006272 <_raise_r+0x32>
 800625e:	4620      	mov	r0, r4
 8006260:	f000 f830 	bl	80062c4 <_getpid_r>
 8006264:	462a      	mov	r2, r5
 8006266:	4601      	mov	r1, r0
 8006268:	4620      	mov	r0, r4
 800626a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800626e:	f000 b817 	b.w	80062a0 <_kill_r>
 8006272:	2b01      	cmp	r3, #1
 8006274:	d00a      	beq.n	800628c <_raise_r+0x4c>
 8006276:	1c59      	adds	r1, r3, #1
 8006278:	d103      	bne.n	8006282 <_raise_r+0x42>
 800627a:	2316      	movs	r3, #22
 800627c:	6003      	str	r3, [r0, #0]
 800627e:	2001      	movs	r0, #1
 8006280:	e7e7      	b.n	8006252 <_raise_r+0x12>
 8006282:	2400      	movs	r4, #0
 8006284:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006288:	4628      	mov	r0, r5
 800628a:	4798      	blx	r3
 800628c:	2000      	movs	r0, #0
 800628e:	e7e0      	b.n	8006252 <_raise_r+0x12>

08006290 <raise>:
 8006290:	4b02      	ldr	r3, [pc, #8]	; (800629c <raise+0xc>)
 8006292:	4601      	mov	r1, r0
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	f7ff bfd3 	b.w	8006240 <_raise_r>
 800629a:	bf00      	nop
 800629c:	20000010 	.word	0x20000010

080062a0 <_kill_r>:
 80062a0:	b538      	push	{r3, r4, r5, lr}
 80062a2:	4d07      	ldr	r5, [pc, #28]	; (80062c0 <_kill_r+0x20>)
 80062a4:	2300      	movs	r3, #0
 80062a6:	4604      	mov	r4, r0
 80062a8:	4608      	mov	r0, r1
 80062aa:	4611      	mov	r1, r2
 80062ac:	602b      	str	r3, [r5, #0]
 80062ae:	f000 f82b 	bl	8006308 <_kill>
 80062b2:	1c43      	adds	r3, r0, #1
 80062b4:	d102      	bne.n	80062bc <_kill_r+0x1c>
 80062b6:	682b      	ldr	r3, [r5, #0]
 80062b8:	b103      	cbz	r3, 80062bc <_kill_r+0x1c>
 80062ba:	6023      	str	r3, [r4, #0]
 80062bc:	bd38      	pop	{r3, r4, r5, pc}
 80062be:	bf00      	nop
 80062c0:	20000400 	.word	0x20000400

080062c4 <_getpid_r>:
 80062c4:	f000 b810 	b.w	80062e8 <_getpid>

080062c8 <_close>:
 80062c8:	4b02      	ldr	r3, [pc, #8]	; (80062d4 <_close+0xc>)
 80062ca:	2258      	movs	r2, #88	; 0x58
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	f04f 30ff 	mov.w	r0, #4294967295
 80062d2:	4770      	bx	lr
 80062d4:	20000400 	.word	0x20000400

080062d8 <_fstat>:
 80062d8:	4b02      	ldr	r3, [pc, #8]	; (80062e4 <_fstat+0xc>)
 80062da:	2258      	movs	r2, #88	; 0x58
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	f04f 30ff 	mov.w	r0, #4294967295
 80062e2:	4770      	bx	lr
 80062e4:	20000400 	.word	0x20000400

080062e8 <_getpid>:
 80062e8:	4b02      	ldr	r3, [pc, #8]	; (80062f4 <_getpid+0xc>)
 80062ea:	2258      	movs	r2, #88	; 0x58
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	f04f 30ff 	mov.w	r0, #4294967295
 80062f2:	4770      	bx	lr
 80062f4:	20000400 	.word	0x20000400

080062f8 <_isatty>:
 80062f8:	4b02      	ldr	r3, [pc, #8]	; (8006304 <_isatty+0xc>)
 80062fa:	2258      	movs	r2, #88	; 0x58
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	2000      	movs	r0, #0
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	20000400 	.word	0x20000400

08006308 <_kill>:
 8006308:	4b02      	ldr	r3, [pc, #8]	; (8006314 <_kill+0xc>)
 800630a:	2258      	movs	r2, #88	; 0x58
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	f04f 30ff 	mov.w	r0, #4294967295
 8006312:	4770      	bx	lr
 8006314:	20000400 	.word	0x20000400

08006318 <_lseek>:
 8006318:	4b02      	ldr	r3, [pc, #8]	; (8006324 <_lseek+0xc>)
 800631a:	2258      	movs	r2, #88	; 0x58
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	f04f 30ff 	mov.w	r0, #4294967295
 8006322:	4770      	bx	lr
 8006324:	20000400 	.word	0x20000400

08006328 <_read>:
 8006328:	4b02      	ldr	r3, [pc, #8]	; (8006334 <_read+0xc>)
 800632a:	2258      	movs	r2, #88	; 0x58
 800632c:	601a      	str	r2, [r3, #0]
 800632e:	f04f 30ff 	mov.w	r0, #4294967295
 8006332:	4770      	bx	lr
 8006334:	20000400 	.word	0x20000400

08006338 <_sbrk>:
 8006338:	4a04      	ldr	r2, [pc, #16]	; (800634c <_sbrk+0x14>)
 800633a:	6811      	ldr	r1, [r2, #0]
 800633c:	4603      	mov	r3, r0
 800633e:	b909      	cbnz	r1, 8006344 <_sbrk+0xc>
 8006340:	4903      	ldr	r1, [pc, #12]	; (8006350 <_sbrk+0x18>)
 8006342:	6011      	str	r1, [r2, #0]
 8006344:	6810      	ldr	r0, [r2, #0]
 8006346:	4403      	add	r3, r0
 8006348:	6013      	str	r3, [r2, #0]
 800634a:	4770      	bx	lr
 800634c:	20000404 	.word	0x20000404
 8006350:	20000408 	.word	0x20000408

08006354 <_exit>:
 8006354:	e7fe      	b.n	8006354 <_exit>
	...

08006358 <_init>:
 8006358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635a:	bf00      	nop
 800635c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800635e:	bc08      	pop	{r3}
 8006360:	469e      	mov	lr, r3
 8006362:	4770      	bx	lr

08006364 <_fini>:
 8006364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006366:	bf00      	nop
 8006368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800636a:	bc08      	pop	{r3}
 800636c:	469e      	mov	lr, r3
 800636e:	4770      	bx	lr
